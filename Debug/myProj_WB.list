
myProj_WB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073e4  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000278  08007520  08007520  00017520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08007798  08007798  00017798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800779c  0800779c  0001779c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000020  20000008  080077a0  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 MB_MEM2       00000883  20000028  080077c0  00020028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  200008ac  08008043  000208ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200008e4  08008078  000208e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  200008f8  08008089  000208f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bc4  08008089  00020bc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000208f5  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00030000  2**2
                  ALLOC
 14 .debug_info   00024a78  00000000  00000000  00020925  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004ed5  00000000  00000000  0004539d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000022a8  00000000  00000000  0004a278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002040  00000000  00000000  0004c520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002ab0c  00000000  00000000  0004e560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00023408  00000000  00000000  0007906c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f0dde  00000000  00000000  0009c474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0018d252  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00008f04  00000000  00000000  0018d2a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200008f8 	.word	0x200008f8
 8000158:	00000000 	.word	0x00000000
 800015c:	08007508 	.word	0x08007508

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200008fc 	.word	0x200008fc
 8000178:	08007508 	.word	0x08007508

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 800018c:	b5b0      	push	{r4, r5, r7, lr}
 800018e:	b088      	sub	sp, #32
 8000190:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000192:	4b0b      	ldr	r3, [pc, #44]	; (80001c0 <APPD_EnableCPU2+0x34>)
 8000194:	1d3c      	adds	r4, r7, #4
 8000196:	461d      	mov	r5, r3
 8000198:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800019a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800019c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001a0:	c403      	stmia	r4!, {r0, r1}
 80001a2:	8022      	strh	r2, [r4, #0]
 80001a4:	3402      	adds	r4, #2
 80001a6:	0c13      	lsrs	r3, r2, #16
 80001a8:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80001aa:	f005 ff69 	bl	8006080 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80001ae:	1d3b      	adds	r3, r7, #4
 80001b0:	4618      	mov	r0, r3
 80001b2:	f005 fa04 	bl	80055be <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80001b6:	bf00      	nop
}
 80001b8:	3720      	adds	r7, #32
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bdb0      	pop	{r4, r5, r7, pc}
 80001be:	bf00      	nop
 80001c0:	08007520 	.word	0x08007520

080001c4 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80001c4:	b480      	push	{r7}
 80001c6:	b083      	sub	sp, #12
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80001cc:	4b07      	ldr	r3, [pc, #28]	; (80001ec <LL_C2_PWR_SetPowerMode+0x28>)
 80001ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80001d2:	f023 0207 	bic.w	r2, r3, #7
 80001d6:	4905      	ldr	r1, [pc, #20]	; (80001ec <LL_C2_PWR_SetPowerMode+0x28>)
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	4313      	orrs	r3, r2
 80001dc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80001e0:	bf00      	nop
 80001e2:	370c      	adds	r7, #12
 80001e4:	46bd      	mov	sp, r7
 80001e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ea:	4770      	bx	lr
 80001ec:	58000400 	.word	0x58000400

080001f0 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80001f0:	b480      	push	{r7}
 80001f2:	b083      	sub	sp, #12
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80001f8:	4b06      	ldr	r3, [pc, #24]	; (8000214 <LL_EXTI_EnableIT_32_63+0x24>)
 80001fa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80001fe:	4905      	ldr	r1, [pc, #20]	; (8000214 <LL_EXTI_EnableIT_32_63+0x24>)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	4313      	orrs	r3, r2
 8000204:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000208:	bf00      	nop
 800020a:	370c      	adds	r7, #12
 800020c:	46bd      	mov	sp, r7
 800020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000212:	4770      	bx	lr
 8000214:	58000800 	.word	0x58000800

08000218 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000224:	4a0a      	ldr	r2, [pc, #40]	; (8000250 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000226:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800022a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800022e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000232:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	021b      	lsls	r3, r3, #8
 800023a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800023e:	4313      	orrs	r3, r2
 8000240:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000244:	bf00      	nop
 8000246:	370c      	adds	r7, #12
 8000248:	46bd      	mov	sp, r7
 800024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024e:	4770      	bx	lr
 8000250:	cafecafe 	.word	0xcafecafe

08000254 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000254:	b480      	push	{r7}
 8000256:	b083      	sub	sp, #12
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800025c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000260:	689b      	ldr	r3, [r3, #8]
 8000262:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000266:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	4313      	orrs	r3, r2
 800026e:	608b      	str	r3, [r1, #8]
}
 8000270:	bf00      	nop
 8000272:	370c      	adds	r7, #12
 8000274:	46bd      	mov	sp, r7
 8000276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027a:	4770      	bx	lr

0800027c <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000280:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000288:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800028c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000290:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000294:	bf00      	nop
 8000296:	46bd      	mov	sp, r7
 8000298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029c:	4770      	bx	lr

0800029e <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 800029e:	b480      	push	{r7}
 80002a0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80002a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80002aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80002ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80002b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80002b6:	bf00      	nop
 80002b8:	46bd      	mov	sp, r7
 80002ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002be:	4770      	bx	lr

080002c0 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 80002c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80002cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80002d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80002d4:	d101      	bne.n	80002da <LL_RCC_IsActiveFlag_PINRST+0x1a>
 80002d6:	2301      	movs	r3, #1
 80002d8:	e000      	b.n	80002dc <LL_RCC_IsActiveFlag_PINRST+0x1c>
 80002da:	2300      	movs	r3, #0
}
 80002dc:	4618      	mov	r0, r3
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr

080002e6 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 80002e6:	b480      	push	{r7}
 80002e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 80002ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80002f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80002fa:	d101      	bne.n	8000300 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80002fc:	2301      	movs	r3, #1
 80002fe:	e000      	b.n	8000302 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8000300:	2300      	movs	r3, #0
}
 8000302:	4618      	mov	r0, r3
 8000304:	46bd      	mov	sp, r7
 8000306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030a:	4770      	bx	lr

0800030c <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800030c:	b480      	push	{r7}
 800030e:	b085      	sub	sp, #20
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000314:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000318:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800031a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	4313      	orrs	r3, r2
 8000322:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000324:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000328:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	4013      	ands	r3, r2
 800032e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000330:	68fb      	ldr	r3, [r7, #12]
}
 8000332:	bf00      	nop
 8000334:	3714      	adds	r7, #20
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr
	...

08000340 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8000344:	4b04      	ldr	r3, [pc, #16]	; (8000358 <LL_DBGMCU_GetDeviceID+0x18>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 800034c:	4618      	mov	r0, r3
 800034e:	46bd      	mov	sp, r7
 8000350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop
 8000358:	e0042000 	.word	0xe0042000

0800035c <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000360:	4b04      	ldr	r3, [pc, #16]	; (8000374 <LL_DBGMCU_GetRevisionID+0x18>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	0c1b      	lsrs	r3, r3, #16
 8000366:	b29b      	uxth	r3, r3
}
 8000368:	4618      	mov	r0, r3
 800036a:	46bd      	mov	sp, r7
 800036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000370:	4770      	bx	lr
 8000372:	bf00      	nop
 8000374:	e0042000 	.word	0xe0042000

08000378 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000378:	b480      	push	{r7}
 800037a:	b083      	sub	sp, #12
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
 8000380:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	685a      	ldr	r2, [r3, #4]
 8000386:	683b      	ldr	r3, [r7, #0]
 8000388:	041b      	lsls	r3, r3, #16
 800038a:	431a      	orrs	r2, r3
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	605a      	str	r2, [r3, #4]
}
 8000390:	bf00      	nop
 8000392:	370c      	adds	r7, #12
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr

0800039c <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800039c:	b480      	push	{r7}
 800039e:	b083      	sub	sp, #12
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
 80003a4:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	685a      	ldr	r2, [r3, #4]
 80003aa:	683b      	ldr	r3, [r7, #0]
 80003ac:	431a      	orrs	r2, r3
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	605a      	str	r2, [r3, #4]
}
 80003b2:	bf00      	nop
 80003b4:	370c      	adds	r7, #12
 80003b6:	46bd      	mov	sp, r7
 80003b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003bc:	4770      	bx	lr

080003be <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80003be:	b480      	push	{r7}
 80003c0:	b083      	sub	sp, #12
 80003c2:	af00      	add	r7, sp, #0
 80003c4:	6078      	str	r0, [r7, #4]
 80003c6:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	695a      	ldr	r2, [r3, #20]
 80003cc:	683b      	ldr	r3, [r7, #0]
 80003ce:	041b      	lsls	r3, r3, #16
 80003d0:	431a      	orrs	r2, r3
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	615a      	str	r2, [r3, #20]
}
 80003d6:	bf00      	nop
 80003d8:	370c      	adds	r7, #12
 80003da:	46bd      	mov	sp, r7
 80003dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e0:	4770      	bx	lr

080003e2 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80003e2:	b480      	push	{r7}
 80003e4:	b083      	sub	sp, #12
 80003e6:	af00      	add	r7, sp, #0
 80003e8:	6078      	str	r0, [r7, #4]
 80003ea:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	695a      	ldr	r2, [r3, #20]
 80003f0:	683b      	ldr	r3, [r7, #0]
 80003f2:	431a      	orrs	r2, r3
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	615a      	str	r2, [r3, #20]
}
 80003f8:	bf00      	nop
 80003fa:	370c      	adds	r7, #12
 80003fc:	46bd      	mov	sp, r7
 80003fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000402:	4770      	bx	lr

08000404 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000404:	b480      	push	{r7}
 8000406:	b083      	sub	sp, #12
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
 800040c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	683a      	ldr	r2, [r7, #0]
 8000412:	609a      	str	r2, [r3, #8]
}
 8000414:	bf00      	nop
 8000416:	370c      	adds	r7, #12
 8000418:	46bd      	mov	sp, r7
 800041a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041e:	4770      	bx	lr

08000420 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
 8000428:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	683a      	ldr	r2, [r7, #0]
 800042e:	619a      	str	r2, [r3, #24]
}
 8000430:	bf00      	nop
 8000432:	370c      	adds	r7, #12
 8000434:	46bd      	mov	sp, r7
 8000436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043a:	4770      	bx	lr

0800043c <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 800043c:	b480      	push	{r7}
 800043e:	b083      	sub	sp, #12
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	22ff      	movs	r2, #255	; 0xff
 8000448:	625a      	str	r2, [r3, #36]	; 0x24
}
 800044a:	bf00      	nop
 800044c:	370c      	adds	r7, #12
 800044e:	46bd      	mov	sp, r7
 8000450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000454:	4770      	bx	lr

08000456 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000456:	b480      	push	{r7}
 8000458:	b083      	sub	sp, #12
 800045a:	af00      	add	r7, sp, #0
 800045c:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	22ca      	movs	r2, #202	; 0xca
 8000462:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	2253      	movs	r2, #83	; 0x53
 8000468:	625a      	str	r2, [r3, #36]	; 0x24
}
 800046a:	bf00      	nop
 800046c:	370c      	adds	r7, #12
 800046e:	46bd      	mov	sp, r7
 8000470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000474:	4770      	bx	lr

08000476 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000476:	b480      	push	{r7}
 8000478:	b083      	sub	sp, #12
 800047a:	af00      	add	r7, sp, #0
 800047c:	6078      	str	r0, [r7, #4]
 800047e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	689b      	ldr	r3, [r3, #8]
 8000484:	f023 0207 	bic.w	r2, r3, #7
 8000488:	683b      	ldr	r3, [r7, #0]
 800048a:	431a      	orrs	r2, r3
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	609a      	str	r2, [r3, #8]
}
 8000490:	bf00      	nop
 8000492:	370c      	adds	r7, #12
 8000494:	46bd      	mov	sp, r7
 8000496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049a:	4770      	bx	lr

0800049c <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80004a0:	4b04      	ldr	r3, [pc, #16]	; (80004b4 <MX_APPE_Config+0x18>)
 80004a2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80004a6:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 80004a8:	f000 f824 	bl	80004f4 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 80004ac:	f000 f864 	bl	8000578 <Config_HSE>

  return;
 80004b0:	bf00      	nop
}
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	58004000 	.word	0x58004000

080004b8 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 80004bc:	f000 f870 	bl	80005a0 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 80004c0:	f000 f888 	bl	80005d4 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80004c4:	4903      	ldr	r1, [pc, #12]	; (80004d4 <MX_APPE_Init+0x1c>)
 80004c6:	2000      	movs	r0, #0
 80004c8:	f000 fdb0 	bl	800102c <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80004cc:	f000 f890 	bl	80005f0 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 80004d0:	bf00      	nop
}
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	200009f0 	.word	0x200009f0

080004d8 <Init_Smps>:

void Init_Smps(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 80004dc:	bf00      	nop
}
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr

080004e6 <Init_Exti>:

void Init_Exti(void)
{
 80004e6:	b580      	push	{r7, lr}
 80004e8:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 80004ea:	2050      	movs	r0, #80	; 0x50
 80004ec:	f7ff fe80 	bl	80001f0 <LL_EXTI_EnableIT_32_63>

  return;
 80004f0:	bf00      	nop
}
 80004f2:	bd80      	pop	{r7, pc}

080004f4 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 80004f8:	f000 f804 	bl	8000504 <Reset_BackupDomain>

  Reset_IPCC();
 80004fc:	f000 f81a 	bl	8000534 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8000500:	bf00      	nop
}
 8000502:	bd80      	pop	{r7, pc}

08000504 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8000508:	f7ff feda 	bl	80002c0 <LL_RCC_IsActiveFlag_PINRST>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d00d      	beq.n	800052e <Reset_BackupDomain+0x2a>
 8000512:	f7ff fee8 	bl	80002e6 <LL_RCC_IsActiveFlag_SFTRST>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d108      	bne.n	800052e <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 800051c:	f001 fee2 	bl	80022e4 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8000520:	f001 fee0 	bl	80022e4 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8000524:	f7ff feaa 	bl	800027c <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8000528:	f7ff feb9 	bl	800029e <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 800052c:	bf00      	nop
 800052e:	bf00      	nop
}
 8000530:	bd80      	pop	{r7, pc}
	...

08000534 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8000538:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800053c:	f7ff fee6 	bl	800030c <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8000540:	213f      	movs	r1, #63	; 0x3f
 8000542:	480c      	ldr	r0, [pc, #48]	; (8000574 <Reset_IPCC+0x40>)
 8000544:	f7ff ff5e 	bl	8000404 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8000548:	213f      	movs	r1, #63	; 0x3f
 800054a:	480a      	ldr	r0, [pc, #40]	; (8000574 <Reset_IPCC+0x40>)
 800054c:	f7ff ff68 	bl	8000420 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8000550:	213f      	movs	r1, #63	; 0x3f
 8000552:	4808      	ldr	r0, [pc, #32]	; (8000574 <Reset_IPCC+0x40>)
 8000554:	f7ff ff10 	bl	8000378 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8000558:	213f      	movs	r1, #63	; 0x3f
 800055a:	4806      	ldr	r0, [pc, #24]	; (8000574 <Reset_IPCC+0x40>)
 800055c:	f7ff ff2f 	bl	80003be <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8000560:	213f      	movs	r1, #63	; 0x3f
 8000562:	4804      	ldr	r0, [pc, #16]	; (8000574 <Reset_IPCC+0x40>)
 8000564:	f7ff ff1a 	bl	800039c <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8000568:	213f      	movs	r1, #63	; 0x3f
 800056a:	4802      	ldr	r0, [pc, #8]	; (8000574 <Reset_IPCC+0x40>)
 800056c:	f7ff ff39 	bl	80003e2 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8000570:	bf00      	nop
}
 8000572:	bd80      	pop	{r7, pc}
 8000574:	58000c00 	.word	0x58000c00

08000578 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 800057e:	2000      	movs	r0, #0
 8000580:	f005 fe0a 	bl	8006198 <OTP_Read>
 8000584:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d005      	beq.n	8000598 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	799b      	ldrb	r3, [r3, #6]
 8000590:	4618      	mov	r0, r3
 8000592:	f7ff fe41 	bl	8000218 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000596:	bf00      	nop
 8000598:	bf00      	nop
}
 800059a:	3708      	adds	r7, #8
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}

080005a0 <System_Init>:

static void System_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  Init_Smps();
 80005a4:	f7ff ff98 	bl	80004d8 <Init_Smps>

  Init_Exti();
 80005a8:	f7ff ff9d 	bl	80004e6 <Init_Exti>

  Init_Rtc();
 80005ac:	f000 f802 	bl	80005b4 <Init_Rtc>

  return;
 80005b0:	bf00      	nop
}
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <Init_Rtc>:

static void Init_Rtc(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80005b8:	4805      	ldr	r0, [pc, #20]	; (80005d0 <Init_Rtc+0x1c>)
 80005ba:	f7ff ff4c 	bl	8000456 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80005be:	2100      	movs	r1, #0
 80005c0:	4803      	ldr	r0, [pc, #12]	; (80005d0 <Init_Rtc+0x1c>)
 80005c2:	f7ff ff58 	bl	8000476 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80005c6:	4802      	ldr	r0, [pc, #8]	; (80005d0 <Init_Rtc+0x1c>)
 80005c8:	f7ff ff38 	bl	800043c <LL_RTC_EnableWriteProtection>

  return;
 80005cc:	bf00      	nop
}
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40002800 	.word	0x40002800

080005d4 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80005d8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80005dc:	f7ff fe3a 	bl	8000254 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80005e0:	f006 fcd8 	bl	8006f94 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80005e4:	2004      	movs	r0, #4
 80005e6:	f7ff fded 	bl	80001c4 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 80005ea:	bf00      	nop
}
 80005ec:	bd80      	pop	{r7, pc}
	...

080005f0 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b088      	sub	sp, #32
 80005f4:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80005f6:	f005 fb8d 	bl	8005d14 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80005fa:	4a11      	ldr	r2, [pc, #68]	; (8000640 <appe_Tl_Init+0x50>)
 80005fc:	2100      	movs	r1, #0
 80005fe:	2004      	movs	r0, #4
 8000600:	f006 fe06 	bl	8007210 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000604:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <appe_Tl_Init+0x54>)
 8000606:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000608:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <appe_Tl_Init+0x58>)
 800060a:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 800060c:	463b      	mov	r3, r7
 800060e:	4619      	mov	r1, r3
 8000610:	480e      	ldr	r0, [pc, #56]	; (800064c <appe_Tl_Init+0x5c>)
 8000612:	f005 fa45 	bl	8005aa0 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000616:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <appe_Tl_Init+0x60>)
 8000618:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800061a:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <appe_Tl_Init+0x64>)
 800061c:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800061e:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <appe_Tl_Init+0x68>)
 8000620:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000622:	f240 533c 	movw	r3, #1340	; 0x53c
 8000626:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000628:	f107 0308 	add.w	r3, r7, #8
 800062c:	4618      	mov	r0, r3
 800062e:	f005 fcb3 	bl	8005f98 <TL_MM_Init>

  TL_Enable();
 8000632:	f005 fb69 	bl	8005d08 <TL_Enable>

  return;
 8000636:	bf00      	nop
}
 8000638:	3720      	adds	r7, #32
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	08005ad9 	.word	0x08005ad9
 8000644:	20000578 	.word	0x20000578
 8000648:	0800065d 	.word	0x0800065d
 800064c:	08000675 	.word	0x08000675
 8000650:	20000790 	.word	0x20000790
 8000654:	20000684 	.word	0x20000684
 8000658:	2000003c 	.word	0x2000003c

0800065c <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000666:	bf00      	nop
}
 8000668:	370c      	adds	r7, #12
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
	...

08000674 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b088      	sub	sp, #32
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	685b      	ldr	r3, [r3, #4]
 8000680:	330b      	adds	r3, #11
 8000682:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8000684:	69fb      	ldr	r3, [r7, #28]
 8000686:	881b      	ldrh	r3, [r3, #0]
 8000688:	b29b      	uxth	r3, r3
 800068a:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 800068e:	2b07      	cmp	r3, #7
 8000690:	d81f      	bhi.n	80006d2 <APPE_SysUserEvtRx+0x5e>
 8000692:	a201      	add	r2, pc, #4	; (adr r2, 8000698 <APPE_SysUserEvtRx+0x24>)
 8000694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000698:	080006b9 	.word	0x080006b9
 800069c:	080006cb 	.word	0x080006cb
 80006a0:	080006d3 	.word	0x080006d3
 80006a4:	080006d3 	.word	0x080006d3
 80006a8:	080006d3 	.word	0x080006d3
 80006ac:	080006d3 	.word	0x080006d3
 80006b0:	080006d3 	.word	0x080006d3
 80006b4:	080006d3 	.word	0x080006d3
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	4618      	mov	r0, r3
 80006be:	f004 ffab 	bl	8005618 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 80006c2:	6878      	ldr	r0, [r7, #4]
 80006c4:	f000 f81b 	bl	80006fe <APPE_SysEvtReadyProcessing>
    break;
 80006c8:	e004      	b.n	80006d4 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f000 f806 	bl	80006dc <APPE_SysEvtError>
    break;
 80006d0:	e000      	b.n	80006d4 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 80006d2:	bf00      	nop
  }

  return;
 80006d4:	bf00      	nop
}
 80006d6:	3720      	adds	r7, #32
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 80006dc:	b480      	push	{r7}
 80006de:	b085      	sub	sp, #20
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	685b      	ldr	r3, [r3, #4]
 80006e8:	330b      	adds	r3, #11
 80006ea:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	3302      	adds	r3, #2
 80006f0:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80006f2:	bf00      	nop
}
 80006f4:	3714      	adds	r7, #20
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr

080006fe <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80006fe:	b580      	push	{r7, lr}
 8000700:	b08a      	sub	sp, #40	; 0x28
 8000702:	af00      	add	r7, sp, #0
 8000704:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8000706:	f107 0308 	add.w	r3, r7, #8
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000714:	2300      	movs	r3, #0
 8000716:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 8000718:	2300      	movs	r3, #0
 800071a:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	685b      	ldr	r3, [r3, #4]
 8000720:	330b      	adds	r3, #11
 8000722:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000724:	69fb      	ldr	r3, [r7, #28]
 8000726:	3302      	adds	r3, #2
 8000728:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 800072a:	69bb      	ldr	r3, [r7, #24]
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d11d      	bne.n	800076e <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8000732:	f7ff fd2b 	bl	800018c <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000736:	230f      	movs	r3, #15
 8000738:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 800073a:	237f      	movs	r3, #127	; 0x7f
 800073c:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 800073e:	f7ff fe0d 	bl	800035c <LL_DBGMCU_GetRevisionID>
 8000742:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8000744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000746:	b29b      	uxth	r3, r3
 8000748:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 800074a:	f7ff fdf9 	bl	8000340 <LL_DBGMCU_GetDeviceID>
 800074e:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 8000750:	6a3b      	ldr	r3, [r7, #32]
 8000752:	b29b      	uxth	r3, r3
 8000754:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8000756:	f107 0308 	add.w	r3, r7, #8
 800075a:	4618      	mov	r0, r3
 800075c:	f004 ff46 	bl	80055ec <SHCI_C2_Config>

    APP_BLE_Init();
 8000760:	f005 fe24 	bl	80063ac <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000764:	2100      	movs	r1, #0
 8000766:	2001      	movs	r0, #1
 8000768:	f006 fc26 	bl	8006fb8 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 800076c:	e007      	b.n	800077e <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 800076e:	69bb      	ldr	r3, [r7, #24]
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	2b01      	cmp	r3, #1
 8000774:	d103      	bne.n	800077e <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2200      	movs	r2, #0
 800077a:	701a      	strb	r2, [r3, #0]
  return;
 800077c:	bf00      	nop
 800077e:	bf00      	nop
}
 8000780:	3728      	adds	r7, #40	; 0x28
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 8000786:	b580      	push	{r7, lr}
 8000788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800078a:	f04f 30ff 	mov.w	r0, #4294967295
 800078e:	f006 fc43 	bl	8007018 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}

08000796 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 800079a:	bf00      	nop
}
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr

080007a4 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80007ae:	f04f 30ff 	mov.w	r0, #4294967295
 80007b2:	f006 fc31 	bl	8007018 <UTIL_SEQ_Run>

  return;
 80007b6:	bf00      	nop
}
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}

080007be <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80007be:	b580      	push	{r7, lr}
 80007c0:	b082      	sub	sp, #8
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80007c6:	2100      	movs	r1, #0
 80007c8:	2004      	movs	r0, #4
 80007ca:	f006 fd43 	bl	8007254 <UTIL_SEQ_SetTask>
  return;
 80007ce:	bf00      	nop
}
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80007d6:	b580      	push	{r7, lr}
 80007d8:	b082      	sub	sp, #8
 80007da:	af00      	add	r7, sp, #0
 80007dc:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80007de:	2002      	movs	r0, #2
 80007e0:	f006 fda4 	bl	800732c <UTIL_SEQ_SetEvt>
  return;
 80007e4:	bf00      	nop
}
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}

080007ec <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80007f4:	2002      	movs	r0, #2
 80007f6:	f006 fdb9 	bl	800736c <UTIL_SEQ_WaitEvt>
  return;
 80007fa:	bf00      	nop
}
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
	...

08000804 <LL_EXTI_EnableIT_0_31>:
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <LL_EXTI_EnableIT_0_31+0x24>)
 800080e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000812:	4905      	ldr	r1, [pc, #20]	; (8000828 <LL_EXTI_EnableIT_0_31+0x24>)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	4313      	orrs	r3, r2
 8000818:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800081c:	bf00      	nop
 800081e:	370c      	adds	r7, #12
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr
 8000828:	58000800 	.word	0x58000800

0800082c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000834:	4b05      	ldr	r3, [pc, #20]	; (800084c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000836:	681a      	ldr	r2, [r3, #0]
 8000838:	4904      	ldr	r1, [pc, #16]	; (800084c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	4313      	orrs	r3, r2
 800083e:	600b      	str	r3, [r1, #0]

}
 8000840:	bf00      	nop
 8000842:	370c      	adds	r7, #12
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr
 800084c:	58000800 	.word	0x58000800

08000850 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000856:	4b0d      	ldr	r3, [pc, #52]	; (800088c <ReadRtcSsrValue+0x3c>)
 8000858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800085a:	b29b      	uxth	r3, r3
 800085c:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800085e:	4b0b      	ldr	r3, [pc, #44]	; (800088c <ReadRtcSsrValue+0x3c>)
 8000860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000862:	b29b      	uxth	r3, r3
 8000864:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000866:	e005      	b.n	8000874 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800086c:	4b07      	ldr	r3, [pc, #28]	; (800088c <ReadRtcSsrValue+0x3c>)
 800086e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000870:	b29b      	uxth	r3, r3
 8000872:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000874:	687a      	ldr	r2, [r7, #4]
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	429a      	cmp	r2, r3
 800087a:	d1f5      	bne.n	8000868 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 800087c:	683b      	ldr	r3, [r7, #0]
}
 800087e:	4618      	mov	r0, r3
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	40002800 	.word	0x40002800

08000890 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000890:	b480      	push	{r7}
 8000892:	b085      	sub	sp, #20
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	460a      	mov	r2, r1
 800089a:	71fb      	strb	r3, [r7, #7]
 800089c:	4613      	mov	r3, r2
 800089e:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80008a0:	79ba      	ldrb	r2, [r7, #6]
 80008a2:	491d      	ldr	r1, [pc, #116]	; (8000918 <LinkTimerAfter+0x88>)
 80008a4:	4613      	mov	r3, r2
 80008a6:	005b      	lsls	r3, r3, #1
 80008a8:	4413      	add	r3, r2
 80008aa:	00db      	lsls	r3, r3, #3
 80008ac:	440b      	add	r3, r1
 80008ae:	3315      	adds	r3, #21
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80008b4:	7bfb      	ldrb	r3, [r7, #15]
 80008b6:	2b06      	cmp	r3, #6
 80008b8:	d009      	beq.n	80008ce <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80008ba:	7bfa      	ldrb	r2, [r7, #15]
 80008bc:	4916      	ldr	r1, [pc, #88]	; (8000918 <LinkTimerAfter+0x88>)
 80008be:	4613      	mov	r3, r2
 80008c0:	005b      	lsls	r3, r3, #1
 80008c2:	4413      	add	r3, r2
 80008c4:	00db      	lsls	r3, r3, #3
 80008c6:	440b      	add	r3, r1
 80008c8:	3314      	adds	r3, #20
 80008ca:	79fa      	ldrb	r2, [r7, #7]
 80008cc:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80008ce:	79fa      	ldrb	r2, [r7, #7]
 80008d0:	4911      	ldr	r1, [pc, #68]	; (8000918 <LinkTimerAfter+0x88>)
 80008d2:	4613      	mov	r3, r2
 80008d4:	005b      	lsls	r3, r3, #1
 80008d6:	4413      	add	r3, r2
 80008d8:	00db      	lsls	r3, r3, #3
 80008da:	440b      	add	r3, r1
 80008dc:	3315      	adds	r3, #21
 80008de:	7bfa      	ldrb	r2, [r7, #15]
 80008e0:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80008e2:	79fa      	ldrb	r2, [r7, #7]
 80008e4:	490c      	ldr	r1, [pc, #48]	; (8000918 <LinkTimerAfter+0x88>)
 80008e6:	4613      	mov	r3, r2
 80008e8:	005b      	lsls	r3, r3, #1
 80008ea:	4413      	add	r3, r2
 80008ec:	00db      	lsls	r3, r3, #3
 80008ee:	440b      	add	r3, r1
 80008f0:	3314      	adds	r3, #20
 80008f2:	79ba      	ldrb	r2, [r7, #6]
 80008f4:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80008f6:	79ba      	ldrb	r2, [r7, #6]
 80008f8:	4907      	ldr	r1, [pc, #28]	; (8000918 <LinkTimerAfter+0x88>)
 80008fa:	4613      	mov	r3, r2
 80008fc:	005b      	lsls	r3, r3, #1
 80008fe:	4413      	add	r3, r2
 8000900:	00db      	lsls	r3, r3, #3
 8000902:	440b      	add	r3, r1
 8000904:	3315      	adds	r3, #21
 8000906:	79fa      	ldrb	r2, [r7, #7]
 8000908:	701a      	strb	r2, [r3, #0]

  return;
 800090a:	bf00      	nop
}
 800090c:	3714      	adds	r7, #20
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	20000914 	.word	0x20000914

0800091c <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 800091c:	b480      	push	{r7}
 800091e:	b085      	sub	sp, #20
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	460a      	mov	r2, r1
 8000926:	71fb      	strb	r3, [r7, #7]
 8000928:	4613      	mov	r3, r2
 800092a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 800092c:	4b29      	ldr	r3, [pc, #164]	; (80009d4 <LinkTimerBefore+0xb8>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	b2db      	uxtb	r3, r3
 8000932:	79ba      	ldrb	r2, [r7, #6]
 8000934:	429a      	cmp	r2, r3
 8000936:	d032      	beq.n	800099e <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000938:	79ba      	ldrb	r2, [r7, #6]
 800093a:	4927      	ldr	r1, [pc, #156]	; (80009d8 <LinkTimerBefore+0xbc>)
 800093c:	4613      	mov	r3, r2
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	4413      	add	r3, r2
 8000942:	00db      	lsls	r3, r3, #3
 8000944:	440b      	add	r3, r1
 8000946:	3314      	adds	r3, #20
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 800094c:	7bfa      	ldrb	r2, [r7, #15]
 800094e:	4922      	ldr	r1, [pc, #136]	; (80009d8 <LinkTimerBefore+0xbc>)
 8000950:	4613      	mov	r3, r2
 8000952:	005b      	lsls	r3, r3, #1
 8000954:	4413      	add	r3, r2
 8000956:	00db      	lsls	r3, r3, #3
 8000958:	440b      	add	r3, r1
 800095a:	3315      	adds	r3, #21
 800095c:	79fa      	ldrb	r2, [r7, #7]
 800095e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000960:	79fa      	ldrb	r2, [r7, #7]
 8000962:	491d      	ldr	r1, [pc, #116]	; (80009d8 <LinkTimerBefore+0xbc>)
 8000964:	4613      	mov	r3, r2
 8000966:	005b      	lsls	r3, r3, #1
 8000968:	4413      	add	r3, r2
 800096a:	00db      	lsls	r3, r3, #3
 800096c:	440b      	add	r3, r1
 800096e:	3315      	adds	r3, #21
 8000970:	79ba      	ldrb	r2, [r7, #6]
 8000972:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000974:	79fa      	ldrb	r2, [r7, #7]
 8000976:	4918      	ldr	r1, [pc, #96]	; (80009d8 <LinkTimerBefore+0xbc>)
 8000978:	4613      	mov	r3, r2
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	4413      	add	r3, r2
 800097e:	00db      	lsls	r3, r3, #3
 8000980:	440b      	add	r3, r1
 8000982:	3314      	adds	r3, #20
 8000984:	7bfa      	ldrb	r2, [r7, #15]
 8000986:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000988:	79ba      	ldrb	r2, [r7, #6]
 800098a:	4913      	ldr	r1, [pc, #76]	; (80009d8 <LinkTimerBefore+0xbc>)
 800098c:	4613      	mov	r3, r2
 800098e:	005b      	lsls	r3, r3, #1
 8000990:	4413      	add	r3, r2
 8000992:	00db      	lsls	r3, r3, #3
 8000994:	440b      	add	r3, r1
 8000996:	3314      	adds	r3, #20
 8000998:	79fa      	ldrb	r2, [r7, #7]
 800099a:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 800099c:	e014      	b.n	80009c8 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 800099e:	79fa      	ldrb	r2, [r7, #7]
 80009a0:	490d      	ldr	r1, [pc, #52]	; (80009d8 <LinkTimerBefore+0xbc>)
 80009a2:	4613      	mov	r3, r2
 80009a4:	005b      	lsls	r3, r3, #1
 80009a6:	4413      	add	r3, r2
 80009a8:	00db      	lsls	r3, r3, #3
 80009aa:	440b      	add	r3, r1
 80009ac:	3315      	adds	r3, #21
 80009ae:	79ba      	ldrb	r2, [r7, #6]
 80009b0:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80009b2:	79ba      	ldrb	r2, [r7, #6]
 80009b4:	4908      	ldr	r1, [pc, #32]	; (80009d8 <LinkTimerBefore+0xbc>)
 80009b6:	4613      	mov	r3, r2
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	4413      	add	r3, r2
 80009bc:	00db      	lsls	r3, r3, #3
 80009be:	440b      	add	r3, r1
 80009c0:	3314      	adds	r3, #20
 80009c2:	79fa      	ldrb	r2, [r7, #7]
 80009c4:	701a      	strb	r2, [r3, #0]
  return;
 80009c6:	bf00      	nop
}
 80009c8:	3714      	adds	r7, #20
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	200009a4 	.word	0x200009a4
 80009d8:	20000914 	.word	0x20000914

080009dc <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80009e6:	4b4e      	ldr	r3, [pc, #312]	; (8000b20 <linkTimer+0x144>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	2b06      	cmp	r3, #6
 80009ee:	d118      	bne.n	8000a22 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 80009f0:	4b4b      	ldr	r3, [pc, #300]	; (8000b20 <linkTimer+0x144>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	b2da      	uxtb	r2, r3
 80009f6:	4b4b      	ldr	r3, [pc, #300]	; (8000b24 <linkTimer+0x148>)
 80009f8:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 80009fa:	4a49      	ldr	r2, [pc, #292]	; (8000b20 <linkTimer+0x144>)
 80009fc:	79fb      	ldrb	r3, [r7, #7]
 80009fe:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000a00:	79fa      	ldrb	r2, [r7, #7]
 8000a02:	4949      	ldr	r1, [pc, #292]	; (8000b28 <linkTimer+0x14c>)
 8000a04:	4613      	mov	r3, r2
 8000a06:	005b      	lsls	r3, r3, #1
 8000a08:	4413      	add	r3, r2
 8000a0a:	00db      	lsls	r3, r3, #3
 8000a0c:	440b      	add	r3, r1
 8000a0e:	3315      	adds	r3, #21
 8000a10:	2206      	movs	r2, #6
 8000a12:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000a14:	4b45      	ldr	r3, [pc, #276]	; (8000b2c <linkTimer+0x150>)
 8000a16:	f04f 32ff 	mov.w	r2, #4294967295
 8000a1a:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	81fb      	strh	r3, [r7, #14]
 8000a20:	e078      	b.n	8000b14 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000a22:	f000 f909 	bl	8000c38 <ReturnTimeElapsed>
 8000a26:	4603      	mov	r3, r0
 8000a28:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000a2a:	79fa      	ldrb	r2, [r7, #7]
 8000a2c:	493e      	ldr	r1, [pc, #248]	; (8000b28 <linkTimer+0x14c>)
 8000a2e:	4613      	mov	r3, r2
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	4413      	add	r3, r2
 8000a34:	00db      	lsls	r3, r3, #3
 8000a36:	440b      	add	r3, r1
 8000a38:	3308      	adds	r3, #8
 8000a3a:	6819      	ldr	r1, [r3, #0]
 8000a3c:	89fb      	ldrh	r3, [r7, #14]
 8000a3e:	79fa      	ldrb	r2, [r7, #7]
 8000a40:	4419      	add	r1, r3
 8000a42:	4839      	ldr	r0, [pc, #228]	; (8000b28 <linkTimer+0x14c>)
 8000a44:	4613      	mov	r3, r2
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	4413      	add	r3, r2
 8000a4a:	00db      	lsls	r3, r3, #3
 8000a4c:	4403      	add	r3, r0
 8000a4e:	3308      	adds	r3, #8
 8000a50:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000a52:	79fa      	ldrb	r2, [r7, #7]
 8000a54:	4934      	ldr	r1, [pc, #208]	; (8000b28 <linkTimer+0x14c>)
 8000a56:	4613      	mov	r3, r2
 8000a58:	005b      	lsls	r3, r3, #1
 8000a5a:	4413      	add	r3, r2
 8000a5c:	00db      	lsls	r3, r3, #3
 8000a5e:	440b      	add	r3, r1
 8000a60:	3308      	adds	r3, #8
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000a66:	4b2e      	ldr	r3, [pc, #184]	; (8000b20 <linkTimer+0x144>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4a2e      	ldr	r2, [pc, #184]	; (8000b28 <linkTimer+0x14c>)
 8000a70:	460b      	mov	r3, r1
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	440b      	add	r3, r1
 8000a76:	00db      	lsls	r3, r3, #3
 8000a78:	4413      	add	r3, r2
 8000a7a:	3308      	adds	r3, #8
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	68ba      	ldr	r2, [r7, #8]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d337      	bcc.n	8000af4 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000a84:	4b26      	ldr	r3, [pc, #152]	; (8000b20 <linkTimer+0x144>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000a8a:	7b7a      	ldrb	r2, [r7, #13]
 8000a8c:	4926      	ldr	r1, [pc, #152]	; (8000b28 <linkTimer+0x14c>)
 8000a8e:	4613      	mov	r3, r2
 8000a90:	005b      	lsls	r3, r3, #1
 8000a92:	4413      	add	r3, r2
 8000a94:	00db      	lsls	r3, r3, #3
 8000a96:	440b      	add	r3, r1
 8000a98:	3315      	adds	r3, #21
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000a9e:	e013      	b.n	8000ac8 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000aa0:	7b7a      	ldrb	r2, [r7, #13]
 8000aa2:	4921      	ldr	r1, [pc, #132]	; (8000b28 <linkTimer+0x14c>)
 8000aa4:	4613      	mov	r3, r2
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	4413      	add	r3, r2
 8000aaa:	00db      	lsls	r3, r3, #3
 8000aac:	440b      	add	r3, r1
 8000aae:	3315      	adds	r3, #21
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000ab4:	7b7a      	ldrb	r2, [r7, #13]
 8000ab6:	491c      	ldr	r1, [pc, #112]	; (8000b28 <linkTimer+0x14c>)
 8000ab8:	4613      	mov	r3, r2
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	4413      	add	r3, r2
 8000abe:	00db      	lsls	r3, r3, #3
 8000ac0:	440b      	add	r3, r1
 8000ac2:	3315      	adds	r3, #21
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000ac8:	7b3b      	ldrb	r3, [r7, #12]
 8000aca:	2b06      	cmp	r3, #6
 8000acc:	d00b      	beq.n	8000ae6 <linkTimer+0x10a>
 8000ace:	7b3a      	ldrb	r2, [r7, #12]
 8000ad0:	4915      	ldr	r1, [pc, #84]	; (8000b28 <linkTimer+0x14c>)
 8000ad2:	4613      	mov	r3, r2
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	4413      	add	r3, r2
 8000ad8:	00db      	lsls	r3, r3, #3
 8000ada:	440b      	add	r3, r1
 8000adc:	3308      	adds	r3, #8
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	68ba      	ldr	r2, [r7, #8]
 8000ae2:	429a      	cmp	r2, r3
 8000ae4:	d2dc      	bcs.n	8000aa0 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000ae6:	7b7a      	ldrb	r2, [r7, #13]
 8000ae8:	79fb      	ldrb	r3, [r7, #7]
 8000aea:	4611      	mov	r1, r2
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff fecf 	bl	8000890 <LinkTimerAfter>
 8000af2:	e00f      	b.n	8000b14 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000af4:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <linkTimer+0x144>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	b2da      	uxtb	r2, r3
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	4611      	mov	r1, r2
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff ff0c 	bl	800091c <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <linkTimer+0x144>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	b2da      	uxtb	r2, r3
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <linkTimer+0x148>)
 8000b0c:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000b0e:	4a04      	ldr	r2, [pc, #16]	; (8000b20 <linkTimer+0x144>)
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000b14:	89fb      	ldrh	r3, [r7, #14]
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3710      	adds	r7, #16
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	200009a4 	.word	0x200009a4
 8000b24:	200009a5 	.word	0x200009a5
 8000b28:	20000914 	.word	0x20000914
 8000b2c:	200009a8 	.word	0x200009a8

08000b30 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	460a      	mov	r2, r1
 8000b3a:	71fb      	strb	r3, [r7, #7]
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000b40:	4b39      	ldr	r3, [pc, #228]	; (8000c28 <UnlinkTimer+0xf8>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	79fa      	ldrb	r2, [r7, #7]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d111      	bne.n	8000b70 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000b4c:	4b36      	ldr	r3, [pc, #216]	; (8000c28 <UnlinkTimer+0xf8>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	b2da      	uxtb	r2, r3
 8000b52:	4b36      	ldr	r3, [pc, #216]	; (8000c2c <UnlinkTimer+0xfc>)
 8000b54:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000b56:	79fa      	ldrb	r2, [r7, #7]
 8000b58:	4935      	ldr	r1, [pc, #212]	; (8000c30 <UnlinkTimer+0x100>)
 8000b5a:	4613      	mov	r3, r2
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	4413      	add	r3, r2
 8000b60:	00db      	lsls	r3, r3, #3
 8000b62:	440b      	add	r3, r1
 8000b64:	3315      	adds	r3, #21
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	b2da      	uxtb	r2, r3
 8000b6a:	4b2f      	ldr	r3, [pc, #188]	; (8000c28 <UnlinkTimer+0xf8>)
 8000b6c:	701a      	strb	r2, [r3, #0]
 8000b6e:	e03e      	b.n	8000bee <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000b70:	79fa      	ldrb	r2, [r7, #7]
 8000b72:	492f      	ldr	r1, [pc, #188]	; (8000c30 <UnlinkTimer+0x100>)
 8000b74:	4613      	mov	r3, r2
 8000b76:	005b      	lsls	r3, r3, #1
 8000b78:	4413      	add	r3, r2
 8000b7a:	00db      	lsls	r3, r3, #3
 8000b7c:	440b      	add	r3, r1
 8000b7e:	3314      	adds	r3, #20
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000b84:	79fa      	ldrb	r2, [r7, #7]
 8000b86:	492a      	ldr	r1, [pc, #168]	; (8000c30 <UnlinkTimer+0x100>)
 8000b88:	4613      	mov	r3, r2
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	4413      	add	r3, r2
 8000b8e:	00db      	lsls	r3, r3, #3
 8000b90:	440b      	add	r3, r1
 8000b92:	3315      	adds	r3, #21
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000b98:	79f9      	ldrb	r1, [r7, #7]
 8000b9a:	7bfa      	ldrb	r2, [r7, #15]
 8000b9c:	4824      	ldr	r0, [pc, #144]	; (8000c30 <UnlinkTimer+0x100>)
 8000b9e:	460b      	mov	r3, r1
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	440b      	add	r3, r1
 8000ba4:	00db      	lsls	r3, r3, #3
 8000ba6:	4403      	add	r3, r0
 8000ba8:	3315      	adds	r3, #21
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	b2d8      	uxtb	r0, r3
 8000bae:	4920      	ldr	r1, [pc, #128]	; (8000c30 <UnlinkTimer+0x100>)
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	4413      	add	r3, r2
 8000bb6:	00db      	lsls	r3, r3, #3
 8000bb8:	440b      	add	r3, r1
 8000bba:	3315      	adds	r3, #21
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000bc0:	7bbb      	ldrb	r3, [r7, #14]
 8000bc2:	2b06      	cmp	r3, #6
 8000bc4:	d013      	beq.n	8000bee <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000bc6:	79f9      	ldrb	r1, [r7, #7]
 8000bc8:	7bba      	ldrb	r2, [r7, #14]
 8000bca:	4819      	ldr	r0, [pc, #100]	; (8000c30 <UnlinkTimer+0x100>)
 8000bcc:	460b      	mov	r3, r1
 8000bce:	005b      	lsls	r3, r3, #1
 8000bd0:	440b      	add	r3, r1
 8000bd2:	00db      	lsls	r3, r3, #3
 8000bd4:	4403      	add	r3, r0
 8000bd6:	3314      	adds	r3, #20
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	b2d8      	uxtb	r0, r3
 8000bdc:	4914      	ldr	r1, [pc, #80]	; (8000c30 <UnlinkTimer+0x100>)
 8000bde:	4613      	mov	r3, r2
 8000be0:	005b      	lsls	r3, r3, #1
 8000be2:	4413      	add	r3, r2
 8000be4:	00db      	lsls	r3, r3, #3
 8000be6:	440b      	add	r3, r1
 8000be8:	3314      	adds	r3, #20
 8000bea:	4602      	mov	r2, r0
 8000bec:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000bee:	79fa      	ldrb	r2, [r7, #7]
 8000bf0:	490f      	ldr	r1, [pc, #60]	; (8000c30 <UnlinkTimer+0x100>)
 8000bf2:	4613      	mov	r3, r2
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	4413      	add	r3, r2
 8000bf8:	00db      	lsls	r3, r3, #3
 8000bfa:	440b      	add	r3, r1
 8000bfc:	330c      	adds	r3, #12
 8000bfe:	2201      	movs	r2, #1
 8000c00:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000c02:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <UnlinkTimer+0xf8>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	2b06      	cmp	r3, #6
 8000c0a:	d107      	bne.n	8000c1c <UnlinkTimer+0xec>
 8000c0c:	79bb      	ldrb	r3, [r7, #6]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d104      	bne.n	8000c1c <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000c12:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <UnlinkTimer+0x104>)
 8000c14:	f04f 32ff 	mov.w	r2, #4294967295
 8000c18:	601a      	str	r2, [r3, #0]
  }

  return;
 8000c1a:	bf00      	nop
 8000c1c:	bf00      	nop
}
 8000c1e:	3714      	adds	r7, #20
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	200009a4 	.word	0x200009a4
 8000c2c:	200009a5 	.word	0x200009a5
 8000c30:	20000914 	.word	0x20000914
 8000c34:	200009a8 	.word	0x200009a8

08000c38 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000c3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ca8 <ReturnTimeElapsed+0x70>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c46:	d026      	beq.n	8000c96 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000c48:	f7ff fe02 	bl	8000850 <ReadRtcSsrValue>
 8000c4c:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000c4e:	4b16      	ldr	r3, [pc, #88]	; (8000ca8 <ReturnTimeElapsed+0x70>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	687a      	ldr	r2, [r7, #4]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d805      	bhi.n	8000c64 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000c58:	4b13      	ldr	r3, [pc, #76]	; (8000ca8 <ReturnTimeElapsed+0x70>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	1ad3      	subs	r3, r2, r3
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	e00a      	b.n	8000c7a <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000c64:	4b11      	ldr	r3, [pc, #68]	; (8000cac <ReturnTimeElapsed+0x74>)
 8000c66:	881b      	ldrh	r3, [r3, #0]
 8000c68:	461a      	mov	r2, r3
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	1ad3      	subs	r3, r2, r3
 8000c6e:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000c70:	4b0d      	ldr	r3, [pc, #52]	; (8000ca8 <ReturnTimeElapsed+0x70>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	683a      	ldr	r2, [r7, #0]
 8000c76:	4413      	add	r3, r2
 8000c78:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000c7a:	4b0d      	ldr	r3, [pc, #52]	; (8000cb0 <ReturnTimeElapsed+0x78>)
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	461a      	mov	r2, r3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	fb02 f303 	mul.w	r3, r2, r3
 8000c86:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000c88:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <ReturnTimeElapsed+0x7c>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	40d3      	lsrs	r3, r2
 8000c92:	607b      	str	r3, [r7, #4]
 8000c94:	e001      	b.n	8000c9a <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	b29b      	uxth	r3, r3
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	200009a8 	.word	0x200009a8
 8000cac:	200009b0 	.word	0x200009b0
 8000cb0:	200009ae 	.word	0x200009ae
 8000cb4:	200009ad 	.word	0x200009ad

08000cb8 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8000cc2:	88fb      	ldrh	r3, [r7, #6]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d108      	bne.n	8000cda <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000cc8:	f7ff fdc2 	bl	8000850 <ReadRtcSsrValue>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	4a21      	ldr	r2, [pc, #132]	; (8000d54 <RestartWakeupCounter+0x9c>)
 8000cd0:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000cd2:	2003      	movs	r0, #3
 8000cd4:	f001 f89d 	bl	8001e12 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000cd8:	e039      	b.n	8000d4e <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000cda:	88fb      	ldrh	r3, [r7, #6]
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d803      	bhi.n	8000ce8 <RestartWakeupCounter+0x30>
 8000ce0:	4b1d      	ldr	r3, [pc, #116]	; (8000d58 <RestartWakeupCounter+0xa0>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d002      	beq.n	8000cee <RestartWakeupCounter+0x36>
      Value -= 1;
 8000ce8:	88fb      	ldrh	r3, [r7, #6]
 8000cea:	3b01      	subs	r3, #1
 8000cec:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8000cee:	bf00      	nop
 8000cf0:	4b1a      	ldr	r3, [pc, #104]	; (8000d5c <RestartWakeupCounter+0xa4>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	68db      	ldr	r3, [r3, #12]
 8000cf6:	f003 0304 	and.w	r3, r3, #4
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d0f8      	beq.n	8000cf0 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000cfe:	4b17      	ldr	r3, [pc, #92]	; (8000d5c <RestartWakeupCounter+0xa4>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	b2da      	uxtb	r2, r3
 8000d06:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <RestartWakeupCounter+0xa4>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000d0e:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000d10:	4b13      	ldr	r3, [pc, #76]	; (8000d60 <RestartWakeupCounter+0xa8>)
 8000d12:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000d16:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000d18:	2003      	movs	r0, #3
 8000d1a:	f001 f888 	bl	8001e2e <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000d1e:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <RestartWakeupCounter+0xac>)
 8000d20:	695b      	ldr	r3, [r3, #20]
 8000d22:	0c1b      	lsrs	r3, r3, #16
 8000d24:	041b      	lsls	r3, r3, #16
 8000d26:	88fa      	ldrh	r2, [r7, #6]
 8000d28:	490e      	ldr	r1, [pc, #56]	; (8000d64 <RestartWakeupCounter+0xac>)
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000d2e:	f7ff fd8f 	bl	8000850 <ReadRtcSsrValue>
 8000d32:	4603      	mov	r3, r0
 8000d34:	4a07      	ldr	r2, [pc, #28]	; (8000d54 <RestartWakeupCounter+0x9c>)
 8000d36:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8000d38:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <RestartWakeupCounter+0xa4>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	689a      	ldr	r2, [r3, #8]
 8000d3e:	4b07      	ldr	r3, [pc, #28]	; (8000d5c <RestartWakeupCounter+0xa4>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000d46:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000d48:	f3af 8000 	nop.w
  return ;
 8000d4c:	bf00      	nop
}
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	200009a8 	.word	0x200009a8
 8000d58:	200009ad 	.word	0x200009ad
 8000d5c:	200009f0 	.word	0x200009f0
 8000d60:	58000800 	.word	0x58000800
 8000d64:	40002800 	.word	0x40002800

08000d68 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000d6e:	4b45      	ldr	r3, [pc, #276]	; (8000e84 <RescheduleTimerList+0x11c>)
 8000d70:	689b      	ldr	r3, [r3, #8]
 8000d72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d7a:	d107      	bne.n	8000d8c <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8000d7c:	bf00      	nop
 8000d7e:	4b42      	ldr	r3, [pc, #264]	; (8000e88 <RescheduleTimerList+0x120>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	f003 0304 	and.w	r3, r3, #4
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d1f8      	bne.n	8000d7e <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8000d8c:	4b3e      	ldr	r3, [pc, #248]	; (8000e88 <RescheduleTimerList+0x120>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	689a      	ldr	r2, [r3, #8]
 8000d92:	4b3d      	ldr	r3, [pc, #244]	; (8000e88 <RescheduleTimerList+0x120>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d9a:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000d9c:	4b3b      	ldr	r3, [pc, #236]	; (8000e8c <RescheduleTimerList+0x124>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000da2:	7bfa      	ldrb	r2, [r7, #15]
 8000da4:	493a      	ldr	r1, [pc, #232]	; (8000e90 <RescheduleTimerList+0x128>)
 8000da6:	4613      	mov	r3, r2
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	4413      	add	r3, r2
 8000dac:	00db      	lsls	r3, r3, #3
 8000dae:	440b      	add	r3, r1
 8000db0:	3308      	adds	r3, #8
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000db6:	f7ff ff3f 	bl	8000c38 <ReturnTimeElapsed>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000dbe:	88fb      	ldrh	r3, [r7, #6]
 8000dc0:	68ba      	ldr	r2, [r7, #8]
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d205      	bcs.n	8000dd2 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000dca:	4b32      	ldr	r3, [pc, #200]	; (8000e94 <RescheduleTimerList+0x12c>)
 8000dcc:	2201      	movs	r2, #1
 8000dce:	701a      	strb	r2, [r3, #0]
 8000dd0:	e04d      	b.n	8000e6e <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000dd2:	88fb      	ldrh	r3, [r7, #6]
 8000dd4:	4a30      	ldr	r2, [pc, #192]	; (8000e98 <RescheduleTimerList+0x130>)
 8000dd6:	8812      	ldrh	r2, [r2, #0]
 8000dd8:	b292      	uxth	r2, r2
 8000dda:	4413      	add	r3, r2
 8000ddc:	461a      	mov	r2, r3
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d906      	bls.n	8000df2 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000de4:	4b2c      	ldr	r3, [pc, #176]	; (8000e98 <RescheduleTimerList+0x130>)
 8000de6:	881b      	ldrh	r3, [r3, #0]
 8000de8:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000dea:	4b2a      	ldr	r3, [pc, #168]	; (8000e94 <RescheduleTimerList+0x12c>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	701a      	strb	r2, [r3, #0]
 8000df0:	e03d      	b.n	8000e6e <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	b29a      	uxth	r2, r3
 8000df6:	88fb      	ldrh	r3, [r7, #6]
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000dfc:	4b25      	ldr	r3, [pc, #148]	; (8000e94 <RescheduleTimerList+0x12c>)
 8000dfe:	2201      	movs	r2, #1
 8000e00:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000e02:	e034      	b.n	8000e6e <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000e04:	7bfa      	ldrb	r2, [r7, #15]
 8000e06:	4922      	ldr	r1, [pc, #136]	; (8000e90 <RescheduleTimerList+0x128>)
 8000e08:	4613      	mov	r3, r2
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	4413      	add	r3, r2
 8000e0e:	00db      	lsls	r3, r3, #3
 8000e10:	440b      	add	r3, r1
 8000e12:	3308      	adds	r3, #8
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	88fb      	ldrh	r3, [r7, #6]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d20a      	bcs.n	8000e32 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000e1c:	7bfa      	ldrb	r2, [r7, #15]
 8000e1e:	491c      	ldr	r1, [pc, #112]	; (8000e90 <RescheduleTimerList+0x128>)
 8000e20:	4613      	mov	r3, r2
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	4413      	add	r3, r2
 8000e26:	00db      	lsls	r3, r3, #3
 8000e28:	440b      	add	r3, r1
 8000e2a:	3308      	adds	r3, #8
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	e013      	b.n	8000e5a <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000e32:	7bfa      	ldrb	r2, [r7, #15]
 8000e34:	4916      	ldr	r1, [pc, #88]	; (8000e90 <RescheduleTimerList+0x128>)
 8000e36:	4613      	mov	r3, r2
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	4413      	add	r3, r2
 8000e3c:	00db      	lsls	r3, r3, #3
 8000e3e:	440b      	add	r3, r1
 8000e40:	3308      	adds	r3, #8
 8000e42:	6819      	ldr	r1, [r3, #0]
 8000e44:	88fb      	ldrh	r3, [r7, #6]
 8000e46:	7bfa      	ldrb	r2, [r7, #15]
 8000e48:	1ac9      	subs	r1, r1, r3
 8000e4a:	4811      	ldr	r0, [pc, #68]	; (8000e90 <RescheduleTimerList+0x128>)
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	4413      	add	r3, r2
 8000e52:	00db      	lsls	r3, r3, #3
 8000e54:	4403      	add	r3, r0
 8000e56:	3308      	adds	r3, #8
 8000e58:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000e5a:	7bfa      	ldrb	r2, [r7, #15]
 8000e5c:	490c      	ldr	r1, [pc, #48]	; (8000e90 <RescheduleTimerList+0x128>)
 8000e5e:	4613      	mov	r3, r2
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	4413      	add	r3, r2
 8000e64:	00db      	lsls	r3, r3, #3
 8000e66:	440b      	add	r3, r1
 8000e68:	3315      	adds	r3, #21
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000e6e:	7bfb      	ldrb	r3, [r7, #15]
 8000e70:	2b06      	cmp	r3, #6
 8000e72:	d1c7      	bne.n	8000e04 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8000e74:	89bb      	ldrh	r3, [r7, #12]
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff ff1e 	bl	8000cb8 <RestartWakeupCounter>

  return ;
 8000e7c:	bf00      	nop
}
 8000e7e:	3710      	adds	r7, #16
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40002800 	.word	0x40002800
 8000e88:	200009f0 	.word	0x200009f0
 8000e8c:	200009a4 	.word	0x200009a4
 8000e90:	20000914 	.word	0x20000914
 8000e94:	200009ac 	.word	0x200009ac
 8000e98:	200009b2 	.word	0x200009b2

08000e9c <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b08a      	sub	sp, #40	; 0x28
 8000ea0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000ea2:	f3ef 8310 	mrs	r3, PRIMASK
 8000ea6:	617b      	str	r3, [r7, #20]
  return(result);
 8000ea8:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000eaa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8000eac:	b672      	cpsid	i
}
 8000eae:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8000eb0:	4b59      	ldr	r3, [pc, #356]	; (8001018 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	22ca      	movs	r2, #202	; 0xca
 8000eb6:	625a      	str	r2, [r3, #36]	; 0x24
 8000eb8:	4b57      	ldr	r3, [pc, #348]	; (8001018 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2253      	movs	r2, #83	; 0x53
 8000ebe:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8000ec0:	4b55      	ldr	r3, [pc, #340]	; (8001018 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	689a      	ldr	r2, [r3, #8]
 8000ec6:	4b54      	ldr	r3, [pc, #336]	; (8001018 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ece:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8000ed0:	4b52      	ldr	r3, [pc, #328]	; (800101c <HW_TS_RTC_Wakeup_Handler+0x180>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000ed8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000edc:	4950      	ldr	r1, [pc, #320]	; (8001020 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000ede:	4613      	mov	r3, r2
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	4413      	add	r3, r2
 8000ee4:	00db      	lsls	r3, r3, #3
 8000ee6:	440b      	add	r3, r1
 8000ee8:	330c      	adds	r3, #12
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	2b02      	cmp	r3, #2
 8000ef0:	d16e      	bne.n	8000fd0 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8000ef2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000ef6:	494a      	ldr	r1, [pc, #296]	; (8001020 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000ef8:	4613      	mov	r3, r2
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	4413      	add	r3, r2
 8000efe:	00db      	lsls	r3, r3, #3
 8000f00:	440b      	add	r3, r1
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8000f06:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000f0a:	4945      	ldr	r1, [pc, #276]	; (8001020 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	4413      	add	r3, r2
 8000f12:	00db      	lsls	r3, r3, #3
 8000f14:	440b      	add	r3, r1
 8000f16:	3310      	adds	r3, #16
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8000f1c:	4b41      	ldr	r3, [pc, #260]	; (8001024 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d04c      	beq.n	8000fc0 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8000f26:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000f2a:	493d      	ldr	r1, [pc, #244]	; (8001020 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000f2c:	4613      	mov	r3, r2
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	4413      	add	r3, r2
 8000f32:	00db      	lsls	r3, r3, #3
 8000f34:	440b      	add	r3, r1
 8000f36:	330d      	adds	r3, #13
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d124      	bne.n	8000f8a <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8000f40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000f44:	2101      	movs	r1, #1
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff fdf2 	bl	8000b30 <UnlinkTimer>
 8000f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f4e:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	f383 8810 	msr	PRIMASK, r3
}
 8000f56:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8000f58:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000f5c:	4930      	ldr	r1, [pc, #192]	; (8001020 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000f5e:	4613      	mov	r3, r2
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	4413      	add	r3, r2
 8000f64:	00db      	lsls	r3, r3, #3
 8000f66:	440b      	add	r3, r1
 8000f68:	3304      	adds	r3, #4
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000f70:	4611      	mov	r1, r2
 8000f72:	4618      	mov	r0, r3
 8000f74:	f000 f9b8 	bl	80012e8 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8000f78:	4b27      	ldr	r3, [pc, #156]	; (8001018 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	22ca      	movs	r2, #202	; 0xca
 8000f7e:	625a      	str	r2, [r3, #36]	; 0x24
 8000f80:	4b25      	ldr	r3, [pc, #148]	; (8001018 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2253      	movs	r2, #83	; 0x53
 8000f86:	625a      	str	r2, [r3, #36]	; 0x24
 8000f88:	e012      	b.n	8000fb0 <HW_TS_RTC_Wakeup_Handler+0x114>
 8000f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	f383 8810 	msr	PRIMASK, r3
}
 8000f94:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8000f96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 f920 	bl	80011e0 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8000fa0:	4b1d      	ldr	r3, [pc, #116]	; (8001018 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	22ca      	movs	r2, #202	; 0xca
 8000fa6:	625a      	str	r2, [r3, #36]	; 0x24
 8000fa8:	4b1b      	ldr	r3, [pc, #108]	; (8001018 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2253      	movs	r2, #83	; 0x53
 8000fae:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8000fb0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000fb4:	69fa      	ldr	r2, [r7, #28]
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	69b8      	ldr	r0, [r7, #24]
 8000fba:	f000 fa1b 	bl	80013f4 <HW_TS_RTC_Int_AppNot>
 8000fbe:	e022      	b.n	8001006 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8000fc0:	f7ff fed2 	bl	8000d68 <RescheduleTimerList>
 8000fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	f383 8810 	msr	PRIMASK, r3
}
 8000fce:	e01a      	b.n	8001006 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8000fd0:	bf00      	nop
 8000fd2:	4b11      	ldr	r3, [pc, #68]	; (8001018 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	f003 0304 	and.w	r3, r3, #4
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d0f8      	beq.n	8000fd2 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000fe0:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	68db      	ldr	r3, [r3, #12]
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000ff0:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000ff2:	4b0d      	ldr	r3, [pc, #52]	; (8001028 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000ff4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffc:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	f383 8810 	msr	PRIMASK, r3
}
 8001004:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001006:	4b04      	ldr	r3, [pc, #16]	; (8001018 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	22ff      	movs	r2, #255	; 0xff
 800100c:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 800100e:	bf00      	nop
}
 8001010:	3728      	adds	r7, #40	; 0x28
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	200009f0 	.word	0x200009f0
 800101c:	200009a4 	.word	0x200009a4
 8001020:	20000914 	.word	0x20000914
 8001024:	200009ac 	.word	0x200009ac
 8001028:	58000800 	.word	0x58000800

0800102c <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b088      	sub	sp, #32
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	6039      	str	r1, [r7, #0]
 8001036:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001038:	4b5e      	ldr	r3, [pc, #376]	; (80011b4 <HW_TS_Init+0x188>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	22ca      	movs	r2, #202	; 0xca
 800103e:	625a      	str	r2, [r3, #36]	; 0x24
 8001040:	4b5c      	ldr	r3, [pc, #368]	; (80011b4 <HW_TS_Init+0x188>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2253      	movs	r2, #83	; 0x53
 8001046:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001048:	4b5b      	ldr	r3, [pc, #364]	; (80011b8 <HW_TS_Init+0x18c>)
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	4a5a      	ldr	r2, [pc, #360]	; (80011b8 <HW_TS_Init+0x18c>)
 800104e:	f043 0320 	orr.w	r3, r3, #32
 8001052:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001054:	4b58      	ldr	r3, [pc, #352]	; (80011b8 <HW_TS_Init+0x18c>)
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	b2db      	uxtb	r3, r3
 800105a:	f003 0307 	and.w	r3, r3, #7
 800105e:	b2db      	uxtb	r3, r3
 8001060:	f1c3 0304 	rsb	r3, r3, #4
 8001064:	b2da      	uxtb	r2, r3
 8001066:	4b55      	ldr	r3, [pc, #340]	; (80011bc <HW_TS_Init+0x190>)
 8001068:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800106a:	4b53      	ldr	r3, [pc, #332]	; (80011b8 <HW_TS_Init+0x18c>)
 800106c:	691b      	ldr	r3, [r3, #16]
 800106e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001072:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001076:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	fa92 f2a2 	rbit	r2, r2
 800107e:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001080:	68fa      	ldr	r2, [r7, #12]
 8001082:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001084:	697a      	ldr	r2, [r7, #20]
 8001086:	2a00      	cmp	r2, #0
 8001088:	d101      	bne.n	800108e <HW_TS_Init+0x62>
  {
    return 32U;
 800108a:	2220      	movs	r2, #32
 800108c:	e003      	b.n	8001096 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 800108e:	697a      	ldr	r2, [r7, #20]
 8001090:	fab2 f282 	clz	r2, r2
 8001094:	b2d2      	uxtb	r2, r2
 8001096:	40d3      	lsrs	r3, r2
 8001098:	b2db      	uxtb	r3, r3
 800109a:	3301      	adds	r3, #1
 800109c:	b2da      	uxtb	r2, r3
 800109e:	4b48      	ldr	r3, [pc, #288]	; (80011c0 <HW_TS_Init+0x194>)
 80010a0:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80010a2:	4b45      	ldr	r3, [pc, #276]	; (80011b8 <HW_TS_Init+0x18c>)
 80010a4:	691b      	ldr	r3, [r3, #16]
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	3301      	adds	r3, #1
 80010b0:	b29a      	uxth	r2, r3
 80010b2:	4b44      	ldr	r3, [pc, #272]	; (80011c4 <HW_TS_Init+0x198>)
 80010b4:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80010b6:	4b43      	ldr	r3, [pc, #268]	; (80011c4 <HW_TS_Init+0x198>)
 80010b8:	881b      	ldrh	r3, [r3, #0]
 80010ba:	3b01      	subs	r3, #1
 80010bc:	4a40      	ldr	r2, [pc, #256]	; (80011c0 <HW_TS_Init+0x194>)
 80010be:	7812      	ldrb	r2, [r2, #0]
 80010c0:	fb02 f303 	mul.w	r3, r2, r3
 80010c4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80010c8:	4a3c      	ldr	r2, [pc, #240]	; (80011bc <HW_TS_Init+0x190>)
 80010ca:	7812      	ldrb	r2, [r2, #0]
 80010cc:	40d3      	lsrs	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d904      	bls.n	80010e4 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80010da:	4b3b      	ldr	r3, [pc, #236]	; (80011c8 <HW_TS_Init+0x19c>)
 80010dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010e0:	801a      	strh	r2, [r3, #0]
 80010e2:	e003      	b.n	80010ec <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	b29a      	uxth	r2, r3
 80010e8:	4b37      	ldr	r3, [pc, #220]	; (80011c8 <HW_TS_Init+0x19c>)
 80010ea:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80010ec:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80010f0:	f7ff fb9c 	bl	800082c <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80010f4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80010f8:	f7ff fb84 	bl	8000804 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d13d      	bne.n	800117e <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001102:	4b32      	ldr	r3, [pc, #200]	; (80011cc <HW_TS_Init+0x1a0>)
 8001104:	2201      	movs	r2, #1
 8001106:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001108:	4b31      	ldr	r3, [pc, #196]	; (80011d0 <HW_TS_Init+0x1a4>)
 800110a:	f04f 32ff 	mov.w	r2, #4294967295
 800110e:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001110:	2300      	movs	r3, #0
 8001112:	77fb      	strb	r3, [r7, #31]
 8001114:	e00c      	b.n	8001130 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001116:	7ffa      	ldrb	r2, [r7, #31]
 8001118:	492e      	ldr	r1, [pc, #184]	; (80011d4 <HW_TS_Init+0x1a8>)
 800111a:	4613      	mov	r3, r2
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	4413      	add	r3, r2
 8001120:	00db      	lsls	r3, r3, #3
 8001122:	440b      	add	r3, r1
 8001124:	330c      	adds	r3, #12
 8001126:	2200      	movs	r2, #0
 8001128:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800112a:	7ffb      	ldrb	r3, [r7, #31]
 800112c:	3301      	adds	r3, #1
 800112e:	77fb      	strb	r3, [r7, #31]
 8001130:	7ffb      	ldrb	r3, [r7, #31]
 8001132:	2b05      	cmp	r3, #5
 8001134:	d9ef      	bls.n	8001116 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001136:	4b28      	ldr	r3, [pc, #160]	; (80011d8 <HW_TS_Init+0x1ac>)
 8001138:	2206      	movs	r2, #6
 800113a:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 800113c:	4b1d      	ldr	r3, [pc, #116]	; (80011b4 <HW_TS_Init+0x188>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	689a      	ldr	r2, [r3, #8]
 8001142:	4b1c      	ldr	r3, [pc, #112]	; (80011b4 <HW_TS_Init+0x188>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800114a:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 800114c:	4b19      	ldr	r3, [pc, #100]	; (80011b4 <HW_TS_Init+0x188>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	68db      	ldr	r3, [r3, #12]
 8001152:	b2da      	uxtb	r2, r3
 8001154:	4b17      	ldr	r3, [pc, #92]	; (80011b4 <HW_TS_Init+0x188>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800115c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 800115e:	4b1f      	ldr	r3, [pc, #124]	; (80011dc <HW_TS_Init+0x1b0>)
 8001160:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001164:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001166:	2003      	movs	r0, #3
 8001168:	f000 fe61 	bl	8001e2e <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 800116c:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <HW_TS_Init+0x188>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	689a      	ldr	r2, [r3, #8]
 8001172:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <HW_TS_Init+0x188>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	e009      	b.n	8001192 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 800117e:	4b0d      	ldr	r3, [pc, #52]	; (80011b4 <HW_TS_Init+0x188>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001188:	2b00      	cmp	r3, #0
 800118a:	d002      	beq.n	8001192 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800118c:	2003      	movs	r0, #3
 800118e:	f000 fe40 	bl	8001e12 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001192:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <HW_TS_Init+0x188>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	22ff      	movs	r2, #255	; 0xff
 8001198:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800119a:	2200      	movs	r2, #0
 800119c:	2103      	movs	r1, #3
 800119e:	2003      	movs	r0, #3
 80011a0:	f000 fdf5 	bl	8001d8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80011a4:	2003      	movs	r0, #3
 80011a6:	f000 fe0c 	bl	8001dc2 <HAL_NVIC_EnableIRQ>

  return;
 80011aa:	bf00      	nop
}
 80011ac:	3720      	adds	r7, #32
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	200009f0 	.word	0x200009f0
 80011b8:	40002800 	.word	0x40002800
 80011bc:	200009ad 	.word	0x200009ad
 80011c0:	200009ae 	.word	0x200009ae
 80011c4:	200009b0 	.word	0x200009b0
 80011c8:	200009b2 	.word	0x200009b2
 80011cc:	200009ac 	.word	0x200009ac
 80011d0:	200009a8 	.word	0x200009a8
 80011d4:	20000914 	.word	0x20000914
 80011d8:	200009a4 	.word	0x200009a4
 80011dc:	58000800 	.word	0x58000800

080011e0 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80011ea:	f3ef 8310 	mrs	r3, PRIMASK
 80011ee:	60fb      	str	r3, [r7, #12]
  return(result);
 80011f0:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80011f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80011f4:	b672      	cpsid	i
}
 80011f6:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80011f8:	2003      	movs	r0, #3
 80011fa:	f000 fdf0 	bl	8001dde <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80011fe:	4b34      	ldr	r3, [pc, #208]	; (80012d0 <HW_TS_Stop+0xf0>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	22ca      	movs	r2, #202	; 0xca
 8001204:	625a      	str	r2, [r3, #36]	; 0x24
 8001206:	4b32      	ldr	r3, [pc, #200]	; (80012d0 <HW_TS_Stop+0xf0>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2253      	movs	r2, #83	; 0x53
 800120c:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800120e:	79fa      	ldrb	r2, [r7, #7]
 8001210:	4930      	ldr	r1, [pc, #192]	; (80012d4 <HW_TS_Stop+0xf4>)
 8001212:	4613      	mov	r3, r2
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	4413      	add	r3, r2
 8001218:	00db      	lsls	r3, r3, #3
 800121a:	440b      	add	r3, r1
 800121c:	330c      	adds	r3, #12
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	b2db      	uxtb	r3, r3
 8001222:	2b02      	cmp	r3, #2
 8001224:	d142      	bne.n	80012ac <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	2100      	movs	r1, #0
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff fc80 	bl	8000b30 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001230:	4b29      	ldr	r3, [pc, #164]	; (80012d8 <HW_TS_Stop+0xf8>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001236:	7cfb      	ldrb	r3, [r7, #19]
 8001238:	2b06      	cmp	r3, #6
 800123a:	d12f      	bne.n	800129c <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800123c:	4b27      	ldr	r3, [pc, #156]	; (80012dc <HW_TS_Stop+0xfc>)
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001244:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001248:	d107      	bne.n	800125a <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800124a:	bf00      	nop
 800124c:	4b20      	ldr	r3, [pc, #128]	; (80012d0 <HW_TS_Stop+0xf0>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	68db      	ldr	r3, [r3, #12]
 8001252:	f003 0304 	and.w	r3, r3, #4
 8001256:	2b00      	cmp	r3, #0
 8001258:	d1f8      	bne.n	800124c <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800125a:	4b1d      	ldr	r3, [pc, #116]	; (80012d0 <HW_TS_Stop+0xf0>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	689a      	ldr	r2, [r3, #8]
 8001260:	4b1b      	ldr	r3, [pc, #108]	; (80012d0 <HW_TS_Stop+0xf0>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001268:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800126a:	bf00      	nop
 800126c:	4b18      	ldr	r3, [pc, #96]	; (80012d0 <HW_TS_Stop+0xf0>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	68db      	ldr	r3, [r3, #12]
 8001272:	f003 0304 	and.w	r3, r3, #4
 8001276:	2b00      	cmp	r3, #0
 8001278:	d0f8      	beq.n	800126c <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800127a:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <HW_TS_Stop+0xf0>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	b2da      	uxtb	r2, r3
 8001282:	4b13      	ldr	r3, [pc, #76]	; (80012d0 <HW_TS_Stop+0xf0>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800128a:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800128c:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <HW_TS_Stop+0x100>)
 800128e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001292:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001294:	2003      	movs	r0, #3
 8001296:	f000 fdca 	bl	8001e2e <HAL_NVIC_ClearPendingIRQ>
 800129a:	e007      	b.n	80012ac <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800129c:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <HW_TS_Stop+0x104>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	7cfa      	ldrb	r2, [r7, #19]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d001      	beq.n	80012ac <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 80012a8:	f7ff fd5e 	bl	8000d68 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80012ac:	4b08      	ldr	r3, [pc, #32]	; (80012d0 <HW_TS_Stop+0xf0>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	22ff      	movs	r2, #255	; 0xff
 80012b2:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80012b4:	2003      	movs	r0, #3
 80012b6:	f000 fd84 	bl	8001dc2 <HAL_NVIC_EnableIRQ>
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	f383 8810 	msr	PRIMASK, r3
}
 80012c4:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80012c6:	bf00      	nop
}
 80012c8:	3718      	adds	r7, #24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	200009f0 	.word	0x200009f0
 80012d4:	20000914 	.word	0x20000914
 80012d8:	200009a4 	.word	0x200009a4
 80012dc:	40002800 	.word	0x40002800
 80012e0:	58000800 	.word	0x58000800
 80012e4:	200009a5 	.word	0x200009a5

080012e8 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	6039      	str	r1, [r7, #0]
 80012f2:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80012f4:	79fa      	ldrb	r2, [r7, #7]
 80012f6:	493b      	ldr	r1, [pc, #236]	; (80013e4 <HW_TS_Start+0xfc>)
 80012f8:	4613      	mov	r3, r2
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	4413      	add	r3, r2
 80012fe:	00db      	lsls	r3, r3, #3
 8001300:	440b      	add	r3, r1
 8001302:	330c      	adds	r3, #12
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	b2db      	uxtb	r3, r3
 8001308:	2b02      	cmp	r3, #2
 800130a:	d103      	bne.n	8001314 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff ff66 	bl	80011e0 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001314:	f3ef 8310 	mrs	r3, PRIMASK
 8001318:	60fb      	str	r3, [r7, #12]
  return(result);
 800131a:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800131c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800131e:	b672      	cpsid	i
}
 8001320:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001322:	2003      	movs	r0, #3
 8001324:	f000 fd5b 	bl	8001dde <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001328:	4b2f      	ldr	r3, [pc, #188]	; (80013e8 <HW_TS_Start+0x100>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	22ca      	movs	r2, #202	; 0xca
 800132e:	625a      	str	r2, [r3, #36]	; 0x24
 8001330:	4b2d      	ldr	r3, [pc, #180]	; (80013e8 <HW_TS_Start+0x100>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2253      	movs	r2, #83	; 0x53
 8001336:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001338:	79fa      	ldrb	r2, [r7, #7]
 800133a:	492a      	ldr	r1, [pc, #168]	; (80013e4 <HW_TS_Start+0xfc>)
 800133c:	4613      	mov	r3, r2
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	4413      	add	r3, r2
 8001342:	00db      	lsls	r3, r3, #3
 8001344:	440b      	add	r3, r1
 8001346:	330c      	adds	r3, #12
 8001348:	2202      	movs	r2, #2
 800134a:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 800134c:	79fa      	ldrb	r2, [r7, #7]
 800134e:	4925      	ldr	r1, [pc, #148]	; (80013e4 <HW_TS_Start+0xfc>)
 8001350:	4613      	mov	r3, r2
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	4413      	add	r3, r2
 8001356:	00db      	lsls	r3, r3, #3
 8001358:	440b      	add	r3, r1
 800135a:	3308      	adds	r3, #8
 800135c:	683a      	ldr	r2, [r7, #0]
 800135e:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001360:	79fa      	ldrb	r2, [r7, #7]
 8001362:	4920      	ldr	r1, [pc, #128]	; (80013e4 <HW_TS_Start+0xfc>)
 8001364:	4613      	mov	r3, r2
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	4413      	add	r3, r2
 800136a:	00db      	lsls	r3, r3, #3
 800136c:	440b      	add	r3, r1
 800136e:	3304      	adds	r3, #4
 8001370:	683a      	ldr	r2, [r7, #0]
 8001372:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff fb30 	bl	80009dc <linkTimer>
 800137c:	4603      	mov	r3, r0
 800137e:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001380:	4b1a      	ldr	r3, [pc, #104]	; (80013ec <HW_TS_Start+0x104>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001386:	4b1a      	ldr	r3, [pc, #104]	; (80013f0 <HW_TS_Start+0x108>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	b2db      	uxtb	r3, r3
 800138c:	7c7a      	ldrb	r2, [r7, #17]
 800138e:	429a      	cmp	r2, r3
 8001390:	d002      	beq.n	8001398 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8001392:	f7ff fce9 	bl	8000d68 <RescheduleTimerList>
 8001396:	e013      	b.n	80013c0 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001398:	79fa      	ldrb	r2, [r7, #7]
 800139a:	4912      	ldr	r1, [pc, #72]	; (80013e4 <HW_TS_Start+0xfc>)
 800139c:	4613      	mov	r3, r2
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	4413      	add	r3, r2
 80013a2:	00db      	lsls	r3, r3, #3
 80013a4:	440b      	add	r3, r1
 80013a6:	3308      	adds	r3, #8
 80013a8:	6819      	ldr	r1, [r3, #0]
 80013aa:	8a7b      	ldrh	r3, [r7, #18]
 80013ac:	79fa      	ldrb	r2, [r7, #7]
 80013ae:	1ac9      	subs	r1, r1, r3
 80013b0:	480c      	ldr	r0, [pc, #48]	; (80013e4 <HW_TS_Start+0xfc>)
 80013b2:	4613      	mov	r3, r2
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	4413      	add	r3, r2
 80013b8:	00db      	lsls	r3, r3, #3
 80013ba:	4403      	add	r3, r0
 80013bc:	3308      	adds	r3, #8
 80013be:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80013c0:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <HW_TS_Start+0x100>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	22ff      	movs	r2, #255	; 0xff
 80013c6:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80013c8:	2003      	movs	r0, #3
 80013ca:	f000 fcfa 	bl	8001dc2 <HAL_NVIC_EnableIRQ>
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	f383 8810 	msr	PRIMASK, r3
}
 80013d8:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80013da:	bf00      	nop
}
 80013dc:	3718      	adds	r7, #24
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000914 	.word	0x20000914
 80013e8:	200009f0 	.word	0x200009f0
 80013ec:	200009a4 	.word	0x200009a4
 80013f0:	200009a5 	.word	0x200009a5

080013f4 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	460b      	mov	r3, r1
 80013fe:	607a      	str	r2, [r7, #4]
 8001400:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4798      	blx	r3

  return;
 8001406:	bf00      	nop
}
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <LL_RCC_LSE_SetDriveCapability>:
{
 800140e:	b480      	push	{r7}
 8001410:	b083      	sub	sp, #12
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001416:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800141a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800141e:	f023 0218 	bic.w	r2, r3, #24
 8001422:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4313      	orrs	r3, r2
 800142a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800142e:	bf00      	nop
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr

0800143a <LL_AHB2_GRP1_EnableClock>:
{
 800143a:	b480      	push	{r7}
 800143c:	b085      	sub	sp, #20
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001442:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001446:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001448:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4313      	orrs	r3, r2
 8001450:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001456:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4013      	ands	r3, r2
 800145c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800145e:	68fb      	ldr	r3, [r7, #12]
}
 8001460:	bf00      	nop
 8001462:	3714      	adds	r7, #20
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001470:	f000 facc 	bl	8001a0c <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8001474:	f7ff f812 	bl	800049c <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001478:	f000 f810 	bl	800149c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800147c:	f000 f870 	bl	8001560 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8001480:	f000 f88e 	bl	80015a0 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001484:	f000 f8dc 	bl	8001640 <MX_GPIO_Init>
  MX_RF_Init();
 8001488:	f000 f89e 	bl	80015c8 <MX_RF_Init>
  MX_RTC_Init();
 800148c:	f000 f8a4 	bl	80015d8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8001490:	f7ff f812 	bl	80004b8 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8001494:	f7ff f977 	bl	8000786 <MX_APPE_Process>
 8001498:	e7fc      	b.n	8001494 <main+0x28>
	...

0800149c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b09a      	sub	sp, #104	; 0x68
 80014a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014a2:	f107 0320 	add.w	r3, r7, #32
 80014a6:	2248      	movs	r2, #72	; 0x48
 80014a8:	2100      	movs	r1, #0
 80014aa:	4618      	mov	r0, r3
 80014ac:	f006 f824 	bl	80074f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014b0:	1d3b      	adds	r3, r7, #4
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	609a      	str	r2, [r3, #8]
 80014ba:	60da      	str	r2, [r3, #12]
 80014bc:	611a      	str	r2, [r3, #16]
 80014be:	615a      	str	r2, [r3, #20]
 80014c0:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80014c2:	f000 ff0f 	bl	80022e4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 80014c6:	2010      	movs	r0, #16
 80014c8:	f7ff ffa1 	bl	800140e <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014cc:	4b23      	ldr	r3, [pc, #140]	; (800155c <SystemClock_Config+0xc0>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014d4:	4a21      	ldr	r2, [pc, #132]	; (800155c <SystemClock_Config+0xc0>)
 80014d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014da:	6013      	str	r3, [r2, #0]
 80014dc:	4b1f      	ldr	r3, [pc, #124]	; (800155c <SystemClock_Config+0xc0>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014e4:	603b      	str	r3, [r7, #0]
 80014e6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80014e8:	2327      	movs	r3, #39	; 0x27
 80014ea:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80014f2:	2301      	movs	r3, #1
 80014f4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80014fc:	2301      	movs	r3, #1
 80014fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001500:	2340      	movs	r3, #64	; 0x40
 8001502:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001504:	2300      	movs	r3, #0
 8001506:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8001508:	23a0      	movs	r3, #160	; 0xa0
 800150a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800150c:	2300      	movs	r3, #0
 800150e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001510:	f107 0320 	add.w	r3, r7, #32
 8001514:	4618      	mov	r0, r3
 8001516:	f001 fa61 	bl	80029dc <HAL_RCC_OscConfig>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001520:	f000 f8f6 	bl	8001710 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001524:	236f      	movs	r3, #111	; 0x6f
 8001526:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001528:	2300      	movs	r3, #0
 800152a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800152c:	2300      	movs	r3, #0
 800152e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001530:	2300      	movs	r3, #0
 8001532:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001538:	2300      	movs	r3, #0
 800153a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800153c:	2300      	movs	r3, #0
 800153e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001540:	1d3b      	adds	r3, r7, #4
 8001542:	2101      	movs	r1, #1
 8001544:	4618      	mov	r0, r3
 8001546:	f001 fdbd 	bl	80030c4 <HAL_RCC_ClockConfig>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001550:	f000 f8de 	bl	8001710 <Error_Handler>
  }
}
 8001554:	bf00      	nop
 8001556:	3768      	adds	r7, #104	; 0x68
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	58000400 	.word	0x58000400

08001560 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b094      	sub	sp, #80	; 0x50
 8001564:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001566:	463b      	mov	r3, r7
 8001568:	2250      	movs	r2, #80	; 0x50
 800156a:	2100      	movs	r1, #0
 800156c:	4618      	mov	r0, r3
 800156e:	f005 ffc3 	bl	80074f8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8001572:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001576:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001578:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800157c:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800157e:	2300      	movs	r3, #0
 8001580:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8001582:	2300      	movs	r3, #0
 8001584:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001586:	463b      	mov	r3, r7
 8001588:	4618      	mov	r0, r3
 800158a:	f002 f9ac 	bl	80038e6 <HAL_RCCEx_PeriphCLKConfig>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8001594:	f000 f8bc 	bl	8001710 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001598:	bf00      	nop
 800159a:	3750      	adds	r7, #80	; 0x50
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80015a4:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <MX_IPCC_Init+0x20>)
 80015a6:	4a07      	ldr	r2, [pc, #28]	; (80015c4 <MX_IPCC_Init+0x24>)
 80015a8:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80015aa:	4805      	ldr	r0, [pc, #20]	; (80015c0 <MX_IPCC_Init+0x20>)
 80015ac:	f000 fe14 	bl	80021d8 <HAL_IPCC_Init>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80015b6:	f000 f8ab 	bl	8001710 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	200009b4 	.word	0x200009b4
 80015c4:	58000c00 	.word	0x58000c00

080015c8 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 80015cc:	bf00      	nop
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
	...

080015d8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80015dc:	4b16      	ldr	r3, [pc, #88]	; (8001638 <MX_RTC_Init+0x60>)
 80015de:	4a17      	ldr	r2, [pc, #92]	; (800163c <MX_RTC_Init+0x64>)
 80015e0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80015e2:	4b15      	ldr	r3, [pc, #84]	; (8001638 <MX_RTC_Init+0x60>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80015e8:	4b13      	ldr	r3, [pc, #76]	; (8001638 <MX_RTC_Init+0x60>)
 80015ea:	220f      	movs	r2, #15
 80015ec:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80015ee:	4b12      	ldr	r3, [pc, #72]	; (8001638 <MX_RTC_Init+0x60>)
 80015f0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80015f4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80015f6:	4b10      	ldr	r3, [pc, #64]	; (8001638 <MX_RTC_Init+0x60>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80015fc:	4b0e      	ldr	r3, [pc, #56]	; (8001638 <MX_RTC_Init+0x60>)
 80015fe:	2200      	movs	r2, #0
 8001600:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001602:	4b0d      	ldr	r3, [pc, #52]	; (8001638 <MX_RTC_Init+0x60>)
 8001604:	2200      	movs	r2, #0
 8001606:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001608:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <MX_RTC_Init+0x60>)
 800160a:	2200      	movs	r2, #0
 800160c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800160e:	480a      	ldr	r0, [pc, #40]	; (8001638 <MX_RTC_Init+0x60>)
 8001610:	f002 fbf0 	bl	8003df4 <HAL_RTC_Init>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_RTC_Init+0x46>
  {
    Error_Handler();
 800161a:	f000 f879 	bl	8001710 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800161e:	2200      	movs	r2, #0
 8001620:	2100      	movs	r1, #0
 8001622:	4805      	ldr	r0, [pc, #20]	; (8001638 <MX_RTC_Init+0x60>)
 8001624:	f002 fce6 	bl	8003ff4 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800162e:	f000 f86f 	bl	8001710 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	200009f0 	.word	0x200009f0
 800163c:	40002800 	.word	0x40002800

08001640 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001646:	1d3b      	adds	r3, r7, #4
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001654:	2004      	movs	r0, #4
 8001656:	f7ff fef0 	bl	800143a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800165a:	2002      	movs	r0, #2
 800165c:	f7ff feed 	bl	800143a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001660:	2001      	movs	r0, #1
 8001662:	f7ff feea 	bl	800143a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001666:	2008      	movs	r0, #8
 8001668:	f7ff fee7 	bl	800143a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 800166c:	2200      	movs	r2, #0
 800166e:	2123      	movs	r1, #35	; 0x23
 8001670:	4824      	ldr	r0, [pc, #144]	; (8001704 <MX_GPIO_Init+0xc4>)
 8001672:	f000 fd5b 	bl	800212c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001676:	2310      	movs	r3, #16
 8001678:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800167a:	2300      	movs	r3, #0
 800167c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800167e:	2301      	movs	r3, #1
 8001680:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001682:	1d3b      	adds	r3, r7, #4
 8001684:	4619      	mov	r1, r3
 8001686:	4820      	ldr	r0, [pc, #128]	; (8001708 <MX_GPIO_Init+0xc8>)
 8001688:	f000 fbe0 	bl	8001e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 800168c:	2323      	movs	r3, #35	; 0x23
 800168e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001690:	2301      	movs	r3, #1
 8001692:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001698:	2300      	movs	r3, #0
 800169a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800169c:	1d3b      	adds	r3, r7, #4
 800169e:	4619      	mov	r1, r3
 80016a0:	4818      	ldr	r0, [pc, #96]	; (8001704 <MX_GPIO_Init+0xc4>)
 80016a2:	f000 fbd3 	bl	8001e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80016a6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80016aa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ac:	2302      	movs	r3, #2
 80016ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b4:	2300      	movs	r3, #0
 80016b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80016b8:	230a      	movs	r3, #10
 80016ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016bc:	1d3b      	adds	r3, r7, #4
 80016be:	4619      	mov	r1, r3
 80016c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016c4:	f000 fbc2 	bl	8001e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 80016c8:	2303      	movs	r3, #3
 80016ca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016cc:	2300      	movs	r3, #0
 80016ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016d4:	1d3b      	adds	r3, r7, #4
 80016d6:	4619      	mov	r1, r3
 80016d8:	480c      	ldr	r0, [pc, #48]	; (800170c <MX_GPIO_Init+0xcc>)
 80016da:	f000 fbb7 	bl	8001e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80016de:	23c0      	movs	r3, #192	; 0xc0
 80016e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e2:	2302      	movs	r3, #2
 80016e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ea:	2300      	movs	r3, #0
 80016ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016ee:	2307      	movs	r3, #7
 80016f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f2:	1d3b      	adds	r3, r7, #4
 80016f4:	4619      	mov	r1, r3
 80016f6:	4803      	ldr	r0, [pc, #12]	; (8001704 <MX_GPIO_Init+0xc4>)
 80016f8:	f000 fba8 	bl	8001e4c <HAL_GPIO_Init>

}
 80016fc:	bf00      	nop
 80016fe:	3718      	adds	r7, #24
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	48000400 	.word	0x48000400
 8001708:	48000800 	.word	0x48000800
 800170c:	48000c00 	.word	0x48000c00

08001710 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001714:	b672      	cpsid	i
}
 8001716:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001718:	e7fe      	b.n	8001718 <Error_Handler+0x8>

0800171a <LL_RCC_EnableRTC>:
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800171e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001726:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800172a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800172e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001732:	bf00      	nop
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <LL_AHB3_GRP1_EnableClock>:
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001744:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001748:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800174a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4313      	orrs	r3, r2
 8001752:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001754:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001758:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4013      	ands	r3, r2
 800175e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001760:	68fb      	ldr	r3, [r7, #12]
}
 8001762:	bf00      	nop
 8001764:	3714      	adds	r7, #20
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr

0800176e <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800176e:	b480      	push	{r7}
 8001770:	b085      	sub	sp, #20
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001776:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800177a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800177c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	4313      	orrs	r3, r2
 8001784:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001786:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800178a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4013      	ands	r3, r2
 8001790:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001792:	68fb      	ldr	r3, [r7, #12]
}
 8001794:	bf00      	nop
 8001796:	3714      	adds	r7, #20
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80017a4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80017a8:	f7ff ffc8 	bl	800173c <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 80017ac:	2200      	movs	r2, #0
 80017ae:	2100      	movs	r1, #0
 80017b0:	202e      	movs	r0, #46	; 0x2e
 80017b2:	f000 faec 	bl	8001d8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80017b6:	202e      	movs	r0, #46	; 0x2e
 80017b8:	f000 fb03 	bl	8001dc2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017bc:	bf00      	nop
 80017be:	bd80      	pop	{r7, pc}

080017c0 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a0d      	ldr	r2, [pc, #52]	; (8001804 <HAL_IPCC_MspInit+0x44>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d113      	bne.n	80017fa <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 80017d2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80017d6:	f7ff ffb1 	bl	800173c <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 80017da:	2200      	movs	r2, #0
 80017dc:	2100      	movs	r1, #0
 80017de:	202c      	movs	r0, #44	; 0x2c
 80017e0:	f000 fad5 	bl	8001d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80017e4:	202c      	movs	r0, #44	; 0x2c
 80017e6:	f000 faec 	bl	8001dc2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 80017ea:	2200      	movs	r2, #0
 80017ec:	2100      	movs	r1, #0
 80017ee:	202d      	movs	r0, #45	; 0x2d
 80017f0:	f000 facd 	bl	8001d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80017f4:	202d      	movs	r0, #45	; 0x2d
 80017f6:	f000 fae4 	bl	8001dc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 80017fa:	bf00      	nop
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	58000c00 	.word	0x58000c00

08001808 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b096      	sub	sp, #88	; 0x58
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001810:	f107 0308 	add.w	r3, r7, #8
 8001814:	2250      	movs	r2, #80	; 0x50
 8001816:	2100      	movs	r1, #0
 8001818:	4618      	mov	r0, r3
 800181a:	f005 fe6d 	bl	80074f8 <memset>
  if(hrtc->Instance==RTC)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a12      	ldr	r2, [pc, #72]	; (800186c <HAL_RTC_MspInit+0x64>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d11d      	bne.n	8001864 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001828:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800182c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800182e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001832:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001834:	f107 0308 	add.w	r3, r7, #8
 8001838:	4618      	mov	r0, r3
 800183a:	f002 f854 	bl	80038e6 <HAL_RCCEx_PeriphCLKConfig>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001844:	f7ff ff64 	bl	8001710 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001848:	f7ff ff67 	bl	800171a <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800184c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001850:	f7ff ff8d 	bl	800176e <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001854:	2200      	movs	r2, #0
 8001856:	2100      	movs	r1, #0
 8001858:	2003      	movs	r0, #3
 800185a:	f000 fa98 	bl	8001d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800185e:	2003      	movs	r0, #3
 8001860:	f000 faaf 	bl	8001dc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001864:	bf00      	nop
 8001866:	3758      	adds	r7, #88	; 0x58
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40002800 	.word	0x40002800

08001870 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001874:	e7fe      	b.n	8001874 <NMI_Handler+0x4>

08001876 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001876:	b480      	push	{r7}
 8001878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800187a:	e7fe      	b.n	800187a <HardFault_Handler+0x4>

0800187c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001880:	e7fe      	b.n	8001880 <MemManage_Handler+0x4>

08001882 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001882:	b480      	push	{r7}
 8001884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001886:	e7fe      	b.n	8001886 <BusFault_Handler+0x4>

08001888 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800188c:	e7fe      	b.n	800188c <UsageFault_Handler+0x4>

0800188e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800188e:	b480      	push	{r7}
 8001890:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr

080018aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018bc:	f000 f900 	bl	8001ac0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018c0:	bf00      	nop
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80018c8:	f7ff fae8 	bl	8000e9c <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80018cc:	bf00      	nop
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 80018d4:	f005 fa1a 	bl	8006d0c <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 80018d8:	bf00      	nop
 80018da:	bd80      	pop	{r7, pc}

080018dc <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80018e0:	f005 fa4c 	bl	8006d7c <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 80018e4:	bf00      	nop
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80018ec:	f000 fc50 	bl	8002190 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80018f0:	bf00      	nop
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80018f8:	4b24      	ldr	r3, [pc, #144]	; (800198c <SystemInit+0x98>)
 80018fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018fe:	4a23      	ldr	r2, [pc, #140]	; (800198c <SystemInit+0x98>)
 8001900:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001904:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001908:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001912:	f043 0301 	orr.w	r3, r3, #1
 8001916:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001918:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800191c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001920:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001922:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800192c:	4b18      	ldr	r3, [pc, #96]	; (8001990 <SystemInit+0x9c>)
 800192e:	4013      	ands	r3, r2
 8001930:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001932:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001936:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800193a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800193e:	f023 0305 	bic.w	r3, r3, #5
 8001942:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001946:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800194a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800194e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001952:	f023 0301 	bic.w	r3, r3, #1
 8001956:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800195a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800195e:	4a0d      	ldr	r2, [pc, #52]	; (8001994 <SystemInit+0xa0>)
 8001960:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001962:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001966:	4a0b      	ldr	r2, [pc, #44]	; (8001994 <SystemInit+0xa0>)
 8001968:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800196a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001974:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001978:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800197a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800197e:	2200      	movs	r2, #0
 8001980:	619a      	str	r2, [r3, #24]
}
 8001982:	bf00      	nop
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	e000ed00 	.word	0xe000ed00
 8001990:	faf6fefb 	.word	0xfaf6fefb
 8001994:	22041000 	.word	0x22041000

08001998 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001998:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800199a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800199c:	3304      	adds	r3, #4

0800199e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800199e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019a0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80019a2:	d3f9      	bcc.n	8001998 <CopyDataInit>
  bx lr
 80019a4:	4770      	bx	lr

080019a6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80019a6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80019a8:	3004      	adds	r0, #4

080019aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80019aa:	4288      	cmp	r0, r1
  bcc FillZerobss
 80019ac:	d3fb      	bcc.n	80019a6 <FillZerobss>
  bx lr
 80019ae:	4770      	bx	lr

080019b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019b0:	480c      	ldr	r0, [pc, #48]	; (80019e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019b2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80019b4:	f7ff ff9e 	bl	80018f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80019b8:	480b      	ldr	r0, [pc, #44]	; (80019e8 <LoopForever+0x6>)
 80019ba:	490c      	ldr	r1, [pc, #48]	; (80019ec <LoopForever+0xa>)
 80019bc:	4a0c      	ldr	r2, [pc, #48]	; (80019f0 <LoopForever+0xe>)
 80019be:	2300      	movs	r3, #0
 80019c0:	f7ff ffed 	bl	800199e <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80019c4:	480b      	ldr	r0, [pc, #44]	; (80019f4 <LoopForever+0x12>)
 80019c6:	490c      	ldr	r1, [pc, #48]	; (80019f8 <LoopForever+0x16>)
 80019c8:	4a0c      	ldr	r2, [pc, #48]	; (80019fc <LoopForever+0x1a>)
 80019ca:	2300      	movs	r3, #0
 80019cc:	f7ff ffe7 	bl	800199e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80019d0:	480b      	ldr	r0, [pc, #44]	; (8001a00 <LoopForever+0x1e>)
 80019d2:	490c      	ldr	r1, [pc, #48]	; (8001a04 <LoopForever+0x22>)
 80019d4:	2300      	movs	r3, #0
 80019d6:	f7ff ffe8 	bl	80019aa <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80019da:	f005 fd5b 	bl	8007494 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80019de:	f7ff fd45 	bl	800146c <main>

080019e2 <LoopForever>:

LoopForever:
  b LoopForever
 80019e2:	e7fe      	b.n	80019e2 <LoopForever>
  ldr   r0, =_estack
 80019e4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80019e8:	20000008 	.word	0x20000008
 80019ec:	20000028 	.word	0x20000028
 80019f0:	080077a0 	.word	0x080077a0
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80019f4:	200301e3 	.word	0x200301e3
 80019f8:	200301e3 	.word	0x200301e3
 80019fc:	08008089 	.word	0x08008089
  INIT_BSS _sbss, _ebss
 8001a00:	200008f8 	.word	0x200008f8
 8001a04:	20000bc4 	.word	0x20000bc4

08001a08 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a08:	e7fe      	b.n	8001a08 <ADC1_IRQHandler>
	...

08001a0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a12:	2300      	movs	r3, #0
 8001a14:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a16:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <HAL_Init+0x3c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a0b      	ldr	r2, [pc, #44]	; (8001a48 <HAL_Init+0x3c>)
 8001a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a20:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a22:	2003      	movs	r0, #3
 8001a24:	f000 f9a8 	bl	8001d78 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a28:	2000      	movs	r0, #0
 8001a2a:	f000 f80f 	bl	8001a4c <HAL_InitTick>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d002      	beq.n	8001a3a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	71fb      	strb	r3, [r7, #7]
 8001a38:	e001      	b.n	8001a3e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a3a:	f7ff feb1 	bl	80017a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a3e:	79fb      	ldrb	r3, [r7, #7]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3708      	adds	r7, #8
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	58004000 	.word	0x58004000

08001a4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a54:	2300      	movs	r3, #0
 8001a56:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001a58:	4b17      	ldr	r3, [pc, #92]	; (8001ab8 <HAL_InitTick+0x6c>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d024      	beq.n	8001aaa <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a60:	f001 fcdc 	bl	800341c <HAL_RCC_GetHCLKFreq>
 8001a64:	4602      	mov	r2, r0
 8001a66:	4b14      	ldr	r3, [pc, #80]	; (8001ab8 <HAL_InitTick+0x6c>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a70:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f000 f9be 	bl	8001dfa <HAL_SYSTICK_Config>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d10f      	bne.n	8001aa4 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2b0f      	cmp	r3, #15
 8001a88:	d809      	bhi.n	8001a9e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	6879      	ldr	r1, [r7, #4]
 8001a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8001a92:	f000 f97c 	bl	8001d8e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a96:	4a09      	ldr	r2, [pc, #36]	; (8001abc <HAL_InitTick+0x70>)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6013      	str	r3, [r2, #0]
 8001a9c:	e007      	b.n	8001aae <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	73fb      	strb	r3, [r7, #15]
 8001aa2:	e004      	b.n	8001aae <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	73fb      	strb	r3, [r7, #15]
 8001aa8:	e001      	b.n	8001aae <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3710      	adds	r7, #16
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20000010 	.word	0x20000010
 8001abc:	2000000c 	.word	0x2000000c

08001ac0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ac4:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <HAL_IncTick+0x20>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	461a      	mov	r2, r3
 8001aca:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <HAL_IncTick+0x24>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4413      	add	r3, r2
 8001ad0:	4a04      	ldr	r2, [pc, #16]	; (8001ae4 <HAL_IncTick+0x24>)
 8001ad2:	6013      	str	r3, [r2, #0]
}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	20000010 	.word	0x20000010
 8001ae4:	20000a14 	.word	0x20000a14

08001ae8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  return uwTick;
 8001aec:	4b03      	ldr	r3, [pc, #12]	; (8001afc <HAL_GetTick+0x14>)
 8001aee:	681b      	ldr	r3, [r3, #0]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	20000a14 	.word	0x20000a14

08001b00 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001b04:	4b03      	ldr	r3, [pc, #12]	; (8001b14 <HAL_GetTickPrio+0x14>)
 8001b06:	681b      	ldr	r3, [r3, #0]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	2000000c 	.word	0x2000000c

08001b18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b28:	4b0c      	ldr	r3, [pc, #48]	; (8001b5c <__NVIC_SetPriorityGrouping+0x44>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b2e:	68ba      	ldr	r2, [r7, #8]
 8001b30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b34:	4013      	ands	r3, r2
 8001b36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b4a:	4a04      	ldr	r2, [pc, #16]	; (8001b5c <__NVIC_SetPriorityGrouping+0x44>)
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	60d3      	str	r3, [r2, #12]
}
 8001b50:	bf00      	nop
 8001b52:	3714      	adds	r7, #20
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	e000ed00 	.word	0xe000ed00

08001b60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b64:	4b04      	ldr	r3, [pc, #16]	; (8001b78 <__NVIC_GetPriorityGrouping+0x18>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	0a1b      	lsrs	r3, r3, #8
 8001b6a:	f003 0307 	and.w	r3, r3, #7
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	e000ed00 	.word	0xe000ed00

08001b7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	db0b      	blt.n	8001ba6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b8e:	79fb      	ldrb	r3, [r7, #7]
 8001b90:	f003 021f 	and.w	r2, r3, #31
 8001b94:	4907      	ldr	r1, [pc, #28]	; (8001bb4 <__NVIC_EnableIRQ+0x38>)
 8001b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9a:	095b      	lsrs	r3, r3, #5
 8001b9c:	2001      	movs	r0, #1
 8001b9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	e000e100 	.word	0xe000e100

08001bb8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	db12      	blt.n	8001bf0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bca:	79fb      	ldrb	r3, [r7, #7]
 8001bcc:	f003 021f 	and.w	r2, r3, #31
 8001bd0:	490a      	ldr	r1, [pc, #40]	; (8001bfc <__NVIC_DisableIRQ+0x44>)
 8001bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd6:	095b      	lsrs	r3, r3, #5
 8001bd8:	2001      	movs	r0, #1
 8001bda:	fa00 f202 	lsl.w	r2, r0, r2
 8001bde:	3320      	adds	r3, #32
 8001be0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001be4:	f3bf 8f4f 	dsb	sy
}
 8001be8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bea:	f3bf 8f6f 	isb	sy
}
 8001bee:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	e000e100 	.word	0xe000e100

08001c00 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	db0c      	blt.n	8001c2c <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c12:	79fb      	ldrb	r3, [r7, #7]
 8001c14:	f003 021f 	and.w	r2, r3, #31
 8001c18:	4907      	ldr	r1, [pc, #28]	; (8001c38 <__NVIC_SetPendingIRQ+0x38>)
 8001c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1e:	095b      	lsrs	r3, r3, #5
 8001c20:	2001      	movs	r0, #1
 8001c22:	fa00 f202 	lsl.w	r2, r0, r2
 8001c26:	3340      	adds	r3, #64	; 0x40
 8001c28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c2c:	bf00      	nop
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr
 8001c38:	e000e100 	.word	0xe000e100

08001c3c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	db0c      	blt.n	8001c68 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c4e:	79fb      	ldrb	r3, [r7, #7]
 8001c50:	f003 021f 	and.w	r2, r3, #31
 8001c54:	4907      	ldr	r1, [pc, #28]	; (8001c74 <__NVIC_ClearPendingIRQ+0x38>)
 8001c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5a:	095b      	lsrs	r3, r3, #5
 8001c5c:	2001      	movs	r0, #1
 8001c5e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c62:	3360      	adds	r3, #96	; 0x60
 8001c64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	e000e100 	.word	0xe000e100

08001c78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	6039      	str	r1, [r7, #0]
 8001c82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	db0a      	blt.n	8001ca2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	b2da      	uxtb	r2, r3
 8001c90:	490c      	ldr	r1, [pc, #48]	; (8001cc4 <__NVIC_SetPriority+0x4c>)
 8001c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c96:	0112      	lsls	r2, r2, #4
 8001c98:	b2d2      	uxtb	r2, r2
 8001c9a:	440b      	add	r3, r1
 8001c9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ca0:	e00a      	b.n	8001cb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	b2da      	uxtb	r2, r3
 8001ca6:	4908      	ldr	r1, [pc, #32]	; (8001cc8 <__NVIC_SetPriority+0x50>)
 8001ca8:	79fb      	ldrb	r3, [r7, #7]
 8001caa:	f003 030f 	and.w	r3, r3, #15
 8001cae:	3b04      	subs	r3, #4
 8001cb0:	0112      	lsls	r2, r2, #4
 8001cb2:	b2d2      	uxtb	r2, r2
 8001cb4:	440b      	add	r3, r1
 8001cb6:	761a      	strb	r2, [r3, #24]
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr
 8001cc4:	e000e100 	.word	0xe000e100
 8001cc8:	e000ed00 	.word	0xe000ed00

08001ccc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b089      	sub	sp, #36	; 0x24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	60b9      	str	r1, [r7, #8]
 8001cd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	f1c3 0307 	rsb	r3, r3, #7
 8001ce6:	2b04      	cmp	r3, #4
 8001ce8:	bf28      	it	cs
 8001cea:	2304      	movcs	r3, #4
 8001cec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	3304      	adds	r3, #4
 8001cf2:	2b06      	cmp	r3, #6
 8001cf4:	d902      	bls.n	8001cfc <NVIC_EncodePriority+0x30>
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	3b03      	subs	r3, #3
 8001cfa:	e000      	b.n	8001cfe <NVIC_EncodePriority+0x32>
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d00:	f04f 32ff 	mov.w	r2, #4294967295
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	43da      	mvns	r2, r3
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	401a      	ands	r2, r3
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d14:	f04f 31ff 	mov.w	r1, #4294967295
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d1e:	43d9      	mvns	r1, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d24:	4313      	orrs	r3, r2
         );
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3724      	adds	r7, #36	; 0x24
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
	...

08001d34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d44:	d301      	bcc.n	8001d4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d46:	2301      	movs	r3, #1
 8001d48:	e00f      	b.n	8001d6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d4a:	4a0a      	ldr	r2, [pc, #40]	; (8001d74 <SysTick_Config+0x40>)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d52:	210f      	movs	r1, #15
 8001d54:	f04f 30ff 	mov.w	r0, #4294967295
 8001d58:	f7ff ff8e 	bl	8001c78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d5c:	4b05      	ldr	r3, [pc, #20]	; (8001d74 <SysTick_Config+0x40>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d62:	4b04      	ldr	r3, [pc, #16]	; (8001d74 <SysTick_Config+0x40>)
 8001d64:	2207      	movs	r2, #7
 8001d66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	e000e010 	.word	0xe000e010

08001d78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f7ff fec9 	bl	8001b18 <__NVIC_SetPriorityGrouping>
}
 8001d86:	bf00      	nop
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b086      	sub	sp, #24
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	4603      	mov	r3, r0
 8001d96:	60b9      	str	r1, [r7, #8]
 8001d98:	607a      	str	r2, [r7, #4]
 8001d9a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d9c:	f7ff fee0 	bl	8001b60 <__NVIC_GetPriorityGrouping>
 8001da0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	68b9      	ldr	r1, [r7, #8]
 8001da6:	6978      	ldr	r0, [r7, #20]
 8001da8:	f7ff ff90 	bl	8001ccc <NVIC_EncodePriority>
 8001dac:	4602      	mov	r2, r0
 8001dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001db2:	4611      	mov	r1, r2
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff ff5f 	bl	8001c78 <__NVIC_SetPriority>
}
 8001dba:	bf00      	nop
 8001dbc:	3718      	adds	r7, #24
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b082      	sub	sp, #8
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	4603      	mov	r3, r0
 8001dca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff fed3 	bl	8001b7c <__NVIC_EnableIRQ>
}
 8001dd6:	bf00      	nop
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b082      	sub	sp, #8
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	4603      	mov	r3, r0
 8001de6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff fee3 	bl	8001bb8 <__NVIC_DisableIRQ>
}
 8001df2:	bf00      	nop
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b082      	sub	sp, #8
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f7ff ff96 	bl	8001d34 <SysTick_Config>
 8001e08:	4603      	mov	r3, r0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b082      	sub	sp, #8
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	4603      	mov	r3, r0
 8001e1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8001e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff feed 	bl	8001c00 <__NVIC_SetPendingIRQ>
}
 8001e26:	bf00      	nop
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b082      	sub	sp, #8
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	4603      	mov	r3, r0
 8001e36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8001e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff fefd 	bl	8001c3c <__NVIC_ClearPendingIRQ>
}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
	...

08001e4c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b087      	sub	sp, #28
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e56:	2300      	movs	r3, #0
 8001e58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e5a:	e14c      	b.n	80020f6 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	2101      	movs	r1, #1
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	fa01 f303 	lsl.w	r3, r1, r3
 8001e68:	4013      	ands	r3, r2
 8001e6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	f000 813e 	beq.w	80020f0 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f003 0303 	and.w	r3, r3, #3
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d005      	beq.n	8001e8c <HAL_GPIO_Init+0x40>
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f003 0303 	and.w	r3, r3, #3
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d130      	bne.n	8001eee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	2203      	movs	r2, #3
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	68da      	ldr	r2, [r3, #12]
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	693a      	ldr	r2, [r7, #16]
 8001eba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	091b      	lsrs	r3, r3, #4
 8001ed8:	f003 0201 	and.w	r2, r3, #1
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f003 0303 	and.w	r3, r3, #3
 8001ef6:	2b03      	cmp	r3, #3
 8001ef8:	d017      	beq.n	8001f2a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	2203      	movs	r2, #3
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	689a      	ldr	r2, [r3, #8]
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f003 0303 	and.w	r3, r3, #3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d123      	bne.n	8001f7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	08da      	lsrs	r2, r3, #3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	3208      	adds	r2, #8
 8001f3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	f003 0307 	and.w	r3, r3, #7
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	220f      	movs	r2, #15
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	43db      	mvns	r3, r3
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	4013      	ands	r3, r2
 8001f58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	691a      	ldr	r2, [r3, #16]
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	f003 0307 	and.w	r3, r3, #7
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	08da      	lsrs	r2, r3, #3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	3208      	adds	r2, #8
 8001f78:	6939      	ldr	r1, [r7, #16]
 8001f7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	2203      	movs	r2, #3
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	43db      	mvns	r3, r3
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	4013      	ands	r3, r2
 8001f94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f003 0203 	and.w	r2, r3, #3
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f000 8098 	beq.w	80020f0 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001fc0:	4a54      	ldr	r2, [pc, #336]	; (8002114 <HAL_GPIO_Init+0x2c8>)
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	089b      	lsrs	r3, r3, #2
 8001fc6:	3302      	adds	r3, #2
 8001fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	f003 0303 	and.w	r3, r3, #3
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	220f      	movs	r2, #15
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001fea:	d019      	beq.n	8002020 <HAL_GPIO_Init+0x1d4>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a4a      	ldr	r2, [pc, #296]	; (8002118 <HAL_GPIO_Init+0x2cc>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d013      	beq.n	800201c <HAL_GPIO_Init+0x1d0>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4a49      	ldr	r2, [pc, #292]	; (800211c <HAL_GPIO_Init+0x2d0>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d00d      	beq.n	8002018 <HAL_GPIO_Init+0x1cc>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a48      	ldr	r2, [pc, #288]	; (8002120 <HAL_GPIO_Init+0x2d4>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d007      	beq.n	8002014 <HAL_GPIO_Init+0x1c8>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a47      	ldr	r2, [pc, #284]	; (8002124 <HAL_GPIO_Init+0x2d8>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d101      	bne.n	8002010 <HAL_GPIO_Init+0x1c4>
 800200c:	2304      	movs	r3, #4
 800200e:	e008      	b.n	8002022 <HAL_GPIO_Init+0x1d6>
 8002010:	2307      	movs	r3, #7
 8002012:	e006      	b.n	8002022 <HAL_GPIO_Init+0x1d6>
 8002014:	2303      	movs	r3, #3
 8002016:	e004      	b.n	8002022 <HAL_GPIO_Init+0x1d6>
 8002018:	2302      	movs	r3, #2
 800201a:	e002      	b.n	8002022 <HAL_GPIO_Init+0x1d6>
 800201c:	2301      	movs	r3, #1
 800201e:	e000      	b.n	8002022 <HAL_GPIO_Init+0x1d6>
 8002020:	2300      	movs	r3, #0
 8002022:	697a      	ldr	r2, [r7, #20]
 8002024:	f002 0203 	and.w	r2, r2, #3
 8002028:	0092      	lsls	r2, r2, #2
 800202a:	4093      	lsls	r3, r2
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	4313      	orrs	r3, r2
 8002030:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002032:	4938      	ldr	r1, [pc, #224]	; (8002114 <HAL_GPIO_Init+0x2c8>)
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	089b      	lsrs	r3, r3, #2
 8002038:	3302      	adds	r3, #2
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002040:	4b39      	ldr	r3, [pc, #228]	; (8002128 <HAL_GPIO_Init+0x2dc>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	43db      	mvns	r3, r3
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	4013      	ands	r3, r2
 800204e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d003      	beq.n	8002064 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	4313      	orrs	r3, r2
 8002062:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002064:	4a30      	ldr	r2, [pc, #192]	; (8002128 <HAL_GPIO_Init+0x2dc>)
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800206a:	4b2f      	ldr	r3, [pc, #188]	; (8002128 <HAL_GPIO_Init+0x2dc>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	43db      	mvns	r3, r3
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	4013      	ands	r3, r2
 8002078:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d003      	beq.n	800208e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	4313      	orrs	r3, r2
 800208c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800208e:	4a26      	ldr	r2, [pc, #152]	; (8002128 <HAL_GPIO_Init+0x2dc>)
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002094:	4b24      	ldr	r3, [pc, #144]	; (8002128 <HAL_GPIO_Init+0x2dc>)
 8002096:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800209a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	43db      	mvns	r3, r3
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	4013      	ands	r3, r2
 80020a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d003      	beq.n	80020ba <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80020ba:	4a1b      	ldr	r2, [pc, #108]	; (8002128 <HAL_GPIO_Init+0x2dc>)
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80020c2:	4b19      	ldr	r3, [pc, #100]	; (8002128 <HAL_GPIO_Init+0x2dc>)
 80020c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	43db      	mvns	r3, r3
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	4013      	ands	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d003      	beq.n	80020e8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80020e8:	4a0f      	ldr	r2, [pc, #60]	; (8002128 <HAL_GPIO_Init+0x2dc>)
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	3301      	adds	r3, #1
 80020f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002100:	2b00      	cmp	r3, #0
 8002102:	f47f aeab 	bne.w	8001e5c <HAL_GPIO_Init+0x10>
  }
}
 8002106:	bf00      	nop
 8002108:	bf00      	nop
 800210a:	371c      	adds	r7, #28
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr
 8002114:	40010000 	.word	0x40010000
 8002118:	48000400 	.word	0x48000400
 800211c:	48000800 	.word	0x48000800
 8002120:	48000c00 	.word	0x48000c00
 8002124:	48001000 	.word	0x48001000
 8002128:	58000800 	.word	0x58000800

0800212c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	460b      	mov	r3, r1
 8002136:	807b      	strh	r3, [r7, #2]
 8002138:	4613      	mov	r3, r2
 800213a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800213c:	787b      	ldrb	r3, [r7, #1]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002142:	887a      	ldrh	r2, [r7, #2]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002148:	e002      	b.n	8002150 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800214a:	887a      	ldrh	r2, [r7, #2]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	460b      	mov	r3, r1
 8002166:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	695b      	ldr	r3, [r3, #20]
 800216c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800216e:	887a      	ldrh	r2, [r7, #2]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	4013      	ands	r3, r2
 8002174:	041a      	lsls	r2, r3, #16
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	43d9      	mvns	r1, r3
 800217a:	887b      	ldrh	r3, [r7, #2]
 800217c:	400b      	ands	r3, r1
 800217e:	431a      	orrs	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	619a      	str	r2, [r3, #24]
}
 8002184:	bf00      	nop
 8002186:	3714      	adds	r7, #20
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8002196:	4b0a      	ldr	r3, [pc, #40]	; (80021c0 <HAL_HSEM_IRQHandler+0x30>)
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800219c:	4b08      	ldr	r3, [pc, #32]	; (80021c0 <HAL_HSEM_IRQHandler+0x30>)
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	43db      	mvns	r3, r3
 80021a4:	4906      	ldr	r1, [pc, #24]	; (80021c0 <HAL_HSEM_IRQHandler+0x30>)
 80021a6:	4013      	ands	r3, r2
 80021a8:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80021aa:	4a05      	ldr	r2, [pc, #20]	; (80021c0 <HAL_HSEM_IRQHandler+0x30>)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f000 f807 	bl	80021c4 <HAL_HSEM_FreeCallback>
}
 80021b6:	bf00      	nop
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	58001500 	.word	0x58001500

080021c4 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 80021e0:	2300      	movs	r3, #0
 80021e2:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d01e      	beq.n	8002228 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 80021ea:	4b13      	ldr	r3, [pc, #76]	; (8002238 <HAL_IPCC_Init+0x60>)
 80021ec:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d102      	bne.n	8002200 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f7ff fae0 	bl	80017c0 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8002200:	68b8      	ldr	r0, [r7, #8]
 8002202:	f000 f85b 	bl	80022bc <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 f82c 	bl	8002270 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2201      	movs	r2, #1
 8002222:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8002226:	e001      	b.n	800222c <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 800222c:	7bfb      	ldrb	r3, [r7, #15]
}
 800222e:	4618      	mov	r0, r3
 8002230:	3710      	adds	r7, #16
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	58000c00 	.word	0x58000c00

0800223c <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	4613      	mov	r3, r2
 8002248:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800224a:	bf00      	nop
 800224c:	3714      	adds	r7, #20
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8002256:	b480      	push	{r7}
 8002258:	b085      	sub	sp, #20
 800225a:	af00      	add	r7, sp, #0
 800225c:	60f8      	str	r0, [r7, #12]
 800225e:	60b9      	str	r1, [r7, #8]
 8002260:	4613      	mov	r3, r2
 8002262:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8002264:	bf00      	nop
 8002266:	3714      	adds	r7, #20
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8002278:	2300      	movs	r3, #0
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	e00f      	b.n	800229e <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	4413      	add	r3, r2
 8002286:	4a0b      	ldr	r2, [pc, #44]	; (80022b4 <IPCC_SetDefaultCallbacks+0x44>)
 8002288:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	3306      	adds	r3, #6
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4413      	add	r3, r2
 8002294:	4a08      	ldr	r2, [pc, #32]	; (80022b8 <IPCC_SetDefaultCallbacks+0x48>)
 8002296:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	3301      	adds	r3, #1
 800229c:	60fb      	str	r3, [r7, #12]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2b05      	cmp	r3, #5
 80022a2:	d9ec      	bls.n	800227e <IPCC_SetDefaultCallbacks+0xe>
  }
}
 80022a4:	bf00      	nop
 80022a6:	bf00      	nop
 80022a8:	3714      	adds	r7, #20
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	0800223d 	.word	0x0800223d
 80022b8:	08002257 	.word	0x08002257

080022bc <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 80022d0:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	223f      	movs	r2, #63	; 0x3f
 80022d6:	609a      	str	r2, [r3, #8]
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022e8:	4b05      	ldr	r3, [pc, #20]	; (8002300 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a04      	ldr	r2, [pc, #16]	; (8002300 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80022ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022f2:	6013      	str	r3, [r2, #0]
}
 80022f4:	bf00      	nop
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	58000400 	.word	0x58000400

08002304 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002308:	4b04      	ldr	r3, [pc, #16]	; (800231c <HAL_PWREx_GetVoltageRange+0x18>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002310:	4618      	mov	r0, r3
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	58000400 	.word	0x58000400

08002320 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002324:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800232e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002332:	d101      	bne.n	8002338 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002334:	2301      	movs	r3, #1
 8002336:	e000      	b.n	800233a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <LL_RCC_HSE_Enable>:
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002348:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002352:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002356:	6013      	str	r3, [r2, #0]
}
 8002358:	bf00      	nop
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr

08002362 <LL_RCC_HSE_Disable>:
{
 8002362:	b480      	push	{r7}
 8002364:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002366:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002370:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002374:	6013      	str	r3, [r2, #0]
}
 8002376:	bf00      	nop
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <LL_RCC_HSE_IsReady>:
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002384:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002392:	d101      	bne.n	8002398 <LL_RCC_HSE_IsReady+0x18>
 8002394:	2301      	movs	r3, #1
 8002396:	e000      	b.n	800239a <LL_RCC_HSE_IsReady+0x1a>
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <LL_RCC_HSI_Enable>:
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80023a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023b6:	6013      	str	r3, [r2, #0]
}
 80023b8:	bf00      	nop
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr

080023c2 <LL_RCC_HSI_Disable>:
{
 80023c2:	b480      	push	{r7}
 80023c4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80023c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023d4:	6013      	str	r3, [r2, #0]
}
 80023d6:	bf00      	nop
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <LL_RCC_HSI_IsReady>:
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80023e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023f2:	d101      	bne.n	80023f8 <LL_RCC_HSI_IsReady+0x18>
 80023f4:	2301      	movs	r3, #1
 80023f6:	e000      	b.n	80023fa <LL_RCC_HSI_IsReady+0x1a>
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800240c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	061b      	lsls	r3, r3, #24
 800241a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800241e:	4313      	orrs	r3, r2
 8002420:	604b      	str	r3, [r1, #4]
}
 8002422:	bf00      	nop
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr

0800242e <LL_RCC_HSI48_Enable>:
{
 800242e:	b480      	push	{r7}
 8002430:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002432:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002436:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800243a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800243e:	f043 0301 	orr.w	r3, r3, #1
 8002442:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002446:	bf00      	nop
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <LL_RCC_HSI48_Disable>:
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002454:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002458:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800245c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002460:	f023 0301 	bic.w	r3, r3, #1
 8002464:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002468:	bf00      	nop
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr

08002472 <LL_RCC_HSI48_IsReady>:
{
 8002472:	b480      	push	{r7}
 8002474:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002476:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800247a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b02      	cmp	r3, #2
 8002484:	d101      	bne.n	800248a <LL_RCC_HSI48_IsReady+0x18>
 8002486:	2301      	movs	r3, #1
 8002488:	e000      	b.n	800248c <LL_RCC_HSI48_IsReady+0x1a>
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr

08002496 <LL_RCC_LSE_Enable>:
{
 8002496:	b480      	push	{r7}
 8002498:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800249a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800249e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024a6:	f043 0301 	orr.w	r3, r3, #1
 80024aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80024ae:	bf00      	nop
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <LL_RCC_LSE_Disable>:
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80024bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024c8:	f023 0301 	bic.w	r3, r3, #1
 80024cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80024d0:	bf00      	nop
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr

080024da <LL_RCC_LSE_EnableBypass>:
{
 80024da:	b480      	push	{r7}
 80024dc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80024de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024ea:	f043 0304 	orr.w	r3, r3, #4
 80024ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80024f2:	bf00      	nop
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <LL_RCC_LSE_DisableBypass>:
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002500:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002508:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800250c:	f023 0304 	bic.w	r3, r3, #4
 8002510:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002514:	bf00      	nop
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr

0800251e <LL_RCC_LSE_IsReady>:
{
 800251e:	b480      	push	{r7}
 8002520:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002522:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b02      	cmp	r3, #2
 8002530:	d101      	bne.n	8002536 <LL_RCC_LSE_IsReady+0x18>
 8002532:	2301      	movs	r3, #1
 8002534:	e000      	b.n	8002538 <LL_RCC_LSE_IsReady+0x1a>
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr

08002542 <LL_RCC_LSI1_Enable>:
{
 8002542:	b480      	push	{r7}
 8002544:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002546:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800254a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800254e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002552:	f043 0301 	orr.w	r3, r3, #1
 8002556:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800255a:	bf00      	nop
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <LL_RCC_LSI1_Disable>:
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800256c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002570:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002574:	f023 0301 	bic.w	r3, r3, #1
 8002578:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800257c:	bf00      	nop
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr

08002586 <LL_RCC_LSI1_IsReady>:
{
 8002586:	b480      	push	{r7}
 8002588:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800258a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800258e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b02      	cmp	r3, #2
 8002598:	d101      	bne.n	800259e <LL_RCC_LSI1_IsReady+0x18>
 800259a:	2301      	movs	r3, #1
 800259c:	e000      	b.n	80025a0 <LL_RCC_LSI1_IsReady+0x1a>
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr

080025aa <LL_RCC_LSI2_Enable>:
{
 80025aa:	b480      	push	{r7}
 80025ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80025ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025ba:	f043 0304 	orr.w	r3, r3, #4
 80025be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80025c2:	bf00      	nop
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <LL_RCC_LSI2_Disable>:
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80025d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025dc:	f023 0304 	bic.w	r3, r3, #4
 80025e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80025e4:	bf00      	nop
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr

080025ee <LL_RCC_LSI2_IsReady>:
{
 80025ee:	b480      	push	{r7}
 80025f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80025f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025fa:	f003 0308 	and.w	r3, r3, #8
 80025fe:	2b08      	cmp	r3, #8
 8002600:	d101      	bne.n	8002606 <LL_RCC_LSI2_IsReady+0x18>
 8002602:	2301      	movs	r3, #1
 8002604:	e000      	b.n	8002608 <LL_RCC_LSI2_IsReady+0x1a>
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr

08002612 <LL_RCC_LSI2_SetTrimming>:
{
 8002612:	b480      	push	{r7}
 8002614:	b083      	sub	sp, #12
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800261a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800261e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002622:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	021b      	lsls	r3, r3, #8
 800262a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800262e:	4313      	orrs	r3, r2
 8002630:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <LL_RCC_MSI_Enable>:
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002644:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800264e:	f043 0301 	orr.w	r3, r3, #1
 8002652:	6013      	str	r3, [r2, #0]
}
 8002654:	bf00      	nop
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr

0800265e <LL_RCC_MSI_Disable>:
{
 800265e:	b480      	push	{r7}
 8002660:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800266c:	f023 0301 	bic.w	r3, r3, #1
 8002670:	6013      	str	r3, [r2, #0]
}
 8002672:	bf00      	nop
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <LL_RCC_MSI_IsReady>:
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002680:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b02      	cmp	r3, #2
 800268c:	d101      	bne.n	8002692 <LL_RCC_MSI_IsReady+0x16>
 800268e:	2301      	movs	r3, #1
 8002690:	e000      	b.n	8002694 <LL_RCC_MSI_IsReady+0x18>
 8002692:	2300      	movs	r3, #0
}
 8002694:	4618      	mov	r0, r3
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr

0800269e <LL_RCC_MSI_SetRange>:
{
 800269e:	b480      	push	{r7}
 80026a0:	b083      	sub	sp, #12
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80026a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	600b      	str	r3, [r1, #0]
}
 80026ba:	bf00      	nop
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr

080026c6 <LL_RCC_MSI_GetRange>:
{
 80026c6:	b480      	push	{r7}
 80026c8:	b083      	sub	sp, #12
 80026ca:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80026cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026d6:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2bb0      	cmp	r3, #176	; 0xb0
 80026dc:	d901      	bls.n	80026e2 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80026de:	23b0      	movs	r3, #176	; 0xb0
 80026e0:	607b      	str	r3, [r7, #4]
  return msiRange;
 80026e2:	687b      	ldr	r3, [r7, #4]
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <LL_RCC_MSI_SetCalibTrimming>:
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80026f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	021b      	lsls	r3, r3, #8
 8002706:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800270a:	4313      	orrs	r3, r2
 800270c:	604b      	str	r3, [r1, #4]
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr

0800271a <LL_RCC_SetSysClkSource>:
{
 800271a:	b480      	push	{r7}
 800271c:	b083      	sub	sp, #12
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002722:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f023 0203 	bic.w	r2, r3, #3
 800272c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4313      	orrs	r3, r2
 8002734:	608b      	str	r3, [r1, #8]
}
 8002736:	bf00      	nop
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr

08002742 <LL_RCC_GetSysClkSource>:
{
 8002742:	b480      	push	{r7}
 8002744:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002746:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f003 030c 	and.w	r3, r3, #12
}
 8002750:	4618      	mov	r0, r3
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr

0800275a <LL_RCC_SetAHBPrescaler>:
{
 800275a:	b480      	push	{r7}
 800275c:	b083      	sub	sp, #12
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002762:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800276c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4313      	orrs	r3, r2
 8002774:	608b      	str	r3, [r1, #8]
}
 8002776:	bf00      	nop
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <LL_C2_RCC_SetAHBPrescaler>:
{
 8002782:	b480      	push	{r7}
 8002784:	b083      	sub	sp, #12
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800278a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800278e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002792:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002796:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4313      	orrs	r3, r2
 800279e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80027a2:	bf00      	nop
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <LL_RCC_SetAHB4Prescaler>:
{
 80027ae:	b480      	push	{r7}
 80027b0:	b083      	sub	sp, #12
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80027b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027ba:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80027be:	f023 020f 	bic.w	r2, r3, #15
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	091b      	lsrs	r3, r3, #4
 80027c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027ca:	4313      	orrs	r3, r2
 80027cc:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <LL_RCC_SetAPB1Prescaler>:
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80027e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	608b      	str	r3, [r1, #8]
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <LL_RCC_SetAPB2Prescaler>:
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800280c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002816:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4313      	orrs	r3, r2
 800281e:	608b      	str	r3, [r1, #8]
}
 8002820:	bf00      	nop
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <LL_RCC_GetAHBPrescaler>:
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002830:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800283a:	4618      	mov	r0, r3
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <LL_RCC_GetAHB4Prescaler>:
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002848:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800284c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002850:	011b      	lsls	r3, r3, #4
 8002852:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002856:	4618      	mov	r0, r3
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <LL_RCC_PLL_Enable>:
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002864:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800286e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002872:	6013      	str	r3, [r2, #0]
}
 8002874:	bf00      	nop
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <LL_RCC_PLL_Disable>:
{
 800287e:	b480      	push	{r7}
 8002880:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002882:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800288c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002890:	6013      	str	r3, [r2, #0]
}
 8002892:	bf00      	nop
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <LL_RCC_PLL_IsReady>:
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80028a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80028ae:	d101      	bne.n	80028b4 <LL_RCC_PLL_IsReady+0x18>
 80028b0:	2301      	movs	r3, #1
 80028b2:	e000      	b.n	80028b6 <LL_RCC_PLL_IsReady+0x1a>
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <LL_RCC_PLL_GetN>:
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80028c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	0a1b      	lsrs	r3, r3, #8
 80028cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <LL_RCC_PLL_GetR>:
{
 80028da:	b480      	push	{r7}
 80028dc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80028de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <LL_RCC_PLL_GetDivider>:
{
 80028f2:	b480      	push	{r7}
 80028f4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80028f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002900:	4618      	mov	r0, r3
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr

0800290a <LL_RCC_PLL_GetMainSource>:
{
 800290a:	b480      	push	{r7}
 800290c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800290e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	f003 0303 	and.w	r3, r3, #3
}
 8002918:	4618      	mov	r0, r3
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr

08002922 <LL_RCC_IsActiveFlag_HPRE>:
{
 8002922:	b480      	push	{r7}
 8002924:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002926:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002934:	d101      	bne.n	800293a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002936:	2301      	movs	r3, #1
 8002938:	e000      	b.n	800293c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr

08002946 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8002946:	b480      	push	{r7}
 8002948:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800294a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800294e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002956:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800295a:	d101      	bne.n	8002960 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800295c:	2301      	movs	r3, #1
 800295e:	e000      	b.n	8002962 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002970:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002974:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002978:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800297c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002980:	d101      	bne.n	8002986 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002982:	2301      	movs	r3, #1
 8002984:	e000      	b.n	8002988 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr

08002992 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8002992:	b480      	push	{r7}
 8002994:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002996:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029a4:	d101      	bne.n	80029aa <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80029a6:	2301      	movs	r3, #1
 80029a8:	e000      	b.n	80029ac <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <LL_RCC_IsActiveFlag_PPRE2>:
{
 80029b6:	b480      	push	{r7}
 80029b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80029ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80029c8:	d101      	bne.n	80029ce <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80029ca:	2301      	movs	r3, #1
 80029cc:	e000      	b.n	80029d0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
	...

080029dc <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029dc:	b590      	push	{r4, r7, lr}
 80029de:	b08d      	sub	sp, #52	; 0x34
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e363      	b.n	80030b6 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0320 	and.w	r3, r3, #32
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f000 808d 	beq.w	8002b16 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029fc:	f7ff fea1 	bl	8002742 <LL_RCC_GetSysClkSource>
 8002a00:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a02:	f7ff ff82 	bl	800290a <LL_RCC_PLL_GetMainSource>
 8002a06:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d005      	beq.n	8002a1a <HAL_RCC_OscConfig+0x3e>
 8002a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a10:	2b0c      	cmp	r3, #12
 8002a12:	d147      	bne.n	8002aa4 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d144      	bne.n	8002aa4 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	69db      	ldr	r3, [r3, #28]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e347      	b.n	80030b6 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002a2a:	f7ff fe4c 	bl	80026c6 <LL_RCC_MSI_GetRange>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	429c      	cmp	r4, r3
 8002a32:	d914      	bls.n	8002a5e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f000 fd03 	bl	8003444 <RCC_SetFlashLatencyFromMSIRange>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e336      	b.n	80030b6 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7ff fe26 	bl	800269e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff fe4a 	bl	80026f0 <LL_RCC_MSI_SetCalibTrimming>
 8002a5c:	e013      	b.n	8002a86 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7ff fe1b 	bl	800269e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a1b      	ldr	r3, [r3, #32]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff fe3f 	bl	80026f0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a76:	4618      	mov	r0, r3
 8002a78:	f000 fce4 	bl	8003444 <RCC_SetFlashLatencyFromMSIRange>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e317      	b.n	80030b6 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002a86:	f000 fcc9 	bl	800341c <HAL_RCC_GetHCLKFreq>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	4aa4      	ldr	r2, [pc, #656]	; (8002d20 <HAL_RCC_OscConfig+0x344>)
 8002a8e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002a90:	4ba4      	ldr	r3, [pc, #656]	; (8002d24 <HAL_RCC_OscConfig+0x348>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7fe ffd9 	bl	8001a4c <HAL_InitTick>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d039      	beq.n	8002b14 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e308      	b.n	80030b6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	69db      	ldr	r3, [r3, #28]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d01e      	beq.n	8002aea <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002aac:	f7ff fdc8 	bl	8002640 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ab0:	f7ff f81a 	bl	8001ae8 <HAL_GetTick>
 8002ab4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ab8:	f7ff f816 	bl	8001ae8 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e2f5      	b.n	80030b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002aca:	f7ff fdd7 	bl	800267c <LL_RCC_MSI_IsReady>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d0f1      	beq.n	8002ab8 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff fde0 	bl	800269e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff fe04 	bl	80026f0 <LL_RCC_MSI_SetCalibTrimming>
 8002ae8:	e015      	b.n	8002b16 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002aea:	f7ff fdb8 	bl	800265e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002aee:	f7fe fffb 	bl	8001ae8 <HAL_GetTick>
 8002af2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002af4:	e008      	b.n	8002b08 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002af6:	f7fe fff7 	bl	8001ae8 <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e2d6      	b.n	80030b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002b08:	f7ff fdb8 	bl	800267c <LL_RCC_MSI_IsReady>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1f1      	bne.n	8002af6 <HAL_RCC_OscConfig+0x11a>
 8002b12:	e000      	b.n	8002b16 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002b14:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d047      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b22:	f7ff fe0e 	bl	8002742 <LL_RCC_GetSysClkSource>
 8002b26:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b28:	f7ff feef 	bl	800290a <LL_RCC_PLL_GetMainSource>
 8002b2c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002b2e:	6a3b      	ldr	r3, [r7, #32]
 8002b30:	2b08      	cmp	r3, #8
 8002b32:	d005      	beq.n	8002b40 <HAL_RCC_OscConfig+0x164>
 8002b34:	6a3b      	ldr	r3, [r7, #32]
 8002b36:	2b0c      	cmp	r3, #12
 8002b38:	d108      	bne.n	8002b4c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	2b03      	cmp	r3, #3
 8002b3e:	d105      	bne.n	8002b4c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d134      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e2b4      	b.n	80030b6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b54:	d102      	bne.n	8002b5c <HAL_RCC_OscConfig+0x180>
 8002b56:	f7ff fbf5 	bl	8002344 <LL_RCC_HSE_Enable>
 8002b5a:	e001      	b.n	8002b60 <HAL_RCC_OscConfig+0x184>
 8002b5c:	f7ff fc01 	bl	8002362 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d012      	beq.n	8002b8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b68:	f7fe ffbe 	bl	8001ae8 <HAL_GetTick>
 8002b6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002b6e:	e008      	b.n	8002b82 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b70:	f7fe ffba 	bl	8001ae8 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b64      	cmp	r3, #100	; 0x64
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e299      	b.n	80030b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002b82:	f7ff fbfd 	bl	8002380 <LL_RCC_HSE_IsReady>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d0f1      	beq.n	8002b70 <HAL_RCC_OscConfig+0x194>
 8002b8c:	e011      	b.n	8002bb2 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b8e:	f7fe ffab 	bl	8001ae8 <HAL_GetTick>
 8002b92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002b94:	e008      	b.n	8002ba8 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b96:	f7fe ffa7 	bl	8001ae8 <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	2b64      	cmp	r3, #100	; 0x64
 8002ba2:	d901      	bls.n	8002ba8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e286      	b.n	80030b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002ba8:	f7ff fbea 	bl	8002380 <LL_RCC_HSE_IsReady>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1f1      	bne.n	8002b96 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d04c      	beq.n	8002c58 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bbe:	f7ff fdc0 	bl	8002742 <LL_RCC_GetSysClkSource>
 8002bc2:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bc4:	f7ff fea1 	bl	800290a <LL_RCC_PLL_GetMainSource>
 8002bc8:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	2b04      	cmp	r3, #4
 8002bce:	d005      	beq.n	8002bdc <HAL_RCC_OscConfig+0x200>
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	2b0c      	cmp	r3, #12
 8002bd4:	d10e      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d10b      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d101      	bne.n	8002be8 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e266      	b.n	80030b6 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff fc09 	bl	8002404 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002bf2:	e031      	b.n	8002c58 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d019      	beq.n	8002c30 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bfc:	f7ff fbd2 	bl	80023a4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c00:	f7fe ff72 	bl	8001ae8 <HAL_GetTick>
 8002c04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002c06:	e008      	b.n	8002c1a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c08:	f7fe ff6e 	bl	8001ae8 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e24d      	b.n	80030b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002c1a:	f7ff fbe1 	bl	80023e0 <LL_RCC_HSI_IsReady>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d0f1      	beq.n	8002c08 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7ff fbeb 	bl	8002404 <LL_RCC_HSI_SetCalibTrimming>
 8002c2e:	e013      	b.n	8002c58 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c30:	f7ff fbc7 	bl	80023c2 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c34:	f7fe ff58 	bl	8001ae8 <HAL_GetTick>
 8002c38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c3c:	f7fe ff54 	bl	8001ae8 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e233      	b.n	80030b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002c4e:	f7ff fbc7 	bl	80023e0 <LL_RCC_HSI_IsReady>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d1f1      	bne.n	8002c3c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0308 	and.w	r3, r3, #8
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d106      	bne.n	8002c72 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f000 80a3 	beq.w	8002db8 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d076      	beq.n	8002d68 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0310 	and.w	r3, r3, #16
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d046      	beq.n	8002d14 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002c86:	f7ff fc7e 	bl	8002586 <LL_RCC_LSI1_IsReady>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d113      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002c90:	f7ff fc57 	bl	8002542 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c94:	f7fe ff28 	bl	8001ae8 <HAL_GetTick>
 8002c98:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002c9a:	e008      	b.n	8002cae <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002c9c:	f7fe ff24 	bl	8001ae8 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e203      	b.n	80030b6 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002cae:	f7ff fc6a 	bl	8002586 <LL_RCC_LSI1_IsReady>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d0f1      	beq.n	8002c9c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002cb8:	f7ff fc77 	bl	80025aa <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cbc:	f7fe ff14 	bl	8001ae8 <HAL_GetTick>
 8002cc0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002cc2:	e008      	b.n	8002cd6 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002cc4:	f7fe ff10 	bl	8001ae8 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b03      	cmp	r3, #3
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e1ef      	b.n	80030b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002cd6:	f7ff fc8a 	bl	80025ee <LL_RCC_LSI2_IsReady>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d0f1      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	699b      	ldr	r3, [r3, #24]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff fc94 	bl	8002612 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8002cea:	f7ff fc3b 	bl	8002564 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cee:	f7fe fefb 	bl	8001ae8 <HAL_GetTick>
 8002cf2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002cf4:	e008      	b.n	8002d08 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002cf6:	f7fe fef7 	bl	8001ae8 <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d901      	bls.n	8002d08 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e1d6      	b.n	80030b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002d08:	f7ff fc3d 	bl	8002586 <LL_RCC_LSI1_IsReady>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1f1      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x31a>
 8002d12:	e051      	b.n	8002db8 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002d14:	f7ff fc15 	bl	8002542 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d18:	f7fe fee6 	bl	8001ae8 <HAL_GetTick>
 8002d1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002d1e:	e00c      	b.n	8002d3a <HAL_RCC_OscConfig+0x35e>
 8002d20:	20000008 	.word	0x20000008
 8002d24:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002d28:	f7fe fede 	bl	8001ae8 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e1bd      	b.n	80030b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002d3a:	f7ff fc24 	bl	8002586 <LL_RCC_LSI1_IsReady>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d0f1      	beq.n	8002d28 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002d44:	f7ff fc42 	bl	80025cc <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002d48:	e008      	b.n	8002d5c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002d4a:	f7fe fecd 	bl	8001ae8 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b03      	cmp	r3, #3
 8002d56:	d901      	bls.n	8002d5c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e1ac      	b.n	80030b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002d5c:	f7ff fc47 	bl	80025ee <LL_RCC_LSI2_IsReady>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1f1      	bne.n	8002d4a <HAL_RCC_OscConfig+0x36e>
 8002d66:	e027      	b.n	8002db8 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002d68:	f7ff fc30 	bl	80025cc <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d6c:	f7fe febc 	bl	8001ae8 <HAL_GetTick>
 8002d70:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002d72:	e008      	b.n	8002d86 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002d74:	f7fe feb8 	bl	8001ae8 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b03      	cmp	r3, #3
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e197      	b.n	80030b6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002d86:	f7ff fc32 	bl	80025ee <LL_RCC_LSI2_IsReady>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1f1      	bne.n	8002d74 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002d90:	f7ff fbe8 	bl	8002564 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d94:	f7fe fea8 	bl	8001ae8 <HAL_GetTick>
 8002d98:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002d9a:	e008      	b.n	8002dae <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002d9c:	f7fe fea4 	bl	8001ae8 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e183      	b.n	80030b6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002dae:	f7ff fbea 	bl	8002586 <LL_RCC_LSI1_IsReady>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d1f1      	bne.n	8002d9c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0304 	and.w	r3, r3, #4
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d05b      	beq.n	8002e7c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dc4:	4ba7      	ldr	r3, [pc, #668]	; (8003064 <HAL_RCC_OscConfig+0x688>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d114      	bne.n	8002dfa <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002dd0:	f7ff fa88 	bl	80022e4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dd4:	f7fe fe88 	bl	8001ae8 <HAL_GetTick>
 8002dd8:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dda:	e008      	b.n	8002dee <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ddc:	f7fe fe84 	bl	8001ae8 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e163      	b.n	80030b6 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dee:	4b9d      	ldr	r3, [pc, #628]	; (8003064 <HAL_RCC_OscConfig+0x688>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d0f0      	beq.n	8002ddc <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d102      	bne.n	8002e08 <HAL_RCC_OscConfig+0x42c>
 8002e02:	f7ff fb48 	bl	8002496 <LL_RCC_LSE_Enable>
 8002e06:	e00c      	b.n	8002e22 <HAL_RCC_OscConfig+0x446>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	2b05      	cmp	r3, #5
 8002e0e:	d104      	bne.n	8002e1a <HAL_RCC_OscConfig+0x43e>
 8002e10:	f7ff fb63 	bl	80024da <LL_RCC_LSE_EnableBypass>
 8002e14:	f7ff fb3f 	bl	8002496 <LL_RCC_LSE_Enable>
 8002e18:	e003      	b.n	8002e22 <HAL_RCC_OscConfig+0x446>
 8002e1a:	f7ff fb4d 	bl	80024b8 <LL_RCC_LSE_Disable>
 8002e1e:	f7ff fb6d 	bl	80024fc <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d014      	beq.n	8002e54 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e2a:	f7fe fe5d 	bl	8001ae8 <HAL_GetTick>
 8002e2e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002e30:	e00a      	b.n	8002e48 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e32:	f7fe fe59 	bl	8001ae8 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d901      	bls.n	8002e48 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e136      	b.n	80030b6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002e48:	f7ff fb69 	bl	800251e <LL_RCC_LSE_IsReady>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d0ef      	beq.n	8002e32 <HAL_RCC_OscConfig+0x456>
 8002e52:	e013      	b.n	8002e7c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e54:	f7fe fe48 	bl	8001ae8 <HAL_GetTick>
 8002e58:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002e5a:	e00a      	b.n	8002e72 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e5c:	f7fe fe44 	bl	8001ae8 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e121      	b.n	80030b6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002e72:	f7ff fb54 	bl	800251e <LL_RCC_LSE_IsReady>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d1ef      	bne.n	8002e5c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d02c      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d014      	beq.n	8002eba <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e90:	f7ff facd 	bl	800242e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e94:	f7fe fe28 	bl	8001ae8 <HAL_GetTick>
 8002e98:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002e9a:	e008      	b.n	8002eae <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e9c:	f7fe fe24 	bl	8001ae8 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e103      	b.n	80030b6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002eae:	f7ff fae0 	bl	8002472 <LL_RCC_HSI48_IsReady>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d0f1      	beq.n	8002e9c <HAL_RCC_OscConfig+0x4c0>
 8002eb8:	e013      	b.n	8002ee2 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002eba:	f7ff fac9 	bl	8002450 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ebe:	f7fe fe13 	bl	8001ae8 <HAL_GetTick>
 8002ec2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002ec4:	e008      	b.n	8002ed8 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ec6:	f7fe fe0f 	bl	8001ae8 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d901      	bls.n	8002ed8 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e0ee      	b.n	80030b6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002ed8:	f7ff facb 	bl	8002472 <LL_RCC_HSI48_IsReady>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1f1      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f000 80e4 	beq.w	80030b4 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002eec:	f7ff fc29 	bl	8002742 <LL_RCC_GetSysClkSource>
 8002ef0:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002ef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	f040 80b4 	bne.w	800306c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f003 0203 	and.w	r2, r3, #3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d123      	bne.n	8002f5a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d11c      	bne.n	8002f5a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	0a1b      	lsrs	r3, r3, #8
 8002f24:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d114      	bne.n	8002f5a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d10d      	bne.n	8002f5a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d106      	bne.n	8002f5a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d05d      	beq.n	8003016 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	2b0c      	cmp	r3, #12
 8002f5e:	d058      	beq.n	8003012 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e0a1      	b.n	80030b6 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002f72:	f7ff fc84 	bl	800287e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f76:	f7fe fdb7 	bl	8001ae8 <HAL_GetTick>
 8002f7a:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f7c:	e008      	b.n	8002f90 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f7e:	f7fe fdb3 	bl	8001ae8 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d901      	bls.n	8002f90 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e092      	b.n	80030b6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1ef      	bne.n	8002f7e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fa2:	68da      	ldr	r2, [r3, #12]
 8002fa4:	4b30      	ldr	r3, [pc, #192]	; (8003068 <HAL_RCC_OscConfig+0x68c>)
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002fb0:	4311      	orrs	r1, r2
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002fb6:	0212      	lsls	r2, r2, #8
 8002fb8:	4311      	orrs	r1, r2
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002fbe:	4311      	orrs	r1, r2
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002fc4:	4311      	orrs	r1, r2
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002fd4:	f7ff fc44 	bl	8002860 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fe2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fe6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002fe8:	f7fe fd7e 	bl	8001ae8 <HAL_GetTick>
 8002fec:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fee:	e008      	b.n	8003002 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ff0:	f7fe fd7a 	bl	8001ae8 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e059      	b.n	80030b6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003002:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d0ef      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003010:	e050      	b.n	80030b4 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e04f      	b.n	80030b6 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003016:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d147      	bne.n	80030b4 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003024:	f7ff fc1c 	bl	8002860 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003028:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003032:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003036:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003038:	f7fe fd56 	bl	8001ae8 <HAL_GetTick>
 800303c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003040:	f7fe fd52 	bl	8001ae8 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e031      	b.n	80030b6 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003052:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d0ef      	beq.n	8003040 <HAL_RCC_OscConfig+0x664>
 8003060:	e028      	b.n	80030b4 <HAL_RCC_OscConfig+0x6d8>
 8003062:	bf00      	nop
 8003064:	58000400 	.word	0x58000400
 8003068:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	2b0c      	cmp	r3, #12
 8003070:	d01e      	beq.n	80030b0 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003072:	f7ff fc04 	bl	800287e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003076:	f7fe fd37 	bl	8001ae8 <HAL_GetTick>
 800307a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800307c:	e008      	b.n	8003090 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800307e:	f7fe fd33 	bl	8001ae8 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	2b02      	cmp	r3, #2
 800308a:	d901      	bls.n	8003090 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e012      	b.n	80030b6 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003090:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1ef      	bne.n	800307e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800309e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030a2:	68da      	ldr	r2, [r3, #12]
 80030a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030a8:	4b05      	ldr	r3, [pc, #20]	; (80030c0 <HAL_RCC_OscConfig+0x6e4>)
 80030aa:	4013      	ands	r3, r2
 80030ac:	60cb      	str	r3, [r1, #12]
 80030ae:	e001      	b.n	80030b4 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e000      	b.n	80030b6 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3734      	adds	r7, #52	; 0x34
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd90      	pop	{r4, r7, pc}
 80030be:	bf00      	nop
 80030c0:	eefefffc 	.word	0xeefefffc

080030c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d101      	bne.n	80030d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e12d      	b.n	8003334 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030d8:	4b98      	ldr	r3, [pc, #608]	; (800333c <HAL_RCC_ClockConfig+0x278>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0307 	and.w	r3, r3, #7
 80030e0:	683a      	ldr	r2, [r7, #0]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d91b      	bls.n	800311e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030e6:	4b95      	ldr	r3, [pc, #596]	; (800333c <HAL_RCC_ClockConfig+0x278>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f023 0207 	bic.w	r2, r3, #7
 80030ee:	4993      	ldr	r1, [pc, #588]	; (800333c <HAL_RCC_ClockConfig+0x278>)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030f6:	f7fe fcf7 	bl	8001ae8 <HAL_GetTick>
 80030fa:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030fc:	e008      	b.n	8003110 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80030fe:	f7fe fcf3 	bl	8001ae8 <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	2b02      	cmp	r3, #2
 800310a:	d901      	bls.n	8003110 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e111      	b.n	8003334 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003110:	4b8a      	ldr	r3, [pc, #552]	; (800333c <HAL_RCC_ClockConfig+0x278>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0307 	and.w	r3, r3, #7
 8003118:	683a      	ldr	r2, [r7, #0]
 800311a:	429a      	cmp	r2, r3
 800311c:	d1ef      	bne.n	80030fe <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d016      	beq.n	8003158 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	4618      	mov	r0, r3
 8003130:	f7ff fb13 	bl	800275a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003134:	f7fe fcd8 	bl	8001ae8 <HAL_GetTick>
 8003138:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800313a:	e008      	b.n	800314e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800313c:	f7fe fcd4 	bl	8001ae8 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b02      	cmp	r3, #2
 8003148:	d901      	bls.n	800314e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e0f2      	b.n	8003334 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800314e:	f7ff fbe8 	bl	8002922 <LL_RCC_IsActiveFlag_HPRE>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d0f1      	beq.n	800313c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0320 	and.w	r3, r3, #32
 8003160:	2b00      	cmp	r3, #0
 8003162:	d016      	beq.n	8003192 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	695b      	ldr	r3, [r3, #20]
 8003168:	4618      	mov	r0, r3
 800316a:	f7ff fb0a 	bl	8002782 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800316e:	f7fe fcbb 	bl	8001ae8 <HAL_GetTick>
 8003172:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003174:	e008      	b.n	8003188 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003176:	f7fe fcb7 	bl	8001ae8 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	2b02      	cmp	r3, #2
 8003182:	d901      	bls.n	8003188 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e0d5      	b.n	8003334 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003188:	f7ff fbdd 	bl	8002946 <LL_RCC_IsActiveFlag_C2HPRE>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d0f1      	beq.n	8003176 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800319a:	2b00      	cmp	r3, #0
 800319c:	d016      	beq.n	80031cc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7ff fb03 	bl	80027ae <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80031a8:	f7fe fc9e 	bl	8001ae8 <HAL_GetTick>
 80031ac:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80031ae:	e008      	b.n	80031c2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80031b0:	f7fe fc9a 	bl	8001ae8 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e0b8      	b.n	8003334 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80031c2:	f7ff fbd3 	bl	800296c <LL_RCC_IsActiveFlag_SHDHPRE>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d0f1      	beq.n	80031b0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0304 	and.w	r3, r3, #4
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d016      	beq.n	8003206 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff fafd 	bl	80027dc <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80031e2:	f7fe fc81 	bl	8001ae8 <HAL_GetTick>
 80031e6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80031e8:	e008      	b.n	80031fc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80031ea:	f7fe fc7d 	bl	8001ae8 <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d901      	bls.n	80031fc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e09b      	b.n	8003334 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80031fc:	f7ff fbc9 	bl	8002992 <LL_RCC_IsActiveFlag_PPRE1>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d0f1      	beq.n	80031ea <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0308 	and.w	r3, r3, #8
 800320e:	2b00      	cmp	r3, #0
 8003210:	d017      	beq.n	8003242 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	00db      	lsls	r3, r3, #3
 8003218:	4618      	mov	r0, r3
 800321a:	f7ff faf3 	bl	8002804 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800321e:	f7fe fc63 	bl	8001ae8 <HAL_GetTick>
 8003222:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003224:	e008      	b.n	8003238 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003226:	f7fe fc5f 	bl	8001ae8 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	2b02      	cmp	r3, #2
 8003232:	d901      	bls.n	8003238 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e07d      	b.n	8003334 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003238:	f7ff fbbd 	bl	80029b6 <LL_RCC_IsActiveFlag_PPRE2>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d0f1      	beq.n	8003226 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	2b00      	cmp	r3, #0
 800324c:	d043      	beq.n	80032d6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	2b02      	cmp	r3, #2
 8003254:	d106      	bne.n	8003264 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003256:	f7ff f893 	bl	8002380 <LL_RCC_HSE_IsReady>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d11e      	bne.n	800329e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e067      	b.n	8003334 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	2b03      	cmp	r3, #3
 800326a:	d106      	bne.n	800327a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800326c:	f7ff fb16 	bl	800289c <LL_RCC_PLL_IsReady>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d113      	bne.n	800329e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e05c      	b.n	8003334 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d106      	bne.n	8003290 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003282:	f7ff f9fb 	bl	800267c <LL_RCC_MSI_IsReady>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d108      	bne.n	800329e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e051      	b.n	8003334 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003290:	f7ff f8a6 	bl	80023e0 <LL_RCC_HSI_IsReady>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e04a      	b.n	8003334 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7ff fa39 	bl	800271a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032a8:	f7fe fc1e 	bl	8001ae8 <HAL_GetTick>
 80032ac:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ae:	e00a      	b.n	80032c6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032b0:	f7fe fc1a 	bl	8001ae8 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80032be:	4293      	cmp	r3, r2
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e036      	b.n	8003334 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032c6:	f7ff fa3c 	bl	8002742 <LL_RCC_GetSysClkSource>
 80032ca:	4602      	mov	r2, r0
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d1ec      	bne.n	80032b0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032d6:	4b19      	ldr	r3, [pc, #100]	; (800333c <HAL_RCC_ClockConfig+0x278>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0307 	and.w	r3, r3, #7
 80032de:	683a      	ldr	r2, [r7, #0]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d21b      	bcs.n	800331c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032e4:	4b15      	ldr	r3, [pc, #84]	; (800333c <HAL_RCC_ClockConfig+0x278>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f023 0207 	bic.w	r2, r3, #7
 80032ec:	4913      	ldr	r1, [pc, #76]	; (800333c <HAL_RCC_ClockConfig+0x278>)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032f4:	f7fe fbf8 	bl	8001ae8 <HAL_GetTick>
 80032f8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032fa:	e008      	b.n	800330e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80032fc:	f7fe fbf4 	bl	8001ae8 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d901      	bls.n	800330e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e012      	b.n	8003334 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800330e:	4b0b      	ldr	r3, [pc, #44]	; (800333c <HAL_RCC_ClockConfig+0x278>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0307 	and.w	r3, r3, #7
 8003316:	683a      	ldr	r2, [r7, #0]
 8003318:	429a      	cmp	r2, r3
 800331a:	d1ef      	bne.n	80032fc <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800331c:	f000 f87e 	bl	800341c <HAL_RCC_GetHCLKFreq>
 8003320:	4603      	mov	r3, r0
 8003322:	4a07      	ldr	r2, [pc, #28]	; (8003340 <HAL_RCC_ClockConfig+0x27c>)
 8003324:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8003326:	f7fe fbeb 	bl	8001b00 <HAL_GetTickPrio>
 800332a:	4603      	mov	r3, r0
 800332c:	4618      	mov	r0, r3
 800332e:	f7fe fb8d 	bl	8001a4c <HAL_InitTick>
 8003332:	4603      	mov	r3, r0
}
 8003334:	4618      	mov	r0, r3
 8003336:	3710      	adds	r7, #16
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	58004000 	.word	0x58004000
 8003340:	20000008 	.word	0x20000008

08003344 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003344:	b590      	push	{r4, r7, lr}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800334a:	f7ff f9fa 	bl	8002742 <LL_RCC_GetSysClkSource>
 800334e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d10a      	bne.n	800336c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003356:	f7ff f9b6 	bl	80026c6 <LL_RCC_MSI_GetRange>
 800335a:	4603      	mov	r3, r0
 800335c:	091b      	lsrs	r3, r3, #4
 800335e:	f003 030f 	and.w	r3, r3, #15
 8003362:	4a2b      	ldr	r2, [pc, #172]	; (8003410 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003368:	60fb      	str	r3, [r7, #12]
 800336a:	e04b      	b.n	8003404 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b04      	cmp	r3, #4
 8003370:	d102      	bne.n	8003378 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003372:	4b28      	ldr	r3, [pc, #160]	; (8003414 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003374:	60fb      	str	r3, [r7, #12]
 8003376:	e045      	b.n	8003404 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b08      	cmp	r3, #8
 800337c:	d10a      	bne.n	8003394 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800337e:	f7fe ffcf 	bl	8002320 <LL_RCC_HSE_IsEnabledDiv2>
 8003382:	4603      	mov	r3, r0
 8003384:	2b01      	cmp	r3, #1
 8003386:	d102      	bne.n	800338e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003388:	4b22      	ldr	r3, [pc, #136]	; (8003414 <HAL_RCC_GetSysClockFreq+0xd0>)
 800338a:	60fb      	str	r3, [r7, #12]
 800338c:	e03a      	b.n	8003404 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800338e:	4b22      	ldr	r3, [pc, #136]	; (8003418 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003390:	60fb      	str	r3, [r7, #12]
 8003392:	e037      	b.n	8003404 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003394:	f7ff fab9 	bl	800290a <LL_RCC_PLL_GetMainSource>
 8003398:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	2b02      	cmp	r3, #2
 800339e:	d003      	beq.n	80033a8 <HAL_RCC_GetSysClockFreq+0x64>
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	2b03      	cmp	r3, #3
 80033a4:	d003      	beq.n	80033ae <HAL_RCC_GetSysClockFreq+0x6a>
 80033a6:	e00d      	b.n	80033c4 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80033a8:	4b1a      	ldr	r3, [pc, #104]	; (8003414 <HAL_RCC_GetSysClockFreq+0xd0>)
 80033aa:	60bb      	str	r3, [r7, #8]
        break;
 80033ac:	e015      	b.n	80033da <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80033ae:	f7fe ffb7 	bl	8002320 <LL_RCC_HSE_IsEnabledDiv2>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d102      	bne.n	80033be <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80033b8:	4b16      	ldr	r3, [pc, #88]	; (8003414 <HAL_RCC_GetSysClockFreq+0xd0>)
 80033ba:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80033bc:	e00d      	b.n	80033da <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80033be:	4b16      	ldr	r3, [pc, #88]	; (8003418 <HAL_RCC_GetSysClockFreq+0xd4>)
 80033c0:	60bb      	str	r3, [r7, #8]
        break;
 80033c2:	e00a      	b.n	80033da <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80033c4:	f7ff f97f 	bl	80026c6 <LL_RCC_MSI_GetRange>
 80033c8:	4603      	mov	r3, r0
 80033ca:	091b      	lsrs	r3, r3, #4
 80033cc:	f003 030f 	and.w	r3, r3, #15
 80033d0:	4a0f      	ldr	r2, [pc, #60]	; (8003410 <HAL_RCC_GetSysClockFreq+0xcc>)
 80033d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033d6:	60bb      	str	r3, [r7, #8]
        break;
 80033d8:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80033da:	f7ff fa71 	bl	80028c0 <LL_RCC_PLL_GetN>
 80033de:	4602      	mov	r2, r0
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	fb03 f402 	mul.w	r4, r3, r2
 80033e6:	f7ff fa84 	bl	80028f2 <LL_RCC_PLL_GetDivider>
 80033ea:	4603      	mov	r3, r0
 80033ec:	091b      	lsrs	r3, r3, #4
 80033ee:	3301      	adds	r3, #1
 80033f0:	fbb4 f4f3 	udiv	r4, r4, r3
 80033f4:	f7ff fa71 	bl	80028da <LL_RCC_PLL_GetR>
 80033f8:	4603      	mov	r3, r0
 80033fa:	0f5b      	lsrs	r3, r3, #29
 80033fc:	3301      	adds	r3, #1
 80033fe:	fbb4 f3f3 	udiv	r3, r4, r3
 8003402:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003404:	68fb      	ldr	r3, [r7, #12]
}
 8003406:	4618      	mov	r0, r3
 8003408:	3714      	adds	r7, #20
 800340a:	46bd      	mov	sp, r7
 800340c:	bd90      	pop	{r4, r7, pc}
 800340e:	bf00      	nop
 8003410:	08007720 	.word	0x08007720
 8003414:	00f42400 	.word	0x00f42400
 8003418:	01e84800 	.word	0x01e84800

0800341c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800341c:	b598      	push	{r3, r4, r7, lr}
 800341e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003420:	f7ff ff90 	bl	8003344 <HAL_RCC_GetSysClockFreq>
 8003424:	4604      	mov	r4, r0
 8003426:	f7ff fa01 	bl	800282c <LL_RCC_GetAHBPrescaler>
 800342a:	4603      	mov	r3, r0
 800342c:	091b      	lsrs	r3, r3, #4
 800342e:	f003 030f 	and.w	r3, r3, #15
 8003432:	4a03      	ldr	r2, [pc, #12]	; (8003440 <HAL_RCC_GetHCLKFreq+0x24>)
 8003434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003438:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800343c:	4618      	mov	r0, r3
 800343e:	bd98      	pop	{r3, r4, r7, pc}
 8003440:	080076e0 	.word	0x080076e0

08003444 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003444:	b590      	push	{r4, r7, lr}
 8003446:	b085      	sub	sp, #20
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2bb0      	cmp	r3, #176	; 0xb0
 8003450:	d903      	bls.n	800345a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003452:	4b15      	ldr	r3, [pc, #84]	; (80034a8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003456:	60fb      	str	r3, [r7, #12]
 8003458:	e007      	b.n	800346a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	091b      	lsrs	r3, r3, #4
 800345e:	f003 030f 	and.w	r3, r3, #15
 8003462:	4a11      	ldr	r2, [pc, #68]	; (80034a8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003468:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800346a:	f7ff f9eb 	bl	8002844 <LL_RCC_GetAHB4Prescaler>
 800346e:	4603      	mov	r3, r0
 8003470:	091b      	lsrs	r3, r3, #4
 8003472:	f003 030f 	and.w	r3, r3, #15
 8003476:	4a0d      	ldr	r2, [pc, #52]	; (80034ac <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003482:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	4a0a      	ldr	r2, [pc, #40]	; (80034b0 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003488:	fba2 2303 	umull	r2, r3, r2, r3
 800348c:	0c9c      	lsrs	r4, r3, #18
 800348e:	f7fe ff39 	bl	8002304 <HAL_PWREx_GetVoltageRange>
 8003492:	4603      	mov	r3, r0
 8003494:	4619      	mov	r1, r3
 8003496:	4620      	mov	r0, r4
 8003498:	f000 f80c 	bl	80034b4 <RCC_SetFlashLatency>
 800349c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3714      	adds	r7, #20
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd90      	pop	{r4, r7, pc}
 80034a6:	bf00      	nop
 80034a8:	08007720 	.word	0x08007720
 80034ac:	080076e0 	.word	0x080076e0
 80034b0:	431bde83 	.word	0x431bde83

080034b4 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80034b4:	b590      	push	{r4, r7, lr}
 80034b6:	b093      	sub	sp, #76	; 0x4c
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80034be:	4b37      	ldr	r3, [pc, #220]	; (800359c <RCC_SetFlashLatency+0xe8>)
 80034c0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80034c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80034ca:	4a35      	ldr	r2, [pc, #212]	; (80035a0 <RCC_SetFlashLatency+0xec>)
 80034cc:	f107 031c 	add.w	r3, r7, #28
 80034d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80034d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80034d6:	4b33      	ldr	r3, [pc, #204]	; (80035a4 <RCC_SetFlashLatency+0xf0>)
 80034d8:	f107 040c 	add.w	r4, r7, #12
 80034dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80034e2:	2300      	movs	r3, #0
 80034e4:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034ec:	d11a      	bne.n	8003524 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80034ee:	2300      	movs	r3, #0
 80034f0:	643b      	str	r3, [r7, #64]	; 0x40
 80034f2:	e013      	b.n	800351c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80034f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	3348      	adds	r3, #72	; 0x48
 80034fa:	443b      	add	r3, r7
 80034fc:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	429a      	cmp	r2, r3
 8003504:	d807      	bhi.n	8003516 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003506:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	3348      	adds	r3, #72	; 0x48
 800350c:	443b      	add	r3, r7
 800350e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003512:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003514:	e020      	b.n	8003558 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003516:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003518:	3301      	adds	r3, #1
 800351a:	643b      	str	r3, [r7, #64]	; 0x40
 800351c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800351e:	2b03      	cmp	r3, #3
 8003520:	d9e8      	bls.n	80034f4 <RCC_SetFlashLatency+0x40>
 8003522:	e019      	b.n	8003558 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003524:	2300      	movs	r3, #0
 8003526:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003528:	e013      	b.n	8003552 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800352a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	3348      	adds	r3, #72	; 0x48
 8003530:	443b      	add	r3, r7
 8003532:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	429a      	cmp	r2, r3
 800353a:	d807      	bhi.n	800354c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800353c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	3348      	adds	r3, #72	; 0x48
 8003542:	443b      	add	r3, r7
 8003544:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003548:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800354a:	e005      	b.n	8003558 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800354c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800354e:	3301      	adds	r3, #1
 8003550:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003552:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003554:	2b02      	cmp	r3, #2
 8003556:	d9e8      	bls.n	800352a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8003558:	4b13      	ldr	r3, [pc, #76]	; (80035a8 <RCC_SetFlashLatency+0xf4>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f023 0207 	bic.w	r2, r3, #7
 8003560:	4911      	ldr	r1, [pc, #68]	; (80035a8 <RCC_SetFlashLatency+0xf4>)
 8003562:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003564:	4313      	orrs	r3, r2
 8003566:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003568:	f7fe fabe 	bl	8001ae8 <HAL_GetTick>
 800356c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800356e:	e008      	b.n	8003582 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003570:	f7fe faba 	bl	8001ae8 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d901      	bls.n	8003582 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e007      	b.n	8003592 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003582:	4b09      	ldr	r3, [pc, #36]	; (80035a8 <RCC_SetFlashLatency+0xf4>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0307 	and.w	r3, r3, #7
 800358a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800358c:	429a      	cmp	r2, r3
 800358e:	d1ef      	bne.n	8003570 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	374c      	adds	r7, #76	; 0x4c
 8003596:	46bd      	mov	sp, r7
 8003598:	bd90      	pop	{r4, r7, pc}
 800359a:	bf00      	nop
 800359c:	0800753c 	.word	0x0800753c
 80035a0:	0800754c 	.word	0x0800754c
 80035a4:	08007558 	.word	0x08007558
 80035a8:	58004000 	.word	0x58004000

080035ac <LL_RCC_LSE_IsEnabled>:
{
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80035b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035b8:	f003 0301 	and.w	r3, r3, #1
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d101      	bne.n	80035c4 <LL_RCC_LSE_IsEnabled+0x18>
 80035c0:	2301      	movs	r3, #1
 80035c2:	e000      	b.n	80035c6 <LL_RCC_LSE_IsEnabled+0x1a>
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <LL_RCC_LSE_IsReady>:
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80035d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d101      	bne.n	80035e8 <LL_RCC_LSE_IsReady+0x18>
 80035e4:	2301      	movs	r3, #1
 80035e6:	e000      	b.n	80035ea <LL_RCC_LSE_IsReady+0x1a>
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <LL_RCC_SetRFWKPClockSource>:
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80035fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003600:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003604:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003608:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4313      	orrs	r3, r2
 8003610:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <LL_RCC_SetSMPSClockSource>:
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003628:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800362c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362e:	f023 0203 	bic.w	r2, r3, #3
 8003632:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4313      	orrs	r3, r2
 800363a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <LL_RCC_SetSMPSPrescaler>:
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003650:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003656:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800365a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4313      	orrs	r3, r2
 8003662:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003664:	bf00      	nop
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <LL_RCC_SetUSARTClockSource>:
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003678:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800367c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003680:	f023 0203 	bic.w	r2, r3, #3
 8003684:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4313      	orrs	r3, r2
 800368c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003690:	bf00      	nop
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <LL_RCC_SetLPUARTClockSource>:
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80036a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80036b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80036bc:	bf00      	nop
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <LL_RCC_SetI2CClockSource>:
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80036d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036d4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	091b      	lsrs	r3, r3, #4
 80036dc:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80036e0:	43db      	mvns	r3, r3
 80036e2:	401a      	ands	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	011b      	lsls	r3, r3, #4
 80036e8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80036ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036f0:	4313      	orrs	r3, r2
 80036f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <LL_RCC_SetLPTIMClockSource>:
{
 8003702:	b480      	push	{r7}
 8003704:	b083      	sub	sp, #12
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800370a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800370e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	0c1b      	lsrs	r3, r3, #16
 8003716:	041b      	lsls	r3, r3, #16
 8003718:	43db      	mvns	r3, r3
 800371a:	401a      	ands	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	041b      	lsls	r3, r3, #16
 8003720:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003724:	4313      	orrs	r3, r2
 8003726:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800372a:	bf00      	nop
 800372c:	370c      	adds	r7, #12
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr

08003736 <LL_RCC_SetSAIClockSource>:
{
 8003736:	b480      	push	{r7}
 8003738:	b083      	sub	sp, #12
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800373e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003746:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800374a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4313      	orrs	r3, r2
 8003752:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003756:	bf00      	nop
 8003758:	370c      	adds	r7, #12
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr

08003762 <LL_RCC_SetRNGClockSource>:
{
 8003762:	b480      	push	{r7}
 8003764:	b083      	sub	sp, #12
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800376a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800376e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003772:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003776:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4313      	orrs	r3, r2
 800377e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003782:	bf00      	nop
 8003784:	370c      	adds	r7, #12
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr

0800378e <LL_RCC_SetCLK48ClockSource>:
{
 800378e:	b480      	push	{r7}
 8003790:	b083      	sub	sp, #12
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003796:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800379a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800379e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80037ae:	bf00      	nop
 80037b0:	370c      	adds	r7, #12
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr

080037ba <LL_RCC_SetUSBClockSource>:
{
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b082      	sub	sp, #8
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f7ff ffe3 	bl	800378e <LL_RCC_SetCLK48ClockSource>
}
 80037c8:	bf00      	nop
 80037ca:	3708      	adds	r7, #8
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <LL_RCC_SetADCClockSource>:
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80037d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80037e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <LL_RCC_SetRTCClockSource>:
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003804:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800380c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003810:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4313      	orrs	r3, r2
 8003818:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <LL_RCC_GetRTCClockSource>:
{
 8003828:	b480      	push	{r7}
 800382a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800382c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003834:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003838:	4618      	mov	r0, r3
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr

08003842 <LL_RCC_ForceBackupDomainReset>:
{
 8003842:	b480      	push	{r7}
 8003844:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003846:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800384a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800384e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003852:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003856:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800385a:	bf00      	nop
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003864:	b480      	push	{r7}
 8003866:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003868:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800386c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003870:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003874:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003878:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800387c:	bf00      	nop
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr

08003886 <LL_RCC_PLLSAI1_Enable>:
{
 8003886:	b480      	push	{r7}
 8003888:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800388a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003894:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003898:	6013      	str	r3, [r2, #0]
}
 800389a:	bf00      	nop
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <LL_RCC_PLLSAI1_Disable>:
{
 80038a4:	b480      	push	{r7}
 80038a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80038a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80038b6:	6013      	str	r3, [r2, #0]
}
 80038b8:	bf00      	nop
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr

080038c2 <LL_RCC_PLLSAI1_IsReady>:
{
 80038c2:	b480      	push	{r7}
 80038c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80038c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038d4:	d101      	bne.n	80038da <LL_RCC_PLLSAI1_IsReady+0x18>
 80038d6:	2301      	movs	r3, #1
 80038d8:	e000      	b.n	80038dc <LL_RCC_PLLSAI1_IsReady+0x1a>
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b088      	sub	sp, #32
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80038ee:	2300      	movs	r3, #0
 80038f0:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80038f2:	2300      	movs	r3, #0
 80038f4:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d034      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003906:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800390a:	d021      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800390c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003910:	d81b      	bhi.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003912:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003916:	d01d      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003918:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800391c:	d815      	bhi.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x64>
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00b      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003922:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003926:	d110      	bne.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8003928:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003932:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003936:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003938:	e00d      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	3304      	adds	r3, #4
 800393e:	4618      	mov	r0, r3
 8003940:	f000 f947 	bl	8003bd2 <RCCEx_PLLSAI1_ConfigNP>
 8003944:	4603      	mov	r3, r0
 8003946:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003948:	e005      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	77fb      	strb	r3, [r7, #31]
        break;
 800394e:	e002      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003950:	bf00      	nop
 8003952:	e000      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003954:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003956:	7ffb      	ldrb	r3, [r7, #31]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d105      	bne.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003960:	4618      	mov	r0, r3
 8003962:	f7ff fee8 	bl	8003736 <LL_RCC_SetSAIClockSource>
 8003966:	e001      	b.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003968:	7ffb      	ldrb	r3, [r7, #31]
 800396a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003974:	2b00      	cmp	r3, #0
 8003976:	d046      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003978:	f7ff ff56 	bl	8003828 <LL_RCC_GetRTCClockSource>
 800397c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003982:	69ba      	ldr	r2, [r7, #24]
 8003984:	429a      	cmp	r2, r3
 8003986:	d03c      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003988:	f7fe fcac 	bl	80022e4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d105      	bne.n	800399e <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	4618      	mov	r0, r3
 8003998:	f7ff ff30 	bl	80037fc <LL_RCC_SetRTCClockSource>
 800399c:	e02e      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800399e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80039a8:	f7ff ff4b 	bl	8003842 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80039ac:	f7ff ff5a 	bl	8003864 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ba:	4313      	orrs	r3, r2
 80039bc:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80039be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80039c8:	f7ff fdf0 	bl	80035ac <LL_RCC_LSE_IsEnabled>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d114      	bne.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80039d2:	f7fe f889 	bl	8001ae8 <HAL_GetTick>
 80039d6:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80039d8:	e00b      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039da:	f7fe f885 	bl	8001ae8 <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d902      	bls.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	77fb      	strb	r3, [r7, #31]
              break;
 80039f0:	e004      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80039f2:	f7ff fded 	bl	80035d0 <LL_RCC_LSE_IsReady>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d1ee      	bne.n	80039da <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80039fc:	7ffb      	ldrb	r3, [r7, #31]
 80039fe:	77bb      	strb	r3, [r7, #30]
 8003a00:	e001      	b.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a02:	7ffb      	ldrb	r3, [r7, #31]
 8003a04:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d004      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7ff fe2a 	bl	8003670 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d004      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	69db      	ldr	r3, [r3, #28]
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7ff fe35 	bl	800369c <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0310 	and.w	r3, r3, #16
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d004      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7ff fe5d 	bl	8003702 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0320 	and.w	r3, r3, #32
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d004      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f7ff fe52 	bl	8003702 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0304 	and.w	r3, r3, #4
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d004      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7ff fe2a 	bl	80036c8 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0308 	and.w	r3, r3, #8
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d004      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7ff fe1f 	bl	80036c8 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d022      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7ff fe8d 	bl	80037ba <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aa4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003aa8:	d107      	bne.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8003aaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ab4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ab8:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003abe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ac2:	d10b      	bne.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	3304      	adds	r3, #4
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f000 f8dd 	bl	8003c88 <RCCEx_PLLSAI1_ConfigNQ>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003ad2:	7ffb      	ldrb	r3, [r7, #31]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d001      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8003ad8:	7ffb      	ldrb	r3, [r7, #31]
 8003ada:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d02b      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003af0:	d008      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003afa:	d003      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d105      	bne.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7ff fe2a 	bl	8003762 <LL_RCC_SetRNGClockSource>
 8003b0e:	e00a      	b.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b18:	60fb      	str	r3, [r7, #12]
 8003b1a:	2000      	movs	r0, #0
 8003b1c:	f7ff fe21 	bl	8003762 <LL_RCC_SetRNGClockSource>
 8003b20:	68f8      	ldr	r0, [r7, #12]
 8003b22:	f7ff fe34 	bl	800378e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b2a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003b2e:	d107      	bne.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003b30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b3e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d022      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b50:	4618      	mov	r0, r3
 8003b52:	f7ff fe3d 	bl	80037d0 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b5e:	d107      	bne.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003b60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b6e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b78:	d10b      	bne.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	3304      	adds	r3, #4
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f000 f8dd 	bl	8003d3e <RCCEx_PLLSAI1_ConfigNR>
 8003b84:	4603      	mov	r3, r0
 8003b86:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003b88:	7ffb      	ldrb	r3, [r7, #31]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d001      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8003b8e:	7ffb      	ldrb	r3, [r7, #31]
 8003b90:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d004      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7ff fd26 	bl	80035f4 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d009      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f7ff fd45 	bl	8003648 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7ff fd2c 	bl	8003620 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8003bc8:	7fbb      	ldrb	r3, [r7, #30]
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3720      	adds	r7, #32
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b084      	sub	sp, #16
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003bde:	f7ff fe61 	bl	80038a4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003be2:	f7fd ff81 	bl	8001ae8 <HAL_GetTick>
 8003be6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003be8:	e009      	b.n	8003bfe <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003bea:	f7fd ff7d 	bl	8001ae8 <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d902      	bls.n	8003bfe <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	73fb      	strb	r3, [r7, #15]
      break;
 8003bfc:	e004      	b.n	8003c08 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003bfe:	f7ff fe60 	bl	80038c2 <LL_RCC_PLLSAI1_IsReady>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d1f0      	bne.n	8003bea <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8003c08:	7bfb      	ldrb	r3, [r7, #15]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d137      	bne.n	8003c7e <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003c0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	021b      	lsls	r3, r3, #8
 8003c1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c22:	4313      	orrs	r3, r2
 8003c24:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8003c26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003c3c:	f7ff fe23 	bl	8003886 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c40:	f7fd ff52 	bl	8001ae8 <HAL_GetTick>
 8003c44:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003c46:	e009      	b.n	8003c5c <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c48:	f7fd ff4e 	bl	8001ae8 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d902      	bls.n	8003c5c <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	73fb      	strb	r3, [r7, #15]
        break;
 8003c5a:	e004      	b.n	8003c66 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003c5c:	f7ff fe31 	bl	80038c2 <LL_RCC_PLLSAI1_IsReady>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d1f0      	bne.n	8003c48 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8003c66:	7bfb      	ldrb	r3, [r7, #15]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d108      	bne.n	8003c7e <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003c6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c70:	691a      	ldr	r2, [r3, #16]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3710      	adds	r7, #16
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c90:	2300      	movs	r3, #0
 8003c92:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003c94:	f7ff fe06 	bl	80038a4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003c98:	f7fd ff26 	bl	8001ae8 <HAL_GetTick>
 8003c9c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003c9e:	e009      	b.n	8003cb4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ca0:	f7fd ff22 	bl	8001ae8 <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d902      	bls.n	8003cb4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	73fb      	strb	r3, [r7, #15]
      break;
 8003cb2:	e004      	b.n	8003cbe <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003cb4:	f7ff fe05 	bl	80038c2 <LL_RCC_PLLSAI1_IsReady>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1f0      	bne.n	8003ca0 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8003cbe:	7bfb      	ldrb	r3, [r7, #15]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d137      	bne.n	8003d34 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003cc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	021b      	lsls	r3, r3, #8
 8003cd4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8003cdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003cf2:	f7ff fdc8 	bl	8003886 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cf6:	f7fd fef7 	bl	8001ae8 <HAL_GetTick>
 8003cfa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003cfc:	e009      	b.n	8003d12 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003cfe:	f7fd fef3 	bl	8001ae8 <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d902      	bls.n	8003d12 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	73fb      	strb	r3, [r7, #15]
        break;
 8003d10:	e004      	b.n	8003d1c <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003d12:	f7ff fdd6 	bl	80038c2 <LL_RCC_PLLSAI1_IsReady>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d1f0      	bne.n	8003cfe <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8003d1c:	7bfb      	ldrb	r3, [r7, #15]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d108      	bne.n	8003d34 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003d22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d26:	691a      	ldr	r2, [r3, #16]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d30:	4313      	orrs	r3, r2
 8003d32:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3710      	adds	r7, #16
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b084      	sub	sp, #16
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d46:	2300      	movs	r3, #0
 8003d48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003d4a:	f7ff fdab 	bl	80038a4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003d4e:	f7fd fecb 	bl	8001ae8 <HAL_GetTick>
 8003d52:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003d54:	e009      	b.n	8003d6a <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d56:	f7fd fec7 	bl	8001ae8 <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d902      	bls.n	8003d6a <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	73fb      	strb	r3, [r7, #15]
      break;
 8003d68:	e004      	b.n	8003d74 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003d6a:	f7ff fdaa 	bl	80038c2 <LL_RCC_PLLSAI1_IsReady>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d1f0      	bne.n	8003d56 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003d74:	7bfb      	ldrb	r3, [r7, #15]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d137      	bne.n	8003dea <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003d7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	021b      	lsls	r3, r3, #8
 8003d8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003d92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d96:	691b      	ldr	r3, [r3, #16]
 8003d98:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003da4:	4313      	orrs	r3, r2
 8003da6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003da8:	f7ff fd6d 	bl	8003886 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dac:	f7fd fe9c 	bl	8001ae8 <HAL_GetTick>
 8003db0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003db2:	e009      	b.n	8003dc8 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003db4:	f7fd fe98 	bl	8001ae8 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d902      	bls.n	8003dc8 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	73fb      	strb	r3, [r7, #15]
        break;
 8003dc6:	e004      	b.n	8003dd2 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003dc8:	f7ff fd7b 	bl	80038c2 <LL_RCC_PLLSAI1_IsReady>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d1f0      	bne.n	8003db4 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003dd2:	7bfb      	ldrb	r3, [r7, #15]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d108      	bne.n	8003dea <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003dd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ddc:	691a      	ldr	r2, [r3, #16]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003de6:	4313      	orrs	r3, r2
 8003de8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3710      	adds	r7, #16
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d101      	bne.n	8003e06 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e09f      	b.n	8003f46 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d106      	bne.n	8003e20 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f7fd fcf4 	bl	8001808 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2202      	movs	r2, #2
 8003e24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003e28:	4b49      	ldr	r3, [pc, #292]	; (8003f50 <HAL_RTC_Init+0x15c>)
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	f003 0310 	and.w	r3, r3, #16
 8003e30:	2b10      	cmp	r3, #16
 8003e32:	d07e      	beq.n	8003f32 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	22ca      	movs	r2, #202	; 0xca
 8003e3a:	625a      	str	r2, [r3, #36]	; 0x24
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2253      	movs	r2, #83	; 0x53
 8003e42:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f000 f8ab 	bl	8003fa0 <RTC_EnterInitMode>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d00a      	beq.n	8003e66 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	22ff      	movs	r2, #255	; 0xff
 8003e56:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2204      	movs	r2, #4
 8003e5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	73fb      	strb	r3, [r7, #15]
 8003e64:	e067      	b.n	8003f36 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	6812      	ldr	r2, [r2, #0]
 8003e70:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003e74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e78:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	6899      	ldr	r1, [r3, #8]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685a      	ldr	r2, [r3, #4]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	431a      	orrs	r2, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	431a      	orrs	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	430a      	orrs	r2, r1
 8003e96:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	68d2      	ldr	r2, [r2, #12]
 8003ea0:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	6919      	ldr	r1, [r3, #16]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	041a      	lsls	r2, r3, #16
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68da      	ldr	r2, [r3, #12]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ec4:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 0203 	bic.w	r2, r2, #3
 8003ed4:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	69da      	ldr	r2, [r3, #28]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	695b      	ldr	r3, [r3, #20]
 8003ee4:	431a      	orrs	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	430a      	orrs	r2, r1
 8003eec:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f003 0320 	and.w	r3, r3, #32
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d113      	bne.n	8003f24 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f000 f829 	bl	8003f54 <HAL_RTC_WaitForSynchro>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d00d      	beq.n	8003f24 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	22ff      	movs	r2, #255	; 0xff
 8003f0e:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2204      	movs	r2, #4
 8003f14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e010      	b.n	8003f46 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	22ff      	movs	r2, #255	; 0xff
 8003f2a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	73fb      	strb	r3, [r7, #15]
 8003f30:	e001      	b.n	8003f36 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8003f32:	2300      	movs	r3, #0
 8003f34:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003f36:	7bfb      	ldrb	r3, [r7, #15]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d103      	bne.n	8003f44 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8003f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3710      	adds	r7, #16
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	40002800 	.word	0x40002800

08003f54 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68da      	ldr	r2, [r3, #12]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f6a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003f6c:	f7fd fdbc 	bl	8001ae8 <HAL_GetTick>
 8003f70:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003f72:	e009      	b.n	8003f88 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003f74:	f7fd fdb8 	bl	8001ae8 <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f82:	d901      	bls.n	8003f88 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e007      	b.n	8003f98 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	f003 0320 	and.w	r3, r3, #32
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d0ee      	beq.n	8003f74 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3710      	adds	r7, #16
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d119      	bne.n	8003fea <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f04f 32ff 	mov.w	r2, #4294967295
 8003fbe:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003fc0:	f7fd fd92 	bl	8001ae8 <HAL_GetTick>
 8003fc4:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003fc6:	e009      	b.n	8003fdc <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003fc8:	f7fd fd8e 	bl	8001ae8 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003fd6:	d901      	bls.n	8003fdc <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e007      	b.n	8003fec <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d0ee      	beq.n	8003fc8 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3710      	adds	r7, #16
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b086      	sub	sp, #24
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004006:	2b01      	cmp	r3, #1
 8004008:	d101      	bne.n	800400e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800400a:	2302      	movs	r3, #2
 800400c:	e0a8      	b.n	8004160 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2202      	movs	r2, #2
 800401a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	22ca      	movs	r2, #202	; 0xca
 8004024:	625a      	str	r2, [r3, #36]	; 0x24
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2253      	movs	r2, #83	; 0x53
 800402c:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004038:	2b00      	cmp	r3, #0
 800403a:	d020      	beq.n	800407e <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 800403c:	f7fd fd54 	bl	8001ae8 <HAL_GetTick>
 8004040:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8004042:	e015      	b.n	8004070 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004044:	f7fd fd50 	bl	8001ae8 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004052:	d90d      	bls.n	8004070 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	22ff      	movs	r2, #255	; 0xff
 800405a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2203      	movs	r2, #3
 8004060:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e077      	b.n	8004160 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	f003 0304 	and.w	r3, r3, #4
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1e2      	bne.n	8004044 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	689a      	ldr	r2, [r3, #8]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800408c:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	b2da      	uxtb	r2, r3
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800409e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80040a0:	f7fd fd22 	bl	8001ae8 <HAL_GetTick>
 80040a4:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80040a6:	e015      	b.n	80040d4 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80040a8:	f7fd fd1e 	bl	8001ae8 <HAL_GetTick>
 80040ac:	4602      	mov	r2, r0
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040b6:	d90d      	bls.n	80040d4 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	22ff      	movs	r2, #255	; 0xff
 80040be:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2203      	movs	r2, #3
 80040c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e045      	b.n	8004160 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	f003 0304 	and.w	r3, r3, #4
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d0e2      	beq.n	80040a8 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68ba      	ldr	r2, [r7, #8]
 80040e8:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	689a      	ldr	r2, [r3, #8]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f022 0207 	bic.w	r2, r2, #7
 80040f8:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	6899      	ldr	r1, [r3, #8]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	430a      	orrs	r2, r1
 8004108:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800410a:	4b17      	ldr	r3, [pc, #92]	; (8004168 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800410c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004110:	4a15      	ldr	r2, [pc, #84]	; (8004168 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8004112:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004116:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800411a:	4b13      	ldr	r3, [pc, #76]	; (8004168 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a12      	ldr	r2, [pc, #72]	; (8004168 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8004120:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004124:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	689a      	ldr	r2, [r3, #8]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004134:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	689a      	ldr	r2, [r3, #8]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004144:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	22ff      	movs	r2, #255	; 0xff
 800414c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2201      	movs	r2, #1
 8004152:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800415e:	2300      	movs	r3, #0
}
 8004160:	4618      	mov	r0, r3
 8004162:	3718      	adds	r7, #24
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}
 8004168:	58000800 	.word	0x58000800

0800416c <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b088      	sub	sp, #32
 8004170:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8004172:	2300      	movs	r3, #0
 8004174:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004176:	f107 0308 	add.w	r3, r7, #8
 800417a:	2218      	movs	r2, #24
 800417c:	2100      	movs	r1, #0
 800417e:	4618      	mov	r0, r3
 8004180:	f001 f8d8 	bl	8005334 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004184:	233f      	movs	r3, #63	; 0x3f
 8004186:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8004188:	2381      	movs	r3, #129	; 0x81
 800418a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800418c:	1dfb      	adds	r3, r7, #7
 800418e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8004190:	2301      	movs	r3, #1
 8004192:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004194:	f107 0308 	add.w	r3, r7, #8
 8004198:	2100      	movs	r1, #0
 800419a:	4618      	mov	r0, r3
 800419c:	f001 fb54 	bl	8005848 <hci_send_req>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	da01      	bge.n	80041aa <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 80041a6:	23ff      	movs	r3, #255	; 0xff
 80041a8:	e000      	b.n	80041ac <aci_gap_set_non_discoverable+0x40>
  return status;
 80041aa:	79fb      	ldrb	r3, [r7, #7]
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3720      	adds	r7, #32
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 80041b4:	b5b0      	push	{r4, r5, r7, lr}
 80041b6:	b0ce      	sub	sp, #312	; 0x138
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	4605      	mov	r5, r0
 80041bc:	460c      	mov	r4, r1
 80041be:	4610      	mov	r0, r2
 80041c0:	4619      	mov	r1, r3
 80041c2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80041c6:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80041ca:	462a      	mov	r2, r5
 80041cc:	701a      	strb	r2, [r3, #0]
 80041ce:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80041d2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80041d6:	4622      	mov	r2, r4
 80041d8:	801a      	strh	r2, [r3, #0]
 80041da:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80041de:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 80041e2:	4602      	mov	r2, r0
 80041e4:	801a      	strh	r2, [r3, #0]
 80041e6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80041ea:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80041ee:	460a      	mov	r2, r1
 80041f0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 80041f2:	f107 0310 	add.w	r3, r7, #16
 80041f6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 80041fa:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80041fe:	3308      	adds	r3, #8
 8004200:	f107 0210 	add.w	r2, r7, #16
 8004204:	4413      	add	r3, r2
 8004206:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800420a:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800420e:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8004212:	4413      	add	r3, r2
 8004214:	3309      	adds	r3, #9
 8004216:	f107 0210 	add.w	r2, r7, #16
 800421a:	4413      	add	r3, r2
 800421c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004220:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004224:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8004228:	2200      	movs	r2, #0
 800422a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800422c:	2300      	movs	r3, #0
 800422e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8004232:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004236:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800423a:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800423e:	7812      	ldrb	r2, [r2, #0]
 8004240:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004242:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004246:	3301      	adds	r3, #1
 8004248:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800424c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004250:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8004254:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8004258:	8812      	ldrh	r2, [r2, #0]
 800425a:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800425e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004262:	3302      	adds	r3, #2
 8004264:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8004268:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800426c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8004270:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 8004274:	8812      	ldrh	r2, [r2, #0]
 8004276:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800427a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800427e:	3302      	adds	r3, #2
 8004280:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8004284:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004288:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800428c:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8004290:	7812      	ldrb	r2, [r2, #0]
 8004292:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8004294:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004298:	3301      	adds	r3, #1
 800429a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800429e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80042a2:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80042a6:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80042a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80042ac:	3301      	adds	r3, #1
 80042ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 80042b2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80042b6:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80042ba:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 80042bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80042c0:	3301      	adds	r3, #1
 80042c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 80042c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80042ca:	3308      	adds	r3, #8
 80042cc:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80042d0:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 80042d4:	4618      	mov	r0, r3
 80042d6:	f001 f81d 	bl	8005314 <Osal_MemCpy>
    index_input += Local_Name_Length;
 80042da:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80042de:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80042e2:	4413      	add	r3, r2
 80042e4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 80042e8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80042ec:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80042f0:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80042f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80042f6:	3301      	adds	r3, #1
 80042f8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 80042fc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004300:	3301      	adds	r3, #1
 8004302:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8004306:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 800430a:	4618      	mov	r0, r3
 800430c:	f001 f802 	bl	8005314 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8004310:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8004314:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004318:	4413      	add	r3, r2
 800431a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 800431e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004322:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8004326:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8004328:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800432c:	3302      	adds	r3, #2
 800432e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 8004332:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004336:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 800433a:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800433c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004340:	3302      	adds	r3, #2
 8004342:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004346:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800434a:	2218      	movs	r2, #24
 800434c:	2100      	movs	r1, #0
 800434e:	4618      	mov	r0, r3
 8004350:	f000 fff0 	bl	8005334 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004354:	233f      	movs	r3, #63	; 0x3f
 8004356:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 800435a:	2383      	movs	r3, #131	; 0x83
 800435c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004360:	f107 0310 	add.w	r3, r7, #16
 8004364:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004368:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800436c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004370:	f107 030f 	add.w	r3, r7, #15
 8004374:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004378:	2301      	movs	r3, #1
 800437a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800437e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004382:	2100      	movs	r1, #0
 8004384:	4618      	mov	r0, r3
 8004386:	f001 fa5f 	bl	8005848 <hci_send_req>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	da01      	bge.n	8004394 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8004390:	23ff      	movs	r3, #255	; 0xff
 8004392:	e004      	b.n	800439e <aci_gap_set_discoverable+0x1ea>
  return status;
 8004394:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004398:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800439c:	781b      	ldrb	r3, [r3, #0]
}
 800439e:	4618      	mov	r0, r3
 80043a0:	f507 779c 	add.w	r7, r7, #312	; 0x138
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bdb0      	pop	{r4, r5, r7, pc}

080043a8 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b0cc      	sub	sp, #304	; 0x130
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	4602      	mov	r2, r0
 80043b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043b4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80043b8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 80043ba:	f107 0310 	add.w	r3, r7, #16
 80043be:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80043c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043c6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80043ca:	2200      	movs	r2, #0
 80043cc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80043ce:	2300      	movs	r3, #0
 80043d0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 80043d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043d8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80043dc:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80043e0:	7812      	ldrb	r2, [r2, #0]
 80043e2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80043e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80043e8:	3301      	adds	r3, #1
 80043ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80043ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80043f2:	2218      	movs	r2, #24
 80043f4:	2100      	movs	r1, #0
 80043f6:	4618      	mov	r0, r3
 80043f8:	f000 ff9c 	bl	8005334 <Osal_MemSet>
  rq.ogf = 0x3f;
 80043fc:	233f      	movs	r3, #63	; 0x3f
 80043fe:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8004402:	2385      	movs	r3, #133	; 0x85
 8004404:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004408:	f107 0310 	add.w	r3, r7, #16
 800440c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004410:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004414:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004418:	f107 030f 	add.w	r3, r7, #15
 800441c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004420:	2301      	movs	r3, #1
 8004422:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004426:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800442a:	2100      	movs	r1, #0
 800442c:	4618      	mov	r0, r3
 800442e:	f001 fa0b 	bl	8005848 <hci_send_req>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	da01      	bge.n	800443c <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8004438:	23ff      	movs	r3, #255	; 0xff
 800443a:	e004      	b.n	8004446 <aci_gap_set_io_capability+0x9e>
  return status;
 800443c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004440:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004444:	781b      	ldrb	r3, [r3, #0]
}
 8004446:	4618      	mov	r0, r3
 8004448:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8004450:	b5b0      	push	{r4, r5, r7, lr}
 8004452:	b0cc      	sub	sp, #304	; 0x130
 8004454:	af00      	add	r7, sp, #0
 8004456:	4605      	mov	r5, r0
 8004458:	460c      	mov	r4, r1
 800445a:	4610      	mov	r0, r2
 800445c:	4619      	mov	r1, r3
 800445e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004462:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8004466:	462a      	mov	r2, r5
 8004468:	701a      	strb	r2, [r3, #0]
 800446a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800446e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8004472:	4622      	mov	r2, r4
 8004474:	701a      	strb	r2, [r3, #0]
 8004476:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800447a:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800447e:	4602      	mov	r2, r0
 8004480:	701a      	strb	r2, [r3, #0]
 8004482:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004486:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800448a:	460a      	mov	r2, r1
 800448c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800448e:	f107 0310 	add.w	r3, r7, #16
 8004492:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004496:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800449a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800449e:	2200      	movs	r2, #0
 80044a0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80044a2:	2300      	movs	r3, #0
 80044a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 80044a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044ac:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80044b0:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80044b4:	7812      	ldrb	r2, [r2, #0]
 80044b6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80044b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80044bc:	3301      	adds	r3, #1
 80044be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 80044c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044c6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80044ca:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80044ce:	7812      	ldrb	r2, [r2, #0]
 80044d0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80044d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80044d6:	3301      	adds	r3, #1
 80044d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 80044dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044e0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80044e4:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80044e8:	7812      	ldrb	r2, [r2, #0]
 80044ea:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80044ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80044f0:	3301      	adds	r3, #1
 80044f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 80044f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044fa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80044fe:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004502:	7812      	ldrb	r2, [r2, #0]
 8004504:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8004506:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800450a:	3301      	adds	r3, #1
 800450c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8004510:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004514:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8004518:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800451a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800451e:	3301      	adds	r3, #1
 8004520:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8004524:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004528:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 800452c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800452e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004532:	3301      	adds	r3, #1
 8004534:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8004538:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800453c:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8004540:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8004542:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004546:	3301      	adds	r3, #1
 8004548:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800454c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004550:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004554:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8004558:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800455c:	3304      	adds	r3, #4
 800455e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8004562:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004566:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800456a:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800456c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004570:	3301      	adds	r3, #1
 8004572:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004576:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800457a:	2218      	movs	r2, #24
 800457c:	2100      	movs	r1, #0
 800457e:	4618      	mov	r0, r3
 8004580:	f000 fed8 	bl	8005334 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004584:	233f      	movs	r3, #63	; 0x3f
 8004586:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 800458a:	2386      	movs	r3, #134	; 0x86
 800458c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004590:	f107 0310 	add.w	r3, r7, #16
 8004594:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004598:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800459c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80045a0:	f107 030f 	add.w	r3, r7, #15
 80045a4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80045a8:	2301      	movs	r3, #1
 80045aa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80045ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80045b2:	2100      	movs	r1, #0
 80045b4:	4618      	mov	r0, r3
 80045b6:	f001 f947 	bl	8005848 <hci_send_req>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	da01      	bge.n	80045c4 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 80045c0:	23ff      	movs	r3, #255	; 0xff
 80045c2:	e004      	b.n	80045ce <aci_gap_set_authentication_requirement+0x17e>
  return status;
 80045c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045c8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80045cc:	781b      	ldrb	r3, [r3, #0]
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bdb0      	pop	{r4, r5, r7, pc}

080045d8 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b0cc      	sub	sp, #304	; 0x130
 80045dc:	af00      	add	r7, sp, #0
 80045de:	4602      	mov	r2, r0
 80045e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80045e8:	6019      	str	r1, [r3, #0]
 80045ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045ee:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80045f2:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 80045f4:	f107 0310 	add.w	r3, r7, #16
 80045f8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80045fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004600:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004604:	2200      	movs	r2, #0
 8004606:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004608:	2300      	movs	r3, #0
 800460a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800460e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004612:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004616:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800461a:	8812      	ldrh	r2, [r2, #0]
 800461c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800461e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004622:	3302      	adds	r3, #2
 8004624:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 8004628:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800462c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004630:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8004634:	6812      	ldr	r2, [r2, #0]
 8004636:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 800463a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800463e:	3304      	adds	r3, #4
 8004640:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004644:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004648:	2218      	movs	r2, #24
 800464a:	2100      	movs	r1, #0
 800464c:	4618      	mov	r0, r3
 800464e:	f000 fe71 	bl	8005334 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004652:	233f      	movs	r3, #63	; 0x3f
 8004654:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 8004658:	2388      	movs	r3, #136	; 0x88
 800465a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800465e:	f107 0310 	add.w	r3, r7, #16
 8004662:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004666:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800466a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800466e:	f107 030f 	add.w	r3, r7, #15
 8004672:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004676:	2301      	movs	r3, #1
 8004678:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800467c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004680:	2100      	movs	r1, #0
 8004682:	4618      	mov	r0, r3
 8004684:	f001 f8e0 	bl	8005848 <hci_send_req>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	da01      	bge.n	8004692 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800468e:	23ff      	movs	r3, #255	; 0xff
 8004690:	e004      	b.n	800469c <aci_gap_pass_key_resp+0xc4>
  return status;
 8004692:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004696:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800469a:	781b      	ldrb	r3, [r3, #0]
}
 800469c:	4618      	mov	r0, r3
 800469e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 80046a6:	b590      	push	{r4, r7, lr}
 80046a8:	b0cd      	sub	sp, #308	; 0x134
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	4604      	mov	r4, r0
 80046ae:	4608      	mov	r0, r1
 80046b0:	4611      	mov	r1, r2
 80046b2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80046b6:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 80046ba:	6013      	str	r3, [r2, #0]
 80046bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046c0:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80046c4:	4622      	mov	r2, r4
 80046c6:	701a      	strb	r2, [r3, #0]
 80046c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046cc:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80046d0:	4602      	mov	r2, r0
 80046d2:	701a      	strb	r2, [r3, #0]
 80046d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046d8:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80046dc:	460a      	mov	r2, r1
 80046de:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 80046e0:	f107 0310 	add.w	r3, r7, #16
 80046e4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80046e8:	f107 0308 	add.w	r3, r7, #8
 80046ec:	2207      	movs	r2, #7
 80046ee:	2100      	movs	r1, #0
 80046f0:	4618      	mov	r0, r3
 80046f2:	f000 fe1f 	bl	8005334 <Osal_MemSet>
  int index_input = 0;
 80046f6:	2300      	movs	r3, #0
 80046f8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 80046fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004700:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004704:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8004708:	7812      	ldrb	r2, [r2, #0]
 800470a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800470c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004710:	3301      	adds	r3, #1
 8004712:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8004716:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800471a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800471e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8004722:	7812      	ldrb	r2, [r2, #0]
 8004724:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8004726:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800472a:	3301      	adds	r3, #1
 800472c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8004730:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004734:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004738:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800473c:	7812      	ldrb	r2, [r2, #0]
 800473e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8004740:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004744:	3301      	adds	r3, #1
 8004746:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800474a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800474e:	2218      	movs	r2, #24
 8004750:	2100      	movs	r1, #0
 8004752:	4618      	mov	r0, r3
 8004754:	f000 fdee 	bl	8005334 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004758:	233f      	movs	r3, #63	; 0x3f
 800475a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 800475e:	238a      	movs	r3, #138	; 0x8a
 8004760:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004764:	f107 0310 	add.w	r3, r7, #16
 8004768:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800476c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004770:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8004774:	f107 0308 	add.w	r3, r7, #8
 8004778:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800477c:	2307      	movs	r3, #7
 800477e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004782:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004786:	2100      	movs	r1, #0
 8004788:	4618      	mov	r0, r3
 800478a:	f001 f85d 	bl	8005848 <hci_send_req>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	da01      	bge.n	8004798 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8004794:	23ff      	movs	r3, #255	; 0xff
 8004796:	e02e      	b.n	80047f6 <aci_gap_init+0x150>
  if ( resp.Status )
 8004798:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800479c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d005      	beq.n	80047b2 <aci_gap_init+0x10c>
    return resp.Status;
 80047a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047aa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	e021      	b.n	80047f6 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 80047b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047b6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80047ba:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80047be:	b29a      	uxth	r2, r3
 80047c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 80047cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047d0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80047d4:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80047d8:	b29a      	uxth	r2, r3
 80047da:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80047de:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 80047e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047e4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80047e8:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80047ec:	b29a      	uxth	r2, r3
 80047ee:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80047f2:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd90      	pop	{r4, r7, pc}

08004800 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b0cc      	sub	sp, #304	; 0x130
 8004804:	af00      	add	r7, sp, #0
 8004806:	4602      	mov	r2, r0
 8004808:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800480c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004810:	6019      	str	r1, [r3, #0]
 8004812:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004816:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800481a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800481c:	f107 0310 	add.w	r3, r7, #16
 8004820:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004824:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004828:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800482c:	2200      	movs	r2, #0
 800482e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004830:	2300      	movs	r3, #0
 8004832:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8004836:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800483a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800483e:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8004842:	7812      	ldrb	r2, [r2, #0]
 8004844:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004846:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800484a:	3301      	adds	r3, #1
 800484c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8004850:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004854:	1c58      	adds	r0, r3, #1
 8004856:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800485a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800485e:	781a      	ldrb	r2, [r3, #0]
 8004860:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004864:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004868:	6819      	ldr	r1, [r3, #0]
 800486a:	f000 fd53 	bl	8005314 <Osal_MemCpy>
  index_input += AdvDataLen;
 800486e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004872:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800487c:	4413      	add	r3, r2
 800487e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004882:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004886:	2218      	movs	r2, #24
 8004888:	2100      	movs	r1, #0
 800488a:	4618      	mov	r0, r3
 800488c:	f000 fd52 	bl	8005334 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004890:	233f      	movs	r3, #63	; 0x3f
 8004892:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8004896:	238e      	movs	r3, #142	; 0x8e
 8004898:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800489c:	f107 0310 	add.w	r3, r7, #16
 80048a0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80048a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80048a8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80048ac:	f107 030f 	add.w	r3, r7, #15
 80048b0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80048b4:	2301      	movs	r3, #1
 80048b6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80048ba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80048be:	2100      	movs	r1, #0
 80048c0:	4618      	mov	r0, r3
 80048c2:	f000 ffc1 	bl	8005848 <hci_send_req>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	da01      	bge.n	80048d0 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 80048cc:	23ff      	movs	r3, #255	; 0xff
 80048ce:	e004      	b.n	80048da <aci_gap_update_adv_data+0xda>
  return status;
 80048d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048d4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80048d8:	781b      	ldrb	r3, [r3, #0]
}
 80048da:	4618      	mov	r0, r3
 80048dc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b088      	sub	sp, #32
 80048e8:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80048ea:	2300      	movs	r3, #0
 80048ec:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80048ee:	f107 0308 	add.w	r3, r7, #8
 80048f2:	2218      	movs	r2, #24
 80048f4:	2100      	movs	r1, #0
 80048f6:	4618      	mov	r0, r3
 80048f8:	f000 fd1c 	bl	8005334 <Osal_MemSet>
  rq.ogf = 0x3f;
 80048fc:	233f      	movs	r3, #63	; 0x3f
 80048fe:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8004900:	2392      	movs	r3, #146	; 0x92
 8004902:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8004904:	1dfb      	adds	r3, r7, #7
 8004906:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8004908:	2301      	movs	r3, #1
 800490a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800490c:	f107 0308 	add.w	r3, r7, #8
 8004910:	2100      	movs	r1, #0
 8004912:	4618      	mov	r0, r3
 8004914:	f000 ff98 	bl	8005848 <hci_send_req>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	da01      	bge.n	8004922 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 800491e:	23ff      	movs	r3, #255	; 0xff
 8004920:	e000      	b.n	8004924 <aci_gap_configure_whitelist+0x40>
  return status;
 8004922:	79fb      	ldrb	r3, [r7, #7]
}
 8004924:	4618      	mov	r0, r3
 8004926:	3720      	adds	r7, #32
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b0cc      	sub	sp, #304	; 0x130
 8004930:	af00      	add	r7, sp, #0
 8004932:	4602      	mov	r2, r0
 8004934:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004938:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800493c:	801a      	strh	r2, [r3, #0]
 800493e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004942:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8004946:	460a      	mov	r2, r1
 8004948:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800494a:	f107 0310 	add.w	r3, r7, #16
 800494e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004952:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004956:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800495a:	2200      	movs	r2, #0
 800495c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800495e:	2300      	movs	r3, #0
 8004960:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8004964:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004968:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800496c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8004970:	8812      	ldrh	r2, [r2, #0]
 8004972:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8004974:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004978:	3302      	adds	r3, #2
 800497a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800497e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004982:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004986:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800498a:	7812      	ldrb	r2, [r2, #0]
 800498c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800498e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004992:	3301      	adds	r3, #1
 8004994:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004998:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800499c:	2218      	movs	r2, #24
 800499e:	2100      	movs	r1, #0
 80049a0:	4618      	mov	r0, r3
 80049a2:	f000 fcc7 	bl	8005334 <Osal_MemSet>
  rq.ogf = 0x3f;
 80049a6:	233f      	movs	r3, #63	; 0x3f
 80049a8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 80049ac:	23a5      	movs	r3, #165	; 0xa5
 80049ae:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80049b2:	f107 0310 	add.w	r3, r7, #16
 80049b6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80049ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80049be:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80049c2:	f107 030f 	add.w	r3, r7, #15
 80049c6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80049ca:	2301      	movs	r3, #1
 80049cc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80049d0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80049d4:	2100      	movs	r1, #0
 80049d6:	4618      	mov	r0, r3
 80049d8:	f000 ff36 	bl	8005848 <hci_send_req>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	da01      	bge.n	80049e6 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 80049e2:	23ff      	movs	r3, #255	; 0xff
 80049e4:	e004      	b.n	80049f0 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 80049e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049ea:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80049ee:	781b      	ldrb	r3, [r3, #0]
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b088      	sub	sp, #32
 80049fe:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8004a00:	2300      	movs	r3, #0
 8004a02:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004a04:	f107 0308 	add.w	r3, r7, #8
 8004a08:	2218      	movs	r2, #24
 8004a0a:	2100      	movs	r1, #0
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f000 fc91 	bl	8005334 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004a12:	233f      	movs	r3, #63	; 0x3f
 8004a14:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8004a16:	f240 1301 	movw	r3, #257	; 0x101
 8004a1a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8004a1c:	1dfb      	adds	r3, r7, #7
 8004a1e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8004a20:	2301      	movs	r3, #1
 8004a22:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004a24:	f107 0308 	add.w	r3, r7, #8
 8004a28:	2100      	movs	r1, #0
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f000 ff0c 	bl	8005848 <hci_send_req>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	da01      	bge.n	8004a3a <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8004a36:	23ff      	movs	r3, #255	; 0xff
 8004a38:	e000      	b.n	8004a3c <aci_gatt_init+0x42>
  return status;
 8004a3a:	79fb      	ldrb	r3, [r7, #7]
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3720      	adds	r7, #32
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8004a44:	b590      	push	{r4, r7, lr}
 8004a46:	b0cf      	sub	sp, #316	; 0x13c
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	4604      	mov	r4, r0
 8004a4c:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8004a50:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 8004a54:	6001      	str	r1, [r0, #0]
 8004a56:	4610      	mov	r0, r2
 8004a58:	4619      	mov	r1, r3
 8004a5a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004a5e:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8004a62:	4622      	mov	r2, r4
 8004a64:	701a      	strb	r2, [r3, #0]
 8004a66:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004a6a:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8004a6e:	4602      	mov	r2, r0
 8004a70:	701a      	strb	r2, [r3, #0]
 8004a72:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004a76:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8004a7a:	460a      	mov	r2, r1
 8004a7c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8004a7e:	f107 0310 	add.w	r3, r7, #16
 8004a82:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8004a86:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004a8a:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d00a      	beq.n	8004aaa <aci_gatt_add_service+0x66>
 8004a94:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004a98:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d101      	bne.n	8004aa6 <aci_gatt_add_service+0x62>
 8004aa2:	2311      	movs	r3, #17
 8004aa4:	e002      	b.n	8004aac <aci_gatt_add_service+0x68>
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e000      	b.n	8004aac <aci_gatt_add_service+0x68>
 8004aaa:	2303      	movs	r3, #3
 8004aac:	f107 0210 	add.w	r2, r7, #16
 8004ab0:	4413      	add	r3, r2
 8004ab2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8004ab6:	f107 030c 	add.w	r3, r7, #12
 8004aba:	2203      	movs	r2, #3
 8004abc:	2100      	movs	r1, #0
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f000 fc38 	bl	8005334 <Osal_MemSet>
  int index_input = 0;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8004aca:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004ace:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8004ad2:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8004ad6:	7812      	ldrb	r2, [r2, #0]
 8004ad8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004ada:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ade:	3301      	adds	r3, #1
 8004ae0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8004ae4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004ae8:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d002      	beq.n	8004af8 <aci_gatt_add_service+0xb4>
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d004      	beq.n	8004b00 <aci_gatt_add_service+0xbc>
 8004af6:	e007      	b.n	8004b08 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8004af8:	2302      	movs	r3, #2
 8004afa:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8004afe:	e005      	b.n	8004b0c <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8004b00:	2310      	movs	r3, #16
 8004b02:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8004b06:	e001      	b.n	8004b0c <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8004b08:	2397      	movs	r3, #151	; 0x97
 8004b0a:	e06c      	b.n	8004be6 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8004b0c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004b10:	1c58      	adds	r0, r3, #1
 8004b12:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8004b16:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004b1a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004b1e:	6819      	ldr	r1, [r3, #0]
 8004b20:	f000 fbf8 	bl	8005314 <Osal_MemCpy>
    index_input += size;
 8004b24:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8004b28:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004b2c:	4413      	add	r3, r2
 8004b2e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8004b32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b36:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8004b3a:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8004b3e:	7812      	ldrb	r2, [r2, #0]
 8004b40:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8004b42:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004b46:	3301      	adds	r3, #1
 8004b48:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8004b4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b50:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8004b54:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8004b58:	7812      	ldrb	r2, [r2, #0]
 8004b5a:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8004b5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004b60:	3301      	adds	r3, #1
 8004b62:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004b66:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004b6a:	2218      	movs	r2, #24
 8004b6c:	2100      	movs	r1, #0
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f000 fbe0 	bl	8005334 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004b74:	233f      	movs	r3, #63	; 0x3f
 8004b76:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8004b7a:	f44f 7381 	mov.w	r3, #258	; 0x102
 8004b7e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004b82:	f107 0310 	add.w	r3, r7, #16
 8004b86:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004b8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004b8e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8004b92:	f107 030c 	add.w	r3, r7, #12
 8004b96:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004ba0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004ba4:	2100      	movs	r1, #0
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f000 fe4e 	bl	8005848 <hci_send_req>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	da01      	bge.n	8004bb6 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8004bb2:	23ff      	movs	r3, #255	; 0xff
 8004bb4:	e017      	b.n	8004be6 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8004bb6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004bba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d005      	beq.n	8004bd0 <aci_gatt_add_service+0x18c>
    return resp.Status;
 8004bc4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004bc8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	e00a      	b.n	8004be6 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8004bd0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004bd4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004bd8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8004bdc:	b29a      	uxth	r2, r3
 8004bde:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8004be2:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd90      	pop	{r4, r7, pc}

08004bf0 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8004bf0:	b590      	push	{r4, r7, lr}
 8004bf2:	b0d1      	sub	sp, #324	; 0x144
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	4604      	mov	r4, r0
 8004bf8:	4608      	mov	r0, r1
 8004bfa:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8004bfe:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8004c02:	600a      	str	r2, [r1, #0]
 8004c04:	4619      	mov	r1, r3
 8004c06:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004c0a:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8004c0e:	4622      	mov	r2, r4
 8004c10:	801a      	strh	r2, [r3, #0]
 8004c12:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004c16:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	701a      	strb	r2, [r3, #0]
 8004c1e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004c22:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8004c26:	460a      	mov	r2, r1
 8004c28:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8004c2a:	f107 0318 	add.w	r3, r7, #24
 8004c2e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8004c32:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004c36:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d00a      	beq.n	8004c56 <aci_gatt_add_char+0x66>
 8004c40:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004c44:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d101      	bne.n	8004c52 <aci_gatt_add_char+0x62>
 8004c4e:	2313      	movs	r3, #19
 8004c50:	e002      	b.n	8004c58 <aci_gatt_add_char+0x68>
 8004c52:	2303      	movs	r3, #3
 8004c54:	e000      	b.n	8004c58 <aci_gatt_add_char+0x68>
 8004c56:	2305      	movs	r3, #5
 8004c58:	f107 0218 	add.w	r2, r7, #24
 8004c5c:	4413      	add	r3, r2
 8004c5e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8004c62:	f107 0314 	add.w	r3, r7, #20
 8004c66:	2203      	movs	r2, #3
 8004c68:	2100      	movs	r1, #0
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f000 fb62 	bl	8005334 <Osal_MemSet>
  int index_input = 0;
 8004c70:	2300      	movs	r3, #0
 8004c72:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8004c76:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004c7a:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8004c7e:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8004c82:	8812      	ldrh	r2, [r2, #0]
 8004c84:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8004c86:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004c8a:	3302      	adds	r3, #2
 8004c8c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8004c90:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004c94:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8004c98:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8004c9c:	7812      	ldrb	r2, [r2, #0]
 8004c9e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8004ca0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8004caa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004cae:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d002      	beq.n	8004cbe <aci_gatt_add_char+0xce>
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d004      	beq.n	8004cc6 <aci_gatt_add_char+0xd6>
 8004cbc:	e007      	b.n	8004cce <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8004cbe:	2302      	movs	r3, #2
 8004cc0:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8004cc4:	e005      	b.n	8004cd2 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8004cc6:	2310      	movs	r3, #16
 8004cc8:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8004ccc:	e001      	b.n	8004cd2 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8004cce:	2397      	movs	r3, #151	; 0x97
 8004cd0:	e091      	b.n	8004df6 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8004cd2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004cd6:	1cd8      	adds	r0, r3, #3
 8004cd8:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8004cdc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004ce0:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004ce4:	6819      	ldr	r1, [r3, #0]
 8004ce6:	f000 fb15 	bl	8005314 <Osal_MemCpy>
    index_input += size;
 8004cea:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8004cee:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8004cf2:	4413      	add	r3, r2
 8004cf4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8004cf8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004cfc:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8004d00:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 8004d04:	8812      	ldrh	r2, [r2, #0]
 8004d06:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8004d08:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004d0c:	3302      	adds	r3, #2
 8004d0e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8004d12:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004d16:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8004d1a:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8004d1c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004d20:	3301      	adds	r3, #1
 8004d22:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8004d26:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004d2a:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8004d2e:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8004d30:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004d34:	3301      	adds	r3, #1
 8004d36:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8004d3a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004d3e:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8004d42:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8004d44:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004d48:	3301      	adds	r3, #1
 8004d4a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8004d4e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004d52:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8004d56:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8004d58:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8004d62:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004d66:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8004d6a:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8004d6c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004d70:	3301      	adds	r3, #1
 8004d72:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004d76:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004d7a:	2218      	movs	r2, #24
 8004d7c:	2100      	movs	r1, #0
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f000 fad8 	bl	8005334 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004d84:	233f      	movs	r3, #63	; 0x3f
 8004d86:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8004d8a:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004d8e:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8004d92:	f107 0318 	add.w	r3, r7, #24
 8004d96:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8004d9a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004d9e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8004da2:	f107 0314 	add.w	r3, r7, #20
 8004da6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8004daa:	2303      	movs	r3, #3
 8004dac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004db0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004db4:	2100      	movs	r1, #0
 8004db6:	4618      	mov	r0, r3
 8004db8:	f000 fd46 	bl	8005848 <hci_send_req>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	da01      	bge.n	8004dc6 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8004dc2:	23ff      	movs	r3, #255	; 0xff
 8004dc4:	e017      	b.n	8004df6 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8004dc6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004dca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d005      	beq.n	8004de0 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8004dd4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004dd8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	e00a      	b.n	8004df6 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8004de0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004de4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004de8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8004dec:	b29a      	uxth	r2, r3
 8004dee:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004df2:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd90      	pop	{r4, r7, pc}

08004e00 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8004e00:	b5b0      	push	{r4, r5, r7, lr}
 8004e02:	b0cc      	sub	sp, #304	; 0x130
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	4605      	mov	r5, r0
 8004e08:	460c      	mov	r4, r1
 8004e0a:	4610      	mov	r0, r2
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e12:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8004e16:	462a      	mov	r2, r5
 8004e18:	801a      	strh	r2, [r3, #0]
 8004e1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e1e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e22:	4622      	mov	r2, r4
 8004e24:	801a      	strh	r2, [r3, #0]
 8004e26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e2a:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8004e2e:	4602      	mov	r2, r0
 8004e30:	701a      	strb	r2, [r3, #0]
 8004e32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e36:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8004e3a:	460a      	mov	r2, r1
 8004e3c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8004e3e:	f107 0310 	add.w	r3, r7, #16
 8004e42:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004e46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e4a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004e4e:	2200      	movs	r2, #0
 8004e50:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004e52:	2300      	movs	r3, #0
 8004e54:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8004e58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e5c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004e60:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8004e64:	8812      	ldrh	r2, [r2, #0]
 8004e66:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8004e68:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004e6c:	3302      	adds	r3, #2
 8004e6e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8004e72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e76:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004e7a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004e7e:	8812      	ldrh	r2, [r2, #0]
 8004e80:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8004e82:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004e86:	3302      	adds	r3, #2
 8004e88:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8004e8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e90:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004e94:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8004e98:	7812      	ldrb	r2, [r2, #0]
 8004e9a:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8004e9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8004ea6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004eaa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004eae:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8004eb2:	7812      	ldrb	r2, [r2, #0]
 8004eb4:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8004eb6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004eba:	3301      	adds	r3, #1
 8004ebc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8004ec0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ec4:	1d98      	adds	r0, r3, #6
 8004ec6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004eca:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004ed6:	f000 fa1d 	bl	8005314 <Osal_MemCpy>
  index_input += Char_Value_Length;
 8004eda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ede:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004ee8:	4413      	add	r3, r2
 8004eea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004eee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004ef2:	2218      	movs	r2, #24
 8004ef4:	2100      	movs	r1, #0
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f000 fa1c 	bl	8005334 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004efc:	233f      	movs	r3, #63	; 0x3f
 8004efe:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8004f02:	f44f 7383 	mov.w	r3, #262	; 0x106
 8004f06:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004f0a:	f107 0310 	add.w	r3, r7, #16
 8004f0e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004f12:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004f16:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004f1a:	f107 030f 	add.w	r3, r7, #15
 8004f1e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004f22:	2301      	movs	r3, #1
 8004f24:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004f28:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004f2c:	2100      	movs	r1, #0
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f000 fc8a 	bl	8005848 <hci_send_req>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	da01      	bge.n	8004f3e <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8004f3a:	23ff      	movs	r3, #255	; 0xff
 8004f3c:	e004      	b.n	8004f48 <aci_gatt_update_char_value+0x148>
  return status;
 8004f3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f42:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004f46:	781b      	ldrb	r3, [r3, #0]
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bdb0      	pop	{r4, r5, r7, pc}

08004f52 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b0cc      	sub	sp, #304	; 0x130
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f60:	601a      	str	r2, [r3, #0]
 8004f62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f66:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	701a      	strb	r2, [r3, #0]
 8004f6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f72:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8004f76:	460a      	mov	r2, r1
 8004f78:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8004f7a:	f107 0310 	add.w	r3, r7, #16
 8004f7e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004f82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f86:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8004f94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f98:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004f9c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8004fa0:	7812      	ldrb	r2, [r2, #0]
 8004fa2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004fa4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004fa8:	3301      	adds	r3, #1
 8004faa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8004fae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fb2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004fb6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8004fba:	7812      	ldrb	r2, [r2, #0]
 8004fbc:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8004fbe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8004fc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fcc:	1c98      	adds	r0, r3, #2
 8004fce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fd2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8004fd6:	781a      	ldrb	r2, [r3, #0]
 8004fd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fdc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fe0:	6819      	ldr	r1, [r3, #0]
 8004fe2:	f000 f997 	bl	8005314 <Osal_MemCpy>
  index_input += Length;
 8004fe6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fea:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004ff4:	4413      	add	r3, r2
 8004ff6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004ffa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004ffe:	2218      	movs	r2, #24
 8005000:	2100      	movs	r1, #0
 8005002:	4618      	mov	r0, r3
 8005004:	f000 f996 	bl	8005334 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005008:	233f      	movs	r3, #63	; 0x3f
 800500a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800500e:	230c      	movs	r3, #12
 8005010:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005014:	f107 0310 	add.w	r3, r7, #16
 8005018:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800501c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005020:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005024:	f107 030f 	add.w	r3, r7, #15
 8005028:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800502c:	2301      	movs	r3, #1
 800502e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005032:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005036:	2100      	movs	r1, #0
 8005038:	4618      	mov	r0, r3
 800503a:	f000 fc05 	bl	8005848 <hci_send_req>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	da01      	bge.n	8005048 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8005044:	23ff      	movs	r3, #255	; 0xff
 8005046:	e004      	b.n	8005052 <aci_hal_write_config_data+0x100>
  return status;
 8005048:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800504c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005050:	781b      	ldrb	r3, [r3, #0]
}
 8005052:	4618      	mov	r0, r3
 8005054:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b0cc      	sub	sp, #304	; 0x130
 8005060:	af00      	add	r7, sp, #0
 8005062:	4602      	mov	r2, r0
 8005064:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005068:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800506c:	701a      	strb	r2, [r3, #0]
 800506e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005072:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8005076:	460a      	mov	r2, r1
 8005078:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800507a:	f107 0310 	add.w	r3, r7, #16
 800507e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005082:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005086:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800508a:	2200      	movs	r2, #0
 800508c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800508e:	2300      	movs	r3, #0
 8005090:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8005094:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005098:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800509c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80050a0:	7812      	ldrb	r2, [r2, #0]
 80050a2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80050a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80050a8:	3301      	adds	r3, #1
 80050aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 80050ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050b2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80050b6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80050ba:	7812      	ldrb	r2, [r2, #0]
 80050bc:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80050be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80050c2:	3301      	adds	r3, #1
 80050c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80050c8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80050cc:	2218      	movs	r2, #24
 80050ce:	2100      	movs	r1, #0
 80050d0:	4618      	mov	r0, r3
 80050d2:	f000 f92f 	bl	8005334 <Osal_MemSet>
  rq.ogf = 0x3f;
 80050d6:	233f      	movs	r3, #63	; 0x3f
 80050d8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 80050dc:	230f      	movs	r3, #15
 80050de:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80050e2:	f107 0310 	add.w	r3, r7, #16
 80050e6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80050ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80050ee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80050f2:	f107 030f 	add.w	r3, r7, #15
 80050f6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80050fa:	2301      	movs	r3, #1
 80050fc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005100:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005104:	2100      	movs	r1, #0
 8005106:	4618      	mov	r0, r3
 8005108:	f000 fb9e 	bl	8005848 <hci_send_req>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	da01      	bge.n	8005116 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8005112:	23ff      	movs	r3, #255	; 0xff
 8005114:	e004      	b.n	8005120 <aci_hal_set_tx_power_level+0xc4>
  return status;
 8005116:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800511a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800511e:	781b      	ldrb	r3, [r3, #0]
}
 8005120:	4618      	mov	r0, r3
 8005122:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}

0800512a <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800512a:	b580      	push	{r7, lr}
 800512c:	b0cc      	sub	sp, #304	; 0x130
 800512e:	af00      	add	r7, sp, #0
 8005130:	4602      	mov	r2, r0
 8005132:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005136:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800513a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800513c:	f107 0310 	add.w	r3, r7, #16
 8005140:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005144:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005148:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800514c:	2200      	movs	r2, #0
 800514e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005150:	2300      	movs	r3, #0
 8005152:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8005156:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800515a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800515e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8005162:	8812      	ldrh	r2, [r2, #0]
 8005164:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005166:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800516a:	3302      	adds	r3, #2
 800516c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005170:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005174:	2218      	movs	r2, #24
 8005176:	2100      	movs	r1, #0
 8005178:	4618      	mov	r0, r3
 800517a:	f000 f8db 	bl	8005334 <Osal_MemSet>
  rq.ogf = 0x3f;
 800517e:	233f      	movs	r3, #63	; 0x3f
 8005180:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8005184:	2318      	movs	r3, #24
 8005186:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800518a:	f107 0310 	add.w	r3, r7, #16
 800518e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005192:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005196:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800519a:	f107 030f 	add.w	r3, r7, #15
 800519e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80051a2:	2301      	movs	r3, #1
 80051a4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80051a8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80051ac:	2100      	movs	r1, #0
 80051ae:	4618      	mov	r0, r3
 80051b0:	f000 fb4a 	bl	8005848 <hci_send_req>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	da01      	bge.n	80051be <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 80051ba:	23ff      	movs	r3, #255	; 0xff
 80051bc:	e004      	b.n	80051c8 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 80051be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051c2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80051c6:	781b      	ldrb	r3, [r3, #0]
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 80051d2:	b580      	push	{r7, lr}
 80051d4:	b088      	sub	sp, #32
 80051d6:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80051d8:	2300      	movs	r3, #0
 80051da:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80051dc:	f107 0308 	add.w	r3, r7, #8
 80051e0:	2218      	movs	r2, #24
 80051e2:	2100      	movs	r1, #0
 80051e4:	4618      	mov	r0, r3
 80051e6:	f000 f8a5 	bl	8005334 <Osal_MemSet>
  rq.ogf = 0x03;
 80051ea:	2303      	movs	r3, #3
 80051ec:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 80051ee:	2303      	movs	r3, #3
 80051f0:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80051f2:	1dfb      	adds	r3, r7, #7
 80051f4:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80051f6:	2301      	movs	r3, #1
 80051f8:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80051fa:	f107 0308 	add.w	r3, r7, #8
 80051fe:	2100      	movs	r1, #0
 8005200:	4618      	mov	r0, r3
 8005202:	f000 fb21 	bl	8005848 <hci_send_req>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	da01      	bge.n	8005210 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800520c:	23ff      	movs	r3, #255	; 0xff
 800520e:	e000      	b.n	8005212 <hci_reset+0x40>
  return status;
 8005210:	79fb      	ldrb	r3, [r7, #7]
}
 8005212:	4618      	mov	r0, r3
 8005214:	3720      	adds	r7, #32
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}

0800521a <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800521a:	b590      	push	{r4, r7, lr}
 800521c:	b0cd      	sub	sp, #308	; 0x134
 800521e:	af00      	add	r7, sp, #0
 8005220:	4604      	mov	r4, r0
 8005222:	4608      	mov	r0, r1
 8005224:	4611      	mov	r1, r2
 8005226:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800522a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800522e:	4622      	mov	r2, r4
 8005230:	701a      	strb	r2, [r3, #0]
 8005232:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005236:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800523a:	4602      	mov	r2, r0
 800523c:	701a      	strb	r2, [r3, #0]
 800523e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005242:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8005246:	460a      	mov	r2, r1
 8005248:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800524a:	f107 0310 	add.w	r3, r7, #16
 800524e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005252:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005256:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800525a:	2200      	movs	r2, #0
 800525c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800525e:	2300      	movs	r3, #0
 8005260:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8005264:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005268:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800526c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8005270:	7812      	ldrb	r2, [r2, #0]
 8005272:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005274:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005278:	3301      	adds	r3, #1
 800527a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 800527e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005282:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005286:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800528a:	7812      	ldrb	r2, [r2, #0]
 800528c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800528e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005292:	3301      	adds	r3, #1
 8005294:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 8005298:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800529c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80052a0:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80052a4:	7812      	ldrb	r2, [r2, #0]
 80052a6:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80052a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80052ac:	3301      	adds	r3, #1
 80052ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80052b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80052b6:	2218      	movs	r2, #24
 80052b8:	2100      	movs	r1, #0
 80052ba:	4618      	mov	r0, r3
 80052bc:	f000 f83a 	bl	8005334 <Osal_MemSet>
  rq.ogf = 0x08;
 80052c0:	2308      	movs	r3, #8
 80052c2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 80052c6:	2331      	movs	r3, #49	; 0x31
 80052c8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80052cc:	f107 0310 	add.w	r3, r7, #16
 80052d0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80052d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80052d8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80052dc:	f107 030f 	add.w	r3, r7, #15
 80052e0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80052e4:	2301      	movs	r3, #1
 80052e6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80052ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80052ee:	2100      	movs	r1, #0
 80052f0:	4618      	mov	r0, r3
 80052f2:	f000 faa9 	bl	8005848 <hci_send_req>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	da01      	bge.n	8005300 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 80052fc:	23ff      	movs	r3, #255	; 0xff
 80052fe:	e004      	b.n	800530a <hci_le_set_default_phy+0xf0>
  return status;
 8005300:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005304:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005308:	781b      	ldrb	r3, [r3, #0]
}
 800530a:	4618      	mov	r0, r3
 800530c:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8005310:	46bd      	mov	sp, r7
 8005312:	bd90      	pop	{r4, r7, pc}

08005314 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	68b9      	ldr	r1, [r7, #8]
 8005324:	68f8      	ldr	r0, [r7, #12]
 8005326:	f002 f8d9 	bl	80074dc <memcpy>
 800532a:	4603      	mov	r3, r0
}
 800532c:	4618      	mov	r0, r3
 800532e:	3710      	adds	r7, #16
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	68b9      	ldr	r1, [r7, #8]
 8005344:	68f8      	ldr	r0, [r7, #12]
 8005346:	f002 f8d7 	bl	80074f8 <memset>
 800534a:	4603      	mov	r3, r0
}
 800534c:	4618      	mov	r0, r3
 800534e:	3710      	adds	r7, #16
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8005354:	b480      	push	{r7}
 8005356:	af00      	add	r7, sp, #0
  return;
 8005358:	bf00      	nop
}
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr

08005362 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8005362:	b480      	push	{r7}
 8005364:	af00      	add	r7, sp, #0
  return;
 8005366:	bf00      	nop
}
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8005370:	b480      	push	{r7}
 8005372:	af00      	add	r7, sp, #0
  return;
 8005374:	bf00      	nop
}
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr

0800537e <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800537e:	b480      	push	{r7}
 8005380:	af00      	add	r7, sp, #0
  return;
 8005382:	bf00      	nop
}
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800538c:	b480      	push	{r7}
 800538e:	af00      	add	r7, sp, #0
  return;
 8005390:	bf00      	nop
}
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr

0800539a <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800539a:	b480      	push	{r7}
 800539c:	af00      	add	r7, sp, #0
  return;
 800539e:	bf00      	nop
}
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 80053a8:	b480      	push	{r7}
 80053aa:	af00      	add	r7, sp, #0
  return;
 80053ac:	bf00      	nop
}
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr

080053b6 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 80053b6:	b480      	push	{r7}
 80053b8:	af00      	add	r7, sp, #0
  return;
 80053ba:	bf00      	nop
}
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 80053c4:	b480      	push	{r7}
 80053c6:	af00      	add	r7, sp, #0
  return;
 80053c8:	bf00      	nop
}
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr

080053d2 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 80053d2:	b480      	push	{r7}
 80053d4:	af00      	add	r7, sp, #0
  return;
 80053d6:	bf00      	nop
}
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 80053e0:	b480      	push	{r7}
 80053e2:	af00      	add	r7, sp, #0
  return;
 80053e4:	bf00      	nop
}
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr

080053ee <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 80053ee:	b480      	push	{r7}
 80053f0:	af00      	add	r7, sp, #0
  return;
 80053f2:	bf00      	nop
}
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 80053fc:	b480      	push	{r7}
 80053fe:	af00      	add	r7, sp, #0
  return;
 8005400:	bf00      	nop
}
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr

0800540a <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800540a:	b480      	push	{r7}
 800540c:	af00      	add	r7, sp, #0
  return;
 800540e:	bf00      	nop
}
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8005418:	b480      	push	{r7}
 800541a:	af00      	add	r7, sp, #0
  return;
 800541c:	bf00      	nop
}
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr

08005426 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8005426:	b480      	push	{r7}
 8005428:	af00      	add	r7, sp, #0
  return;
 800542a:	bf00      	nop
}
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8005434:	b480      	push	{r7}
 8005436:	af00      	add	r7, sp, #0
  return;
 8005438:	bf00      	nop
}
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr
	...

08005444 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8005444:	b580      	push	{r7, lr}
 8005446:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8005448:	4b04      	ldr	r3, [pc, #16]	; (800545c <SVCCTL_Init+0x18>)
 800544a:	2200      	movs	r2, #0
 800544c:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800544e:	4b04      	ldr	r3, [pc, #16]	; (8005460 <SVCCTL_Init+0x1c>)
 8005450:	2200      	movs	r2, #0
 8005452:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8005454:	f000 f806 	bl	8005464 <SVCCTL_SvcInit>

  return;
 8005458:	bf00      	nop
}
 800545a:	bd80      	pop	{r7, pc}
 800545c:	200008ac 	.word	0x200008ac
 8005460:	200008cc 	.word	0x200008cc

08005464 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	af00      	add	r7, sp, #0
  BAS_Init();
 8005468:	f7ff ff74 	bl	8005354 <BAS_Init>

  BLS_Init();
 800546c:	f7ff ff79 	bl	8005362 <BLS_Init>

  CRS_STM_Init();
 8005470:	f7ff ff7e 	bl	8005370 <CRS_STM_Init>

  DIS_Init();
 8005474:	f7ff ff83 	bl	800537e <DIS_Init>

  EDS_STM_Init();
 8005478:	f7ff ff88 	bl	800538c <EDS_STM_Init>

  HIDS_Init();
 800547c:	f7ff ff8d 	bl	800539a <HIDS_Init>

  HRS_Init();
 8005480:	f7ff ff92 	bl	80053a8 <HRS_Init>

  HTS_Init();
 8005484:	f7ff ff97 	bl	80053b6 <HTS_Init>

  IAS_Init();
 8005488:	f7ff ff9c 	bl	80053c4 <IAS_Init>

  LLS_Init();
 800548c:	f7ff ffa1 	bl	80053d2 <LLS_Init>

  TPS_Init();
 8005490:	f7ff ffa6 	bl	80053e0 <TPS_Init>

  MOTENV_STM_Init();
 8005494:	f7ff ffab 	bl	80053ee <MOTENV_STM_Init>

  P2PS_STM_Init();
 8005498:	f7ff ffb0 	bl	80053fc <P2PS_STM_Init>

  ZDD_STM_Init();
 800549c:	f7ff ffb5 	bl	800540a <ZDD_STM_Init>

  OTAS_STM_Init();
 80054a0:	f7ff ffba 	bl	8005418 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 80054a4:	f7ff ffc6 	bl	8005434 <BVOPUS_STM_Init>

  MESH_Init();
 80054a8:	f7ff ffbd 	bl	8005426 <MESH_Init>

  SVCCTL_InitCustomSvc();
 80054ac:	f001 faae 	bl	8006a0c <SVCCTL_InitCustomSvc>
  
  return;
 80054b0:	bf00      	nop
}
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 80054bc:	4b09      	ldr	r3, [pc, #36]	; (80054e4 <SVCCTL_RegisterSvcHandler+0x30>)
 80054be:	7f1b      	ldrb	r3, [r3, #28]
 80054c0:	4619      	mov	r1, r3
 80054c2:	4a08      	ldr	r2, [pc, #32]	; (80054e4 <SVCCTL_RegisterSvcHandler+0x30>)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 80054ca:	4b06      	ldr	r3, [pc, #24]	; (80054e4 <SVCCTL_RegisterSvcHandler+0x30>)
 80054cc:	7f1b      	ldrb	r3, [r3, #28]
 80054ce:	3301      	adds	r3, #1
 80054d0:	b2da      	uxtb	r2, r3
 80054d2:	4b04      	ldr	r3, [pc, #16]	; (80054e4 <SVCCTL_RegisterSvcHandler+0x30>)
 80054d4:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 80054d6:	bf00      	nop
}
 80054d8:	370c      	adds	r7, #12
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop
 80054e4:	200008ac 	.word	0x200008ac

080054e8 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b086      	sub	sp, #24
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	3301      	adds	r3, #1
 80054f4:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 80054f6:	2300      	movs	r3, #0
 80054f8:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	2bff      	cmp	r3, #255	; 0xff
 8005500:	d125      	bne.n	800554e <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	3302      	adds	r3, #2
 8005506:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	881b      	ldrh	r3, [r3, #0]
 800550c:	b29b      	uxth	r3, r3
 800550e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005512:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005516:	d118      	bne.n	800554a <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8005518:	2300      	movs	r3, #0
 800551a:	757b      	strb	r3, [r7, #21]
 800551c:	e00d      	b.n	800553a <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800551e:	7d7b      	ldrb	r3, [r7, #21]
 8005520:	4a1a      	ldr	r2, [pc, #104]	; (800558c <SVCCTL_UserEvtRx+0xa4>)
 8005522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	4798      	blx	r3
 800552a:	4603      	mov	r3, r0
 800552c:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800552e:	7dfb      	ldrb	r3, [r7, #23]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d108      	bne.n	8005546 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8005534:	7d7b      	ldrb	r3, [r7, #21]
 8005536:	3301      	adds	r3, #1
 8005538:	757b      	strb	r3, [r7, #21]
 800553a:	4b14      	ldr	r3, [pc, #80]	; (800558c <SVCCTL_UserEvtRx+0xa4>)
 800553c:	7f1b      	ldrb	r3, [r3, #28]
 800553e:	7d7a      	ldrb	r2, [r7, #21]
 8005540:	429a      	cmp	r2, r3
 8005542:	d3ec      	bcc.n	800551e <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8005544:	e002      	b.n	800554c <SVCCTL_UserEvtRx+0x64>
              break;
 8005546:	bf00      	nop
          break;
 8005548:	e000      	b.n	800554c <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800554a:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800554c:	e000      	b.n	8005550 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800554e:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 8005550:	7dfb      	ldrb	r3, [r7, #23]
 8005552:	2b02      	cmp	r3, #2
 8005554:	d00f      	beq.n	8005576 <SVCCTL_UserEvtRx+0x8e>
 8005556:	2b02      	cmp	r3, #2
 8005558:	dc10      	bgt.n	800557c <SVCCTL_UserEvtRx+0x94>
 800555a:	2b00      	cmp	r3, #0
 800555c:	d002      	beq.n	8005564 <SVCCTL_UserEvtRx+0x7c>
 800555e:	2b01      	cmp	r3, #1
 8005560:	d006      	beq.n	8005570 <SVCCTL_UserEvtRx+0x88>
 8005562:	e00b      	b.n	800557c <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f000 ff7b 	bl	8006460 <SVCCTL_App_Notification>
 800556a:	4603      	mov	r3, r0
 800556c:	75bb      	strb	r3, [r7, #22]
      break;
 800556e:	e008      	b.n	8005582 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8005570:	2301      	movs	r3, #1
 8005572:	75bb      	strb	r3, [r7, #22]
      break;
 8005574:	e005      	b.n	8005582 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8005576:	2300      	movs	r3, #0
 8005578:	75bb      	strb	r3, [r7, #22]
      break;
 800557a:	e002      	b.n	8005582 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800557c:	2301      	movs	r3, #1
 800557e:	75bb      	strb	r3, [r7, #22]
      break;
 8005580:	bf00      	nop
  }

  return (return_status);
 8005582:	7dbb      	ldrb	r3, [r7, #22]
}
 8005584:	4618      	mov	r0, r3
 8005586:	3718      	adds	r7, #24
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}
 800558c:	200008ac 	.word	0x200008ac

08005590 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b088      	sub	sp, #32
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8005598:	f107 030c 	add.w	r3, r7, #12
 800559c:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	212d      	movs	r1, #45	; 0x2d
 80055a8:	f64f 4066 	movw	r0, #64614	; 0xfc66
 80055ac:	f000 fae2 	bl	8005b74 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	330b      	adds	r3, #11
 80055b4:	78db      	ldrb	r3, [r3, #3]
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3720      	adds	r7, #32
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}

080055be <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 80055be:	b580      	push	{r7, lr}
 80055c0:	b088      	sub	sp, #32
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80055c6:	f107 030c 	add.w	r3, r7, #12
 80055ca:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	210f      	movs	r1, #15
 80055d6:	f64f 4068 	movw	r0, #64616	; 0xfc68
 80055da:	f000 facb 	bl	8005b74 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80055de:	69fb      	ldr	r3, [r7, #28]
 80055e0:	330b      	adds	r3, #11
 80055e2:	78db      	ldrb	r3, [r3, #3]
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3720      	adds	r7, #32
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b088      	sub	sp, #32
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80055f4:	f107 030c 	add.w	r3, r7, #12
 80055f8:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	2110      	movs	r1, #16
 8005600:	f64f 4075 	movw	r0, #64629	; 0xfc75
 8005604:	f000 fab6 	bl	8005b74 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	330b      	adds	r3, #11
 800560c:	78db      	ldrb	r3, [r3, #3]
}
 800560e:	4618      	mov	r0, r3
 8005610:	3720      	adds	r7, #32
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
	...

08005618 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8005618:	b480      	push	{r7}
 800561a:	b08b      	sub	sp, #44	; 0x2c
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8005620:	2300      	movs	r3, #0
 8005622:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8005624:	2300      	movs	r3, #0
 8005626:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8005628:	2300      	movs	r3, #0
 800562a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800562c:	2300      	movs	r3, #0
 800562e:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8005630:	2300      	movs	r3, #0
 8005632:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8005634:	2300      	movs	r3, #0
 8005636:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8005638:	2300      	movs	r3, #0
 800563a:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800563c:	2300      	movs	r3, #0
 800563e:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8005640:	4b4a      	ldr	r3, [pc, #296]	; (800576c <SHCI_GetWirelessFwInfo+0x154>)
 8005642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005644:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005648:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8005652:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a44      	ldr	r2, [pc, #272]	; (8005770 <SHCI_GetWirelessFwInfo+0x158>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d10f      	bne.n	8005684 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	695b      	ldr	r3, [r3, #20]
 8005668:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	69db      	ldr	r3, [r3, #28]
 8005674:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	691b      	ldr	r3, [r3, #16]
 8005680:	617b      	str	r3, [r7, #20]
 8005682:	e01a      	b.n	80056ba <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800568c:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8005690:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	695b      	ldr	r3, [r3, #20]
 80056a0:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	699b      	ldr	r3, [r3, #24]
 80056a8:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80056ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056bc:	0e1b      	lsrs	r3, r3, #24
 80056be:	b2da      	uxtb	r2, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80056c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c6:	0c1b      	lsrs	r3, r3, #16
 80056c8:	b2da      	uxtb	r2, r3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80056ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d0:	0a1b      	lsrs	r3, r3, #8
 80056d2:	b2da      	uxtb	r2, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 80056d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056da:	091b      	lsrs	r3, r3, #4
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	f003 030f 	and.w	r3, r3, #15
 80056e2:	b2da      	uxtb	r2, r3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 80056e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	f003 030f 	and.w	r3, r3, #15
 80056f0:	b2da      	uxtb	r2, r3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80056f6:	6a3b      	ldr	r3, [r7, #32]
 80056f8:	0e1b      	lsrs	r3, r3, #24
 80056fa:	b2da      	uxtb	r2, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8005700:	6a3b      	ldr	r3, [r7, #32]
 8005702:	0c1b      	lsrs	r3, r3, #16
 8005704:	b2da      	uxtb	r2, r3
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800570a:	6a3b      	ldr	r3, [r7, #32]
 800570c:	0a1b      	lsrs	r3, r3, #8
 800570e:	b2da      	uxtb	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8005714:	6a3b      	ldr	r3, [r7, #32]
 8005716:	b2da      	uxtb	r2, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	b2da      	uxtb	r2, r3
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	0e1b      	lsrs	r3, r3, #24
 8005728:	b2da      	uxtb	r2, r3
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800572e:	69bb      	ldr	r3, [r7, #24]
 8005730:	0c1b      	lsrs	r3, r3, #16
 8005732:	b2da      	uxtb	r2, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	0a1b      	lsrs	r3, r3, #8
 800573c:	b2da      	uxtb	r2, r3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	0e1b      	lsrs	r3, r3, #24
 8005746:	b2da      	uxtb	r2, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	0c1b      	lsrs	r3, r3, #16
 8005750:	b2da      	uxtb	r2, r3
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	b2da      	uxtb	r2, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	372c      	adds	r7, #44	; 0x2c
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr
 800576c:	58004000 	.word	0x58004000
 8005770:	a94656b9 	.word	0xa94656b9

08005774 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	4a08      	ldr	r2, [pc, #32]	; (80057a4 <hci_init+0x30>)
 8005784:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8005786:	4a08      	ldr	r2, [pc, #32]	; (80057a8 <hci_init+0x34>)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800578c:	4806      	ldr	r0, [pc, #24]	; (80057a8 <hci_init+0x34>)
 800578e:	f000 f973 	bl	8005a78 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4618      	mov	r0, r3
 8005798:	f000 f8d4 	bl	8005944 <TlInit>

  return;
 800579c:	bf00      	nop
}
 800579e:	3708      	adds	r7, #8
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	20000a40 	.word	0x20000a40
 80057a8:	20000a18 	.word	0x20000a18

080057ac <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80057b2:	4822      	ldr	r0, [pc, #136]	; (800583c <hci_user_evt_proc+0x90>)
 80057b4:	f000 fd28 	bl	8006208 <LST_is_empty>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d12b      	bne.n	8005816 <hci_user_evt_proc+0x6a>
 80057be:	4b20      	ldr	r3, [pc, #128]	; (8005840 <hci_user_evt_proc+0x94>)
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d027      	beq.n	8005816 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80057c6:	f107 030c 	add.w	r3, r7, #12
 80057ca:	4619      	mov	r1, r3
 80057cc:	481b      	ldr	r0, [pc, #108]	; (800583c <hci_user_evt_proc+0x90>)
 80057ce:	f000 fdaa 	bl	8006326 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 80057d2:	4b1c      	ldr	r3, [pc, #112]	; (8005844 <hci_user_evt_proc+0x98>)
 80057d4:	69db      	ldr	r3, [r3, #28]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00c      	beq.n	80057f4 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 80057de:	2301      	movs	r3, #1
 80057e0:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 80057e2:	4b18      	ldr	r3, [pc, #96]	; (8005844 <hci_user_evt_proc+0x98>)
 80057e4:	69db      	ldr	r3, [r3, #28]
 80057e6:	1d3a      	adds	r2, r7, #4
 80057e8:	4610      	mov	r0, r2
 80057ea:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 80057ec:	793a      	ldrb	r2, [r7, #4]
 80057ee:	4b14      	ldr	r3, [pc, #80]	; (8005840 <hci_user_evt_proc+0x94>)
 80057f0:	701a      	strb	r2, [r3, #0]
 80057f2:	e002      	b.n	80057fa <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80057f4:	4b12      	ldr	r3, [pc, #72]	; (8005840 <hci_user_evt_proc+0x94>)
 80057f6:	2201      	movs	r2, #1
 80057f8:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 80057fa:	4b11      	ldr	r3, [pc, #68]	; (8005840 <hci_user_evt_proc+0x94>)
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d004      	beq.n	800580c <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	4618      	mov	r0, r3
 8005806:	f000 fc03 	bl	8006010 <TL_MM_EvtDone>
 800580a:	e004      	b.n	8005816 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	4619      	mov	r1, r3
 8005810:	480a      	ldr	r0, [pc, #40]	; (800583c <hci_user_evt_proc+0x90>)
 8005812:	f000 fd1b 	bl	800624c <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8005816:	4809      	ldr	r0, [pc, #36]	; (800583c <hci_user_evt_proc+0x90>)
 8005818:	f000 fcf6 	bl	8006208 <LST_is_empty>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d107      	bne.n	8005832 <hci_user_evt_proc+0x86>
 8005822:	4b07      	ldr	r3, [pc, #28]	; (8005840 <hci_user_evt_proc+0x94>)
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d003      	beq.n	8005832 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800582a:	4804      	ldr	r0, [pc, #16]	; (800583c <hci_user_evt_proc+0x90>)
 800582c:	f001 f830 	bl	8006890 <hci_notify_asynch_evt>
  }


  return;
 8005830:	bf00      	nop
 8005832:	bf00      	nop
}
 8005834:	3710      	adds	r7, #16
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	200008d4 	.word	0x200008d4
 8005840:	200008e0 	.word	0x200008e0
 8005844:	20000a18 	.word	0x20000a18

08005848 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b088      	sub	sp, #32
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	460b      	mov	r3, r1
 8005852:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8005854:	2000      	movs	r0, #0
 8005856:	f000 f8cb 	bl	80059f0 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800585a:	2300      	movs	r3, #0
 800585c:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	885b      	ldrh	r3, [r3, #2]
 8005862:	b21b      	sxth	r3, r3
 8005864:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005868:	b21a      	sxth	r2, r3
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	881b      	ldrh	r3, [r3, #0]
 800586e:	029b      	lsls	r3, r3, #10
 8005870:	b21b      	sxth	r3, r3
 8005872:	4313      	orrs	r3, r2
 8005874:	b21b      	sxth	r3, r3
 8005876:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	b2d9      	uxtb	r1, r3
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	689a      	ldr	r2, [r3, #8]
 8005882:	8bbb      	ldrh	r3, [r7, #28]
 8005884:	4618      	mov	r0, r3
 8005886:	f000 f88d 	bl	80059a4 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800588a:	e04e      	b.n	800592a <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800588c:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8005890:	f001 f815 	bl	80068be <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8005894:	e043      	b.n	800591e <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8005896:	f107 030c 	add.w	r3, r7, #12
 800589a:	4619      	mov	r1, r3
 800589c:	4828      	ldr	r0, [pc, #160]	; (8005940 <hci_send_req+0xf8>)
 800589e:	f000 fd42 	bl	8006326 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	7a5b      	ldrb	r3, [r3, #9]
 80058a6:	2b0f      	cmp	r3, #15
 80058a8:	d114      	bne.n	80058d4 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	330b      	adds	r3, #11
 80058ae:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	885b      	ldrh	r3, [r3, #2]
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	8bba      	ldrh	r2, [r7, #28]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d104      	bne.n	80058c6 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	691b      	ldr	r3, [r3, #16]
 80058c0:	693a      	ldr	r2, [r7, #16]
 80058c2:	7812      	ldrb	r2, [r2, #0]
 80058c4:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	785b      	ldrb	r3, [r3, #1]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d027      	beq.n	800591e <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80058ce:	2301      	movs	r3, #1
 80058d0:	77fb      	strb	r3, [r7, #31]
 80058d2:	e024      	b.n	800591e <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	330b      	adds	r3, #11
 80058d8:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	8bba      	ldrh	r2, [r7, #28]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d114      	bne.n	8005912 <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	7a9b      	ldrb	r3, [r3, #10]
 80058ec:	3b03      	subs	r3, #3
 80058ee:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	695a      	ldr	r2, [r3, #20]
 80058f4:	7dfb      	ldrb	r3, [r7, #23]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	bfa8      	it	ge
 80058fa:	461a      	movge	r2, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6918      	ldr	r0, [r3, #16]
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	1cd9      	adds	r1, r3, #3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	695b      	ldr	r3, [r3, #20]
 800590c:	461a      	mov	r2, r3
 800590e:	f001 fde5 	bl	80074dc <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d001      	beq.n	800591e <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800591a:	2301      	movs	r3, #1
 800591c:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800591e:	4808      	ldr	r0, [pc, #32]	; (8005940 <hci_send_req+0xf8>)
 8005920:	f000 fc72 	bl	8006208 <LST_is_empty>
 8005924:	4603      	mov	r3, r0
 8005926:	2b00      	cmp	r3, #0
 8005928:	d0b5      	beq.n	8005896 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800592a:	7ffb      	ldrb	r3, [r7, #31]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d0ad      	beq.n	800588c <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8005930:	2001      	movs	r0, #1
 8005932:	f000 f85d 	bl	80059f0 <NotifyCmdStatus>

  return 0;
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	3720      	adds	r7, #32
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}
 8005940:	20000a38 	.word	0x20000a38

08005944 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b086      	sub	sp, #24
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800594c:	480f      	ldr	r0, [pc, #60]	; (800598c <TlInit+0x48>)
 800594e:	f000 fc4b 	bl	80061e8 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8005952:	4a0f      	ldr	r2, [pc, #60]	; (8005990 <TlInit+0x4c>)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8005958:	480e      	ldr	r0, [pc, #56]	; (8005994 <TlInit+0x50>)
 800595a:	f000 fc45 	bl	80061e8 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800595e:	4b0e      	ldr	r3, [pc, #56]	; (8005998 <TlInit+0x54>)
 8005960:	2201      	movs	r2, #1
 8005962:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8005964:	4b0d      	ldr	r3, [pc, #52]	; (800599c <TlInit+0x58>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d00a      	beq.n	8005982 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8005970:	4b0b      	ldr	r3, [pc, #44]	; (80059a0 <TlInit+0x5c>)
 8005972:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8005974:	4b09      	ldr	r3, [pc, #36]	; (800599c <TlInit+0x58>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f107 0208 	add.w	r2, r7, #8
 800597c:	4610      	mov	r0, r2
 800597e:	4798      	blx	r3
  }

  return;
 8005980:	bf00      	nop
 8005982:	bf00      	nop
}
 8005984:	3718      	adds	r7, #24
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	20000a38 	.word	0x20000a38
 8005990:	200008dc 	.word	0x200008dc
 8005994:	200008d4 	.word	0x200008d4
 8005998:	200008e0 	.word	0x200008e0
 800599c:	20000a18 	.word	0x20000a18
 80059a0:	08005a31 	.word	0x08005a31

080059a4 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b082      	sub	sp, #8
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	4603      	mov	r3, r0
 80059ac:	603a      	str	r2, [r7, #0]
 80059ae:	80fb      	strh	r3, [r7, #6]
 80059b0:	460b      	mov	r3, r1
 80059b2:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 80059b4:	4b0c      	ldr	r3, [pc, #48]	; (80059e8 <SendCmd+0x44>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	88fa      	ldrh	r2, [r7, #6]
 80059ba:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 80059be:	4b0a      	ldr	r3, [pc, #40]	; (80059e8 <SendCmd+0x44>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	797a      	ldrb	r2, [r7, #5]
 80059c4:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 80059c6:	4b08      	ldr	r3, [pc, #32]	; (80059e8 <SendCmd+0x44>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	330c      	adds	r3, #12
 80059cc:	797a      	ldrb	r2, [r7, #5]
 80059ce:	6839      	ldr	r1, [r7, #0]
 80059d0:	4618      	mov	r0, r3
 80059d2:	f001 fd83 	bl	80074dc <memcpy>

  hciContext.io.Send(0,0);
 80059d6:	4b05      	ldr	r3, [pc, #20]	; (80059ec <SendCmd+0x48>)
 80059d8:	691b      	ldr	r3, [r3, #16]
 80059da:	2100      	movs	r1, #0
 80059dc:	2000      	movs	r0, #0
 80059de:	4798      	blx	r3

  return;
 80059e0:	bf00      	nop
}
 80059e2:	3708      	adds	r7, #8
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	200008dc 	.word	0x200008dc
 80059ec:	20000a18 	.word	0x20000a18

080059f0 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b082      	sub	sp, #8
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	4603      	mov	r3, r0
 80059f8:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 80059fa:	79fb      	ldrb	r3, [r7, #7]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d108      	bne.n	8005a12 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8005a00:	4b0a      	ldr	r3, [pc, #40]	; (8005a2c <NotifyCmdStatus+0x3c>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d00d      	beq.n	8005a24 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8005a08:	4b08      	ldr	r3, [pc, #32]	; (8005a2c <NotifyCmdStatus+0x3c>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2000      	movs	r0, #0
 8005a0e:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8005a10:	e008      	b.n	8005a24 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8005a12:	4b06      	ldr	r3, [pc, #24]	; (8005a2c <NotifyCmdStatus+0x3c>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d004      	beq.n	8005a24 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8005a1a:	4b04      	ldr	r3, [pc, #16]	; (8005a2c <NotifyCmdStatus+0x3c>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2001      	movs	r0, #1
 8005a20:	4798      	blx	r3
  return;
 8005a22:	bf00      	nop
 8005a24:	bf00      	nop
}
 8005a26:	3708      	adds	r7, #8
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	20000a40 	.word	0x20000a40

08005a30 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b082      	sub	sp, #8
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	7a5b      	ldrb	r3, [r3, #9]
 8005a3c:	2b0f      	cmp	r3, #15
 8005a3e:	d003      	beq.n	8005a48 <TlEvtReceived+0x18>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	7a5b      	ldrb	r3, [r3, #9]
 8005a44:	2b0e      	cmp	r3, #14
 8005a46:	d107      	bne.n	8005a58 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8005a48:	6879      	ldr	r1, [r7, #4]
 8005a4a:	4809      	ldr	r0, [pc, #36]	; (8005a70 <TlEvtReceived+0x40>)
 8005a4c:	f000 fc24 	bl	8006298 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8005a50:	2000      	movs	r0, #0
 8005a52:	f000 ff29 	bl	80068a8 <hci_cmd_resp_release>
 8005a56:	e006      	b.n	8005a66 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8005a58:	6879      	ldr	r1, [r7, #4]
 8005a5a:	4806      	ldr	r0, [pc, #24]	; (8005a74 <TlEvtReceived+0x44>)
 8005a5c:	f000 fc1c 	bl	8006298 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8005a60:	4804      	ldr	r0, [pc, #16]	; (8005a74 <TlEvtReceived+0x44>)
 8005a62:	f000 ff15 	bl	8006890 <hci_notify_asynch_evt>
  }

  return;
 8005a66:	bf00      	nop
}
 8005a68:	3708      	adds	r7, #8
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	20000a38 	.word	0x20000a38
 8005a74:	200008d4 	.word	0x200008d4

08005a78 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a05      	ldr	r2, [pc, #20]	; (8005a98 <hci_register_io_bus+0x20>)
 8005a84:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a04      	ldr	r2, [pc, #16]	; (8005a9c <hci_register_io_bus+0x24>)
 8005a8a:	611a      	str	r2, [r3, #16]

  return;
 8005a8c:	bf00      	nop
}
 8005a8e:	370c      	adds	r7, #12
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr
 8005a98:	08005d89 	.word	0x08005d89
 8005a9c:	08005df1 	.word	0x08005df1

08005aa0 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	4a08      	ldr	r2, [pc, #32]	; (8005ad0 <shci_init+0x30>)
 8005ab0:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8005ab2:	4a08      	ldr	r2, [pc, #32]	; (8005ad4 <shci_init+0x34>)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8005ab8:	4806      	ldr	r0, [pc, #24]	; (8005ad4 <shci_init+0x34>)
 8005aba:	f000 f911 	bl	8005ce0 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f000 f894 	bl	8005bf0 <TlInit>

  return;
 8005ac8:	bf00      	nop
}
 8005aca:	3708      	adds	r7, #8
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	20000a64 	.word	0x20000a64
 8005ad4:	20000a44 	.word	0x20000a44

08005ad8 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b084      	sub	sp, #16
 8005adc:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8005ade:	4822      	ldr	r0, [pc, #136]	; (8005b68 <shci_user_evt_proc+0x90>)
 8005ae0:	f000 fb92 	bl	8006208 <LST_is_empty>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d12b      	bne.n	8005b42 <shci_user_evt_proc+0x6a>
 8005aea:	4b20      	ldr	r3, [pc, #128]	; (8005b6c <shci_user_evt_proc+0x94>)
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d027      	beq.n	8005b42 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8005af2:	f107 030c 	add.w	r3, r7, #12
 8005af6:	4619      	mov	r1, r3
 8005af8:	481b      	ldr	r0, [pc, #108]	; (8005b68 <shci_user_evt_proc+0x90>)
 8005afa:	f000 fc14 	bl	8006326 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8005afe:	4b1c      	ldr	r3, [pc, #112]	; (8005b70 <shci_user_evt_proc+0x98>)
 8005b00:	69db      	ldr	r3, [r3, #28]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d00c      	beq.n	8005b20 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8005b0e:	4b18      	ldr	r3, [pc, #96]	; (8005b70 <shci_user_evt_proc+0x98>)
 8005b10:	69db      	ldr	r3, [r3, #28]
 8005b12:	1d3a      	adds	r2, r7, #4
 8005b14:	4610      	mov	r0, r2
 8005b16:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8005b18:	793a      	ldrb	r2, [r7, #4]
 8005b1a:	4b14      	ldr	r3, [pc, #80]	; (8005b6c <shci_user_evt_proc+0x94>)
 8005b1c:	701a      	strb	r2, [r3, #0]
 8005b1e:	e002      	b.n	8005b26 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8005b20:	4b12      	ldr	r3, [pc, #72]	; (8005b6c <shci_user_evt_proc+0x94>)
 8005b22:	2201      	movs	r2, #1
 8005b24:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8005b26:	4b11      	ldr	r3, [pc, #68]	; (8005b6c <shci_user_evt_proc+0x94>)
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d004      	beq.n	8005b38 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	4618      	mov	r0, r3
 8005b32:	f000 fa6d 	bl	8006010 <TL_MM_EvtDone>
 8005b36:	e004      	b.n	8005b42 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	480a      	ldr	r0, [pc, #40]	; (8005b68 <shci_user_evt_proc+0x90>)
 8005b3e:	f000 fb85 	bl	800624c <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8005b42:	4809      	ldr	r0, [pc, #36]	; (8005b68 <shci_user_evt_proc+0x90>)
 8005b44:	f000 fb60 	bl	8006208 <LST_is_empty>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d107      	bne.n	8005b5e <shci_user_evt_proc+0x86>
 8005b4e:	4b07      	ldr	r3, [pc, #28]	; (8005b6c <shci_user_evt_proc+0x94>)
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d003      	beq.n	8005b5e <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8005b56:	4804      	ldr	r0, [pc, #16]	; (8005b68 <shci_user_evt_proc+0x90>)
 8005b58:	f7fa fe31 	bl	80007be <shci_notify_asynch_evt>
  }


  return;
 8005b5c:	bf00      	nop
 8005b5e:	bf00      	nop
}
 8005b60:	3710      	adds	r7, #16
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	200008e4 	.word	0x200008e4
 8005b6c:	200008f4 	.word	0x200008f4
 8005b70:	20000a44 	.word	0x20000a44

08005b74 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	60ba      	str	r2, [r7, #8]
 8005b7c:	607b      	str	r3, [r7, #4]
 8005b7e:	4603      	mov	r3, r0
 8005b80:	81fb      	strh	r3, [r7, #14]
 8005b82:	460b      	mov	r3, r1
 8005b84:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8005b86:	2000      	movs	r0, #0
 8005b88:	f000 f864 	bl	8005c54 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8005b8c:	4b16      	ldr	r3, [pc, #88]	; (8005be8 <shci_send+0x74>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	89fa      	ldrh	r2, [r7, #14]
 8005b92:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8005b96:	4b14      	ldr	r3, [pc, #80]	; (8005be8 <shci_send+0x74>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	7b7a      	ldrb	r2, [r7, #13]
 8005b9c:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8005b9e:	4b12      	ldr	r3, [pc, #72]	; (8005be8 <shci_send+0x74>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	330c      	adds	r3, #12
 8005ba4:	7b7a      	ldrb	r2, [r7, #13]
 8005ba6:	68b9      	ldr	r1, [r7, #8]
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f001 fc97 	bl	80074dc <memcpy>

  shciContext.io.Send(0,0);
 8005bae:	4b0f      	ldr	r3, [pc, #60]	; (8005bec <shci_send+0x78>)
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	2100      	movs	r1, #0
 8005bb4:	2000      	movs	r0, #0
 8005bb6:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8005bb8:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8005bbc:	f7fa fe16 	bl	80007ec <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f103 0008 	add.w	r0, r3, #8
 8005bc6:	4b08      	ldr	r3, [pc, #32]	; (8005be8 <shci_send+0x74>)
 8005bc8:	6819      	ldr	r1, [r3, #0]
 8005bca:	4b07      	ldr	r3, [pc, #28]	; (8005be8 <shci_send+0x74>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	789b      	ldrb	r3, [r3, #2]
 8005bd0:	3303      	adds	r3, #3
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	f001 fc82 	bl	80074dc <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8005bd8:	2001      	movs	r0, #1
 8005bda:	f000 f83b 	bl	8005c54 <Cmd_SetStatus>

  return;
 8005bde:	bf00      	nop
}
 8005be0:	3710      	adds	r7, #16
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	200008f0 	.word	0x200008f0
 8005bec:	20000a44 	.word	0x20000a44

08005bf0 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b086      	sub	sp, #24
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8005bf8:	4a10      	ldr	r2, [pc, #64]	; (8005c3c <TlInit+0x4c>)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8005bfe:	4810      	ldr	r0, [pc, #64]	; (8005c40 <TlInit+0x50>)
 8005c00:	f000 faf2 	bl	80061e8 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8005c04:	2001      	movs	r0, #1
 8005c06:	f000 f825 	bl	8005c54 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8005c0a:	4b0e      	ldr	r3, [pc, #56]	; (8005c44 <TlInit+0x54>)
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8005c10:	4b0d      	ldr	r3, [pc, #52]	; (8005c48 <TlInit+0x58>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d00c      	beq.n	8005c32 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8005c1c:	4b0b      	ldr	r3, [pc, #44]	; (8005c4c <TlInit+0x5c>)
 8005c1e:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8005c20:	4b0b      	ldr	r3, [pc, #44]	; (8005c50 <TlInit+0x60>)
 8005c22:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8005c24:	4b08      	ldr	r3, [pc, #32]	; (8005c48 <TlInit+0x58>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f107 020c 	add.w	r2, r7, #12
 8005c2c:	4610      	mov	r0, r2
 8005c2e:	4798      	blx	r3
  }

  return;
 8005c30:	bf00      	nop
 8005c32:	bf00      	nop
}
 8005c34:	3718      	adds	r7, #24
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	200008f0 	.word	0x200008f0
 8005c40:	200008e4 	.word	0x200008e4
 8005c44:	200008f4 	.word	0x200008f4
 8005c48:	20000a44 	.word	0x20000a44
 8005c4c:	08005ca5 	.word	0x08005ca5
 8005c50:	08005cbd 	.word	0x08005cbd

08005c54 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b082      	sub	sp, #8
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8005c5e:	79fb      	ldrb	r3, [r7, #7]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d10b      	bne.n	8005c7c <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8005c64:	4b0d      	ldr	r3, [pc, #52]	; (8005c9c <Cmd_SetStatus+0x48>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d003      	beq.n	8005c74 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8005c6c:	4b0b      	ldr	r3, [pc, #44]	; (8005c9c <Cmd_SetStatus+0x48>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	2000      	movs	r0, #0
 8005c72:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8005c74:	4b0a      	ldr	r3, [pc, #40]	; (8005ca0 <Cmd_SetStatus+0x4c>)
 8005c76:	2200      	movs	r2, #0
 8005c78:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8005c7a:	e00b      	b.n	8005c94 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8005c7c:	4b08      	ldr	r3, [pc, #32]	; (8005ca0 <Cmd_SetStatus+0x4c>)
 8005c7e:	2201      	movs	r2, #1
 8005c80:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8005c82:	4b06      	ldr	r3, [pc, #24]	; (8005c9c <Cmd_SetStatus+0x48>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d004      	beq.n	8005c94 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8005c8a:	4b04      	ldr	r3, [pc, #16]	; (8005c9c <Cmd_SetStatus+0x48>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	2001      	movs	r0, #1
 8005c90:	4798      	blx	r3
  return;
 8005c92:	bf00      	nop
 8005c94:	bf00      	nop
}
 8005c96:	3708      	adds	r7, #8
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}
 8005c9c:	20000a64 	.word	0x20000a64
 8005ca0:	200008ec 	.word	0x200008ec

08005ca4 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8005cac:	2000      	movs	r0, #0
 8005cae:	f7fa fd92 	bl	80007d6 <shci_cmd_resp_release>

  return;
 8005cb2:	bf00      	nop
}
 8005cb4:	3708      	adds	r7, #8
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
	...

08005cbc <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b082      	sub	sp, #8
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8005cc4:	6879      	ldr	r1, [r7, #4]
 8005cc6:	4805      	ldr	r0, [pc, #20]	; (8005cdc <TlUserEvtReceived+0x20>)
 8005cc8:	f000 fae6 	bl	8006298 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8005ccc:	4803      	ldr	r0, [pc, #12]	; (8005cdc <TlUserEvtReceived+0x20>)
 8005cce:	f7fa fd76 	bl	80007be <shci_notify_asynch_evt>

  return;
 8005cd2:	bf00      	nop
}
 8005cd4:	3708      	adds	r7, #8
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	200008e4 	.word	0x200008e4

08005ce0 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4a05      	ldr	r2, [pc, #20]	; (8005d00 <shci_register_io_bus+0x20>)
 8005cec:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a04      	ldr	r2, [pc, #16]	; (8005d04 <shci_register_io_bus+0x24>)
 8005cf2:	611a      	str	r2, [r3, #16]

  return;
 8005cf4:	bf00      	nop
}
 8005cf6:	370c      	adds	r7, #12
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr
 8005d00:	08005e9d 	.word	0x08005e9d
 8005d04:	08005ef1 	.word	0x08005ef1

08005d08 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8005d0c:	f001 f870 	bl	8006df0 <HW_IPCC_Enable>

  return;
 8005d10:	bf00      	nop
}
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <TL_Init>:


void TL_Init( void )
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8005d18:	4b10      	ldr	r3, [pc, #64]	; (8005d5c <TL_Init+0x48>)
 8005d1a:	4a11      	ldr	r2, [pc, #68]	; (8005d60 <TL_Init+0x4c>)
 8005d1c:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8005d1e:	4b0f      	ldr	r3, [pc, #60]	; (8005d5c <TL_Init+0x48>)
 8005d20:	4a10      	ldr	r2, [pc, #64]	; (8005d64 <TL_Init+0x50>)
 8005d22:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8005d24:	4b0d      	ldr	r3, [pc, #52]	; (8005d5c <TL_Init+0x48>)
 8005d26:	4a10      	ldr	r2, [pc, #64]	; (8005d68 <TL_Init+0x54>)
 8005d28:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8005d2a:	4b0c      	ldr	r3, [pc, #48]	; (8005d5c <TL_Init+0x48>)
 8005d2c:	4a0f      	ldr	r2, [pc, #60]	; (8005d6c <TL_Init+0x58>)
 8005d2e:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8005d30:	4b0a      	ldr	r3, [pc, #40]	; (8005d5c <TL_Init+0x48>)
 8005d32:	4a0f      	ldr	r2, [pc, #60]	; (8005d70 <TL_Init+0x5c>)
 8005d34:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8005d36:	4b09      	ldr	r3, [pc, #36]	; (8005d5c <TL_Init+0x48>)
 8005d38:	4a0e      	ldr	r2, [pc, #56]	; (8005d74 <TL_Init+0x60>)
 8005d3a:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8005d3c:	4b07      	ldr	r3, [pc, #28]	; (8005d5c <TL_Init+0x48>)
 8005d3e:	4a0e      	ldr	r2, [pc, #56]	; (8005d78 <TL_Init+0x64>)
 8005d40:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8005d42:	4b06      	ldr	r3, [pc, #24]	; (8005d5c <TL_Init+0x48>)
 8005d44:	4a0d      	ldr	r2, [pc, #52]	; (8005d7c <TL_Init+0x68>)
 8005d46:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8005d48:	4b04      	ldr	r3, [pc, #16]	; (8005d5c <TL_Init+0x48>)
 8005d4a:	4a0d      	ldr	r2, [pc, #52]	; (8005d80 <TL_Init+0x6c>)
 8005d4c:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8005d4e:	4b03      	ldr	r3, [pc, #12]	; (8005d5c <TL_Init+0x48>)
 8005d50:	4a0c      	ldr	r2, [pc, #48]	; (8005d84 <TL_Init+0x70>)
 8005d52:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8005d54:	f001 f860 	bl	8006e18 <HW_IPCC_Init>

  return;
 8005d58:	bf00      	nop
}
 8005d5a:	bd80      	pop	{r7, pc}
 8005d5c:	20030000 	.word	0x20030000
 8005d60:	20030028 	.word	0x20030028
 8005d64:	20030048 	.word	0x20030048
 8005d68:	20030058 	.word	0x20030058
 8005d6c:	20030068 	.word	0x20030068
 8005d70:	20030070 	.word	0x20030070
 8005d74:	20030078 	.word	0x20030078
 8005d78:	20030080 	.word	0x20030080
 8005d7c:	2003009c 	.word	0x2003009c
 8005d80:	200300a0 	.word	0x200300a0
 8005d84:	200300ac 	.word	0x200300ac

08005d88 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8005d94:	4811      	ldr	r0, [pc, #68]	; (8005ddc <TL_BLE_Init+0x54>)
 8005d96:	f000 fa27 	bl	80061e8 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8005d9a:	4b11      	ldr	r3, [pc, #68]	; (8005de0 <TL_BLE_Init+0x58>)
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	689a      	ldr	r2, [r3, #8]
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	68da      	ldr	r2, [r3, #12]
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	4a0c      	ldr	r2, [pc, #48]	; (8005de4 <TL_BLE_Init+0x5c>)
 8005db4:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	4a08      	ldr	r2, [pc, #32]	; (8005ddc <TL_BLE_Init+0x54>)
 8005dba:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8005dbc:	f001 f842 	bl	8006e44 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a08      	ldr	r2, [pc, #32]	; (8005de8 <TL_BLE_Init+0x60>)
 8005dc6:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	4a07      	ldr	r2, [pc, #28]	; (8005dec <TL_BLE_Init+0x64>)
 8005dce:	6013      	str	r3, [r2, #0]

  return 0;
 8005dd0:	2300      	movs	r3, #0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3710      	adds	r7, #16
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	200300c8 	.word	0x200300c8
 8005de0:	20030000 	.word	0x20030000
 8005de4:	2000089c 	.word	0x2000089c
 8005de8:	20000a70 	.word	0x20000a70
 8005dec:	20000a74 	.word	0x20000a74

08005df0 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b082      	sub	sp, #8
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	460b      	mov	r3, r1
 8005dfa:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8005dfc:	4b09      	ldr	r3, [pc, #36]	; (8005e24 <TL_BLE_SendCmd+0x34>)
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	2201      	movs	r2, #1
 8005e04:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8005e06:	4b07      	ldr	r3, [pc, #28]	; (8005e24 <TL_BLE_SendCmd+0x34>)
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4619      	mov	r1, r3
 8005e0e:	2001      	movs	r0, #1
 8005e10:	f000 f96c 	bl	80060ec <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8005e14:	f001 f820 	bl	8006e58 <HW_IPCC_BLE_SendCmd>

  return 0;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3708      	adds	r7, #8
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	20030000 	.word	0x20030000

08005e28 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b082      	sub	sp, #8
 8005e2c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8005e2e:	e01c      	b.n	8005e6a <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8005e30:	1d3b      	adds	r3, r7, #4
 8005e32:	4619      	mov	r1, r3
 8005e34:	4812      	ldr	r0, [pc, #72]	; (8005e80 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8005e36:	f000 fa76 	bl	8006326 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	7a5b      	ldrb	r3, [r3, #9]
 8005e3e:	2b0f      	cmp	r3, #15
 8005e40:	d003      	beq.n	8005e4a <HW_IPCC_BLE_RxEvtNot+0x22>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	7a5b      	ldrb	r3, [r3, #9]
 8005e46:	2b0e      	cmp	r3, #14
 8005e48:	d105      	bne.n	8005e56 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	2002      	movs	r0, #2
 8005e50:	f000 f94c 	bl	80060ec <OutputDbgTrace>
 8005e54:	e004      	b.n	8005e60 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4619      	mov	r1, r3
 8005e5a:	2003      	movs	r0, #3
 8005e5c:	f000 f946 	bl	80060ec <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8005e60:	4b08      	ldr	r3, [pc, #32]	; (8005e84 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	4610      	mov	r0, r2
 8005e68:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8005e6a:	4805      	ldr	r0, [pc, #20]	; (8005e80 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8005e6c:	f000 f9cc 	bl	8006208 <LST_is_empty>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d0dc      	beq.n	8005e30 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8005e76:	bf00      	nop
}
 8005e78:	3708      	adds	r7, #8
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	bf00      	nop
 8005e80:	200300c8 	.word	0x200300c8
 8005e84:	20000a70 	.word	0x20000a70

08005e88 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8005e8c:	4b02      	ldr	r3, [pc, #8]	; (8005e98 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4798      	blx	r3

  return;
 8005e92:	bf00      	nop
}
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	20000a74 	.word	0x20000a74

08005e9c <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8005ea8:	480d      	ldr	r0, [pc, #52]	; (8005ee0 <TL_SYS_Init+0x44>)
 8005eaa:	f000 f99d 	bl	80061e8 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8005eae:	4b0d      	ldr	r3, [pc, #52]	; (8005ee4 <TL_SYS_Init+0x48>)
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	689a      	ldr	r2, [r3, #8]
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	4a08      	ldr	r2, [pc, #32]	; (8005ee0 <TL_SYS_Init+0x44>)
 8005ec0:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8005ec2:	f000 ffeb 	bl	8006e9c <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a07      	ldr	r2, [pc, #28]	; (8005ee8 <TL_SYS_Init+0x4c>)
 8005ecc:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	4a06      	ldr	r2, [pc, #24]	; (8005eec <TL_SYS_Init+0x50>)
 8005ed4:	6013      	str	r3, [r2, #0]

  return 0;
 8005ed6:	2300      	movs	r3, #0
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3710      	adds	r7, #16
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}
 8005ee0:	200300d0 	.word	0x200300d0
 8005ee4:	20030000 	.word	0x20030000
 8005ee8:	20000a78 	.word	0x20000a78
 8005eec:	20000a7c 	.word	0x20000a7c

08005ef0 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b082      	sub	sp, #8
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	460b      	mov	r3, r1
 8005efa:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8005efc:	4b09      	ldr	r3, [pc, #36]	; (8005f24 <TL_SYS_SendCmd+0x34>)
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2210      	movs	r2, #16
 8005f04:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8005f06:	4b07      	ldr	r3, [pc, #28]	; (8005f24 <TL_SYS_SendCmd+0x34>)
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	2004      	movs	r0, #4
 8005f10:	f000 f8ec 	bl	80060ec <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8005f14:	f000 ffcc 	bl	8006eb0 <HW_IPCC_SYS_SendCmd>

  return 0;
 8005f18:	2300      	movs	r3, #0
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3708      	adds	r7, #8
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop
 8005f24:	20030000 	.word	0x20030000

08005f28 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8005f2c:	4b07      	ldr	r3, [pc, #28]	; (8005f4c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4619      	mov	r1, r3
 8005f34:	2005      	movs	r0, #5
 8005f36:	f000 f8d9 	bl	80060ec <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8005f3a:	4b05      	ldr	r3, [pc, #20]	; (8005f50 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a03      	ldr	r2, [pc, #12]	; (8005f4c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8005f40:	68d2      	ldr	r2, [r2, #12]
 8005f42:	6812      	ldr	r2, [r2, #0]
 8005f44:	4610      	mov	r0, r2
 8005f46:	4798      	blx	r3

  return;
 8005f48:	bf00      	nop
}
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	20030000 	.word	0x20030000
 8005f50:	20000a78 	.word	0x20000a78

08005f54 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8005f5a:	e00e      	b.n	8005f7a <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8005f5c:	1d3b      	adds	r3, r7, #4
 8005f5e:	4619      	mov	r1, r3
 8005f60:	480b      	ldr	r0, [pc, #44]	; (8005f90 <HW_IPCC_SYS_EvtNot+0x3c>)
 8005f62:	f000 f9e0 	bl	8006326 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4619      	mov	r1, r3
 8005f6a:	2006      	movs	r0, #6
 8005f6c:	f000 f8be 	bl	80060ec <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8005f70:	4b08      	ldr	r3, [pc, #32]	; (8005f94 <HW_IPCC_SYS_EvtNot+0x40>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	4610      	mov	r0, r2
 8005f78:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8005f7a:	4805      	ldr	r0, [pc, #20]	; (8005f90 <HW_IPCC_SYS_EvtNot+0x3c>)
 8005f7c:	f000 f944 	bl	8006208 <LST_is_empty>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d0ea      	beq.n	8005f5c <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8005f86:	bf00      	nop
}
 8005f88:	3708      	adds	r7, #8
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	200300d0 	.word	0x200300d0
 8005f94:	20000a7c 	.word	0x20000a7c

08005f98 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8005fa0:	4817      	ldr	r0, [pc, #92]	; (8006000 <TL_MM_Init+0x68>)
 8005fa2:	f000 f921 	bl	80061e8 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8005fa6:	4817      	ldr	r0, [pc, #92]	; (8006004 <TL_MM_Init+0x6c>)
 8005fa8:	f000 f91e 	bl	80061e8 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8005fac:	4b16      	ldr	r3, [pc, #88]	; (8006008 <TL_MM_Init+0x70>)
 8005fae:	691b      	ldr	r3, [r3, #16]
 8005fb0:	4a16      	ldr	r2, [pc, #88]	; (800600c <TL_MM_Init+0x74>)
 8005fb2:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8005fb4:	4b15      	ldr	r3, [pc, #84]	; (800600c <TL_MM_Init+0x74>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	6892      	ldr	r2, [r2, #8]
 8005fbc:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8005fbe:	4b13      	ldr	r3, [pc, #76]	; (800600c <TL_MM_Init+0x74>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	68d2      	ldr	r2, [r2, #12]
 8005fc6:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8005fc8:	4b10      	ldr	r3, [pc, #64]	; (800600c <TL_MM_Init+0x74>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a0c      	ldr	r2, [pc, #48]	; (8006000 <TL_MM_Init+0x68>)
 8005fce:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8005fd0:	4b0e      	ldr	r3, [pc, #56]	; (800600c <TL_MM_Init+0x74>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	6812      	ldr	r2, [r2, #0]
 8005fd8:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8005fda:	4b0c      	ldr	r3, [pc, #48]	; (800600c <TL_MM_Init+0x74>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	6852      	ldr	r2, [r2, #4]
 8005fe2:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8005fe4:	4b09      	ldr	r3, [pc, #36]	; (800600c <TL_MM_Init+0x74>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	6912      	ldr	r2, [r2, #16]
 8005fec:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8005fee:	4b07      	ldr	r3, [pc, #28]	; (800600c <TL_MM_Init+0x74>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	6952      	ldr	r2, [r2, #20]
 8005ff6:	619a      	str	r2, [r3, #24]

  return;
 8005ff8:	bf00      	nop
}
 8005ffa:	3708      	adds	r7, #8
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	200300b8 	.word	0x200300b8
 8006004:	20000a68 	.word	0x20000a68
 8006008:	20030000 	.word	0x20030000
 800600c:	20000a80 	.word	0x20000a80

08006010 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8006018:	6879      	ldr	r1, [r7, #4]
 800601a:	4807      	ldr	r0, [pc, #28]	; (8006038 <TL_MM_EvtDone+0x28>)
 800601c:	f000 f93c 	bl	8006298 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8006020:	6879      	ldr	r1, [r7, #4]
 8006022:	2000      	movs	r0, #0
 8006024:	f000 f862 	bl	80060ec <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8006028:	4804      	ldr	r0, [pc, #16]	; (800603c <TL_MM_EvtDone+0x2c>)
 800602a:	f000 ff67 	bl	8006efc <HW_IPCC_MM_SendFreeBuf>

  return;
 800602e:	bf00      	nop
}
 8006030:	3708      	adds	r7, #8
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	20000a68 	.word	0x20000a68
 800603c:	08006041 	.word	0x08006041

08006040 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b082      	sub	sp, #8
 8006044:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8006046:	e00c      	b.n	8006062 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8006048:	1d3b      	adds	r3, r7, #4
 800604a:	4619      	mov	r1, r3
 800604c:	480a      	ldr	r0, [pc, #40]	; (8006078 <SendFreeBuf+0x38>)
 800604e:	f000 f96a 	bl	8006326 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8006052:	4b0a      	ldr	r3, [pc, #40]	; (800607c <SendFreeBuf+0x3c>)
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	4611      	mov	r1, r2
 800605c:	4618      	mov	r0, r3
 800605e:	f000 f91b 	bl	8006298 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8006062:	4805      	ldr	r0, [pc, #20]	; (8006078 <SendFreeBuf+0x38>)
 8006064:	f000 f8d0 	bl	8006208 <LST_is_empty>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d0ec      	beq.n	8006048 <SendFreeBuf+0x8>
  }

  return;
 800606e:	bf00      	nop
}
 8006070:	3708      	adds	r7, #8
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	20000a68 	.word	0x20000a68
 800607c:	20030000 	.word	0x20030000

08006080 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8006080:	b580      	push	{r7, lr}
 8006082:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8006084:	4805      	ldr	r0, [pc, #20]	; (800609c <TL_TRACES_Init+0x1c>)
 8006086:	f000 f8af 	bl	80061e8 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800608a:	4b05      	ldr	r3, [pc, #20]	; (80060a0 <TL_TRACES_Init+0x20>)
 800608c:	695b      	ldr	r3, [r3, #20]
 800608e:	4a03      	ldr	r2, [pc, #12]	; (800609c <TL_TRACES_Init+0x1c>)
 8006090:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8006092:	f000 ff69 	bl	8006f68 <HW_IPCC_TRACES_Init>

  return;
 8006096:	bf00      	nop
}
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	200300c0 	.word	0x200300c0
 80060a0:	20030000 	.word	0x20030000

080060a4 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b082      	sub	sp, #8
 80060a8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80060aa:	e008      	b.n	80060be <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 80060ac:	1d3b      	adds	r3, r7, #4
 80060ae:	4619      	mov	r1, r3
 80060b0:	4808      	ldr	r0, [pc, #32]	; (80060d4 <HW_IPCC_TRACES_EvtNot+0x30>)
 80060b2:	f000 f938 	bl	8006326 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4618      	mov	r0, r3
 80060ba:	f000 f80d 	bl	80060d8 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80060be:	4805      	ldr	r0, [pc, #20]	; (80060d4 <HW_IPCC_TRACES_EvtNot+0x30>)
 80060c0:	f000 f8a2 	bl	8006208 <LST_is_empty>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d0f0      	beq.n	80060ac <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 80060ca:	bf00      	nop
}
 80060cc:	3708      	adds	r7, #8
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	200300c0 	.word	0x200300c0

080060d8 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 80060e0:	bf00      	nop
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b085      	sub	sp, #20
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	4603      	mov	r3, r0
 80060f4:	6039      	str	r1, [r7, #0]
 80060f6:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 80060f8:	79fb      	ldrb	r3, [r7, #7]
 80060fa:	2b06      	cmp	r3, #6
 80060fc:	d845      	bhi.n	800618a <OutputDbgTrace+0x9e>
 80060fe:	a201      	add	r2, pc, #4	; (adr r2, 8006104 <OutputDbgTrace+0x18>)
 8006100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006104:	08006121 	.word	0x08006121
 8006108:	08006145 	.word	0x08006145
 800610c:	0800614b 	.word	0x0800614b
 8006110:	0800615f 	.word	0x0800615f
 8006114:	0800616b 	.word	0x0800616b
 8006118:	08006171 	.word	0x08006171
 800611c:	0800617f 	.word	0x0800617f
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	7a5b      	ldrb	r3, [r3, #9]
 8006128:	2bff      	cmp	r3, #255	; 0xff
 800612a:	d005      	beq.n	8006138 <OutputDbgTrace+0x4c>
 800612c:	2bff      	cmp	r3, #255	; 0xff
 800612e:	dc05      	bgt.n	800613c <OutputDbgTrace+0x50>
 8006130:	2b0e      	cmp	r3, #14
 8006132:	d005      	beq.n	8006140 <OutputDbgTrace+0x54>
 8006134:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8006136:	e001      	b.n	800613c <OutputDbgTrace+0x50>
          break;
 8006138:	bf00      	nop
 800613a:	e027      	b.n	800618c <OutputDbgTrace+0xa0>
          break;
 800613c:	bf00      	nop
 800613e:	e025      	b.n	800618c <OutputDbgTrace+0xa0>
          break;
 8006140:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8006142:	e023      	b.n	800618c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8006148:	e020      	b.n	800618c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	7a5b      	ldrb	r3, [r3, #9]
 8006152:	2b0e      	cmp	r3, #14
 8006154:	d001      	beq.n	800615a <OutputDbgTrace+0x6e>
 8006156:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8006158:	e000      	b.n	800615c <OutputDbgTrace+0x70>
          break;
 800615a:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800615c:	e016      	b.n	800618c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	7a5b      	ldrb	r3, [r3, #9]
 8006166:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8006168:	e010      	b.n	800618c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800616e:	e00d      	b.n	800618c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	7a5b      	ldrb	r3, [r3, #9]
 8006178:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800617a:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800617c:	e006      	b.n	800618c <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	7a5b      	ldrb	r3, [r3, #9]
 8006186:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8006188:	e000      	b.n	800618c <OutputDbgTrace+0xa0>

    default:
      break;
 800618a:	bf00      	nop
  }

  return;
 800618c:	bf00      	nop
}
 800618e:	3714      	adds	r7, #20
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8006198:	b480      	push	{r7}
 800619a:	b085      	sub	sp, #20
 800619c:	af00      	add	r7, sp, #0
 800619e:	4603      	mov	r3, r0
 80061a0:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 80061a2:	4b0f      	ldr	r3, [pc, #60]	; (80061e0 <OTP_Read+0x48>)
 80061a4:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80061a6:	e002      	b.n	80061ae <OTP_Read+0x16>
  {
    p_id -= 8 ;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	3b08      	subs	r3, #8
 80061ac:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	3307      	adds	r3, #7
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	79fa      	ldrb	r2, [r7, #7]
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d003      	beq.n	80061c2 <OTP_Read+0x2a>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	4a09      	ldr	r2, [pc, #36]	; (80061e4 <OTP_Read+0x4c>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d1f2      	bne.n	80061a8 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	3307      	adds	r3, #7
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	79fa      	ldrb	r2, [r7, #7]
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d001      	beq.n	80061d2 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 80061ce:	2300      	movs	r3, #0
 80061d0:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 80061d2:	68fb      	ldr	r3, [r7, #12]
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3714      	adds	r7, #20
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr
 80061e0:	1fff73f8 	.word	0x1fff73f8
 80061e4:	1fff7000 	.word	0x1fff7000

080061e8 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	605a      	str	r2, [r3, #4]
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8006208:	b480      	push	{r7}
 800620a:	b087      	sub	sp, #28
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006210:	f3ef 8310 	mrs	r3, PRIMASK
 8006214:	60fb      	str	r3, [r7, #12]
  return(result);
 8006216:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006218:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800621a:	b672      	cpsid	i
}
 800621c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	429a      	cmp	r2, r3
 8006226:	d102      	bne.n	800622e <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8006228:	2301      	movs	r3, #1
 800622a:	75fb      	strb	r3, [r7, #23]
 800622c:	e001      	b.n	8006232 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800622e:	2300      	movs	r3, #0
 8006230:	75fb      	strb	r3, [r7, #23]
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	f383 8810 	msr	PRIMASK, r3
}
 800623c:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800623e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006240:	4618      	mov	r0, r3
 8006242:	371c      	adds	r7, #28
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800624c:	b480      	push	{r7}
 800624e:	b087      	sub	sp, #28
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006256:	f3ef 8310 	mrs	r3, PRIMASK
 800625a:	60fb      	str	r3, [r7, #12]
  return(result);
 800625c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800625e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006260:	b672      	cpsid	i
}
 8006262:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	683a      	ldr	r2, [r7, #0]
 8006276:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	683a      	ldr	r2, [r7, #0]
 800627e:	605a      	str	r2, [r3, #4]
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	f383 8810 	msr	PRIMASK, r3
}
 800628a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800628c:	bf00      	nop
 800628e:	371c      	adds	r7, #28
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8006298:	b480      	push	{r7}
 800629a:	b087      	sub	sp, #28
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062a2:	f3ef 8310 	mrs	r3, PRIMASK
 80062a6:	60fb      	str	r3, [r7, #12]
  return(result);
 80062a8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80062aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80062ac:	b672      	cpsid	i
}
 80062ae:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	685a      	ldr	r2, [r3, #4]
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	683a      	ldr	r2, [r7, #0]
 80062c2:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	683a      	ldr	r2, [r7, #0]
 80062ca:	601a      	str	r2, [r3, #0]
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	f383 8810 	msr	PRIMASK, r3
}
 80062d6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80062d8:	bf00      	nop
 80062da:	371c      	adds	r7, #28
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b087      	sub	sp, #28
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062ec:	f3ef 8310 	mrs	r3, PRIMASK
 80062f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80062f2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80062f4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80062f6:	b672      	cpsid	i
}
 80062f8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	6812      	ldr	r2, [r2, #0]
 8006302:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	6852      	ldr	r2, [r2, #4]
 800630c:	605a      	str	r2, [r3, #4]
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	f383 8810 	msr	PRIMASK, r3
}
 8006318:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800631a:	bf00      	nop
 800631c:	371c      	adds	r7, #28
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr

08006326 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8006326:	b580      	push	{r7, lr}
 8006328:	b086      	sub	sp, #24
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
 800632e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006330:	f3ef 8310 	mrs	r3, PRIMASK
 8006334:	60fb      	str	r3, [r7, #12]
  return(result);
 8006336:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006338:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800633a:	b672      	cpsid	i
}
 800633c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4618      	mov	r0, r3
 800634c:	f7ff ffca 	bl	80062e4 <LST_remove_node>
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	f383 8810 	msr	PRIMASK, r3
}
 800635a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800635c:	bf00      	nop
 800635e:	3718      	adds	r7, #24
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8006364:	b480      	push	{r7}
 8006366:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8006368:	4b03      	ldr	r3, [pc, #12]	; (8006378 <LL_FLASH_GetUDN+0x14>)
 800636a:	681b      	ldr	r3, [r3, #0]
}
 800636c:	4618      	mov	r0, r3
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop
 8006378:	1fff7580 	.word	0x1fff7580

0800637c <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800637c:	b480      	push	{r7}
 800637e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8006380:	4b03      	ldr	r3, [pc, #12]	; (8006390 <LL_FLASH_GetDeviceID+0x14>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	b2db      	uxtb	r3, r3
}
 8006386:	4618      	mov	r0, r3
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr
 8006390:	1fff7584 	.word	0x1fff7584

08006394 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8006394:	b480      	push	{r7}
 8006396:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8006398:	4b03      	ldr	r3, [pc, #12]	; (80063a8 <LL_FLASH_GetSTCompanyID+0x14>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	0a1b      	lsrs	r3, r3, #8
}
 800639e:	4618      	mov	r0, r3
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr
 80063a8:	1fff7584 	.word	0x1fff7584

080063ac <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 80063ac:	b5b0      	push	{r4, r5, r7, lr}
 80063ae:	b090      	sub	sp, #64	; 0x40
 80063b0:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80063b2:	2392      	movs	r3, #146	; 0x92
 80063b4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 80063b8:	4b25      	ldr	r3, [pc, #148]	; (8006450 <APP_BLE_Init+0xa4>)
 80063ba:	1d3c      	adds	r4, r7, #4
 80063bc:	461d      	mov	r5, r3
 80063be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80063c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80063c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80063c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80063ce:	c403      	stmia	r4!, {r0, r1}
 80063d0:	7022      	strb	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 80063d2:	f000 f905 	bl	80065e0 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 80063d6:	2101      	movs	r1, #1
 80063d8:	2002      	movs	r0, #2
 80063da:	f000 fded 	bl	8006fb8 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 80063de:	4a1d      	ldr	r2, [pc, #116]	; (8006454 <APP_BLE_Init+0xa8>)
 80063e0:	2100      	movs	r1, #0
 80063e2:	2002      	movs	r0, #2
 80063e4:	f000 ff14 	bl	8007210 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 80063e8:	1d3b      	adds	r3, r7, #4
 80063ea:	4618      	mov	r0, r3
 80063ec:	f7ff f8d0 	bl	8005590 <SHCI_C2_BLE_Init>
 80063f0:	4603      	mov	r3, r0
 80063f2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 80063f6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d001      	beq.n	8006402 <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 80063fe:	f7fb f987 	bl	8001710 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8006402:	f000 f903 	bl	800660c <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8006406:	f7ff f81d 	bl	8005444 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800640a:	4b13      	ldr	r3, [pc, #76]	; (8006458 <APP_BLE_Init+0xac>)
 800640c:	2200      	movs	r2, #0
 800640e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8006412:	4b11      	ldr	r3, [pc, #68]	; (8006458 <APP_BLE_Init+0xac>)
 8006414:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006418:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800641a:	4a10      	ldr	r2, [pc, #64]	; (800645c <APP_BLE_Init+0xb0>)
 800641c:	2100      	movs	r1, #0
 800641e:	2001      	movs	r0, #1
 8006420:	f000 fef6 	bl	8007210 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 8006424:	2006      	movs	r0, #6
 8006426:	f7fe fe80 	bl	800512a <aci_hal_set_radio_activity_mask>
 800642a:	4603      	mov	r3, r0
 800642c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 8006430:	f000 fa9b 	bl	800696a <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8006434:	4b08      	ldr	r3, [pc, #32]	; (8006458 <APP_BLE_Init+0xac>)
 8006436:	2200      	movs	r2, #0
 8006438:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800643a:	4b07      	ldr	r3, [pc, #28]	; (8006458 <APP_BLE_Init+0xac>)
 800643c:	2200      	movs	r2, #0
 800643e:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8006440:	2001      	movs	r0, #1
 8006442:	f000 f997 	bl	8006774 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8006446:	bf00      	nop
}
 8006448:	3740      	adds	r7, #64	; 0x40
 800644a:	46bd      	mov	sp, r7
 800644c:	bdb0      	pop	{r4, r5, r7, pc}
 800644e:	bf00      	nop
 8006450:	08007568 	.word	0x08007568
 8006454:	080057ad 	.word	0x080057ad
 8006458:	20000a8c 	.word	0x20000a8c
 800645c:	0800685d 	.word	0x0800685d

08006460 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b08a      	sub	sp, #40	; 0x28
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8006468:	2392      	movs	r3, #146	; 0x92
 800646a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	3301      	adds	r3, #1
 8006472:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 8006474:	6a3b      	ldr	r3, [r7, #32]
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	2bff      	cmp	r3, #255	; 0xff
 800647a:	d053      	beq.n	8006524 <SVCCTL_App_Notification+0xc4>
 800647c:	2bff      	cmp	r3, #255	; 0xff
 800647e:	f300 80a1 	bgt.w	80065c4 <SVCCTL_App_Notification+0x164>
 8006482:	2b05      	cmp	r3, #5
 8006484:	d002      	beq.n	800648c <SVCCTL_App_Notification+0x2c>
 8006486:	2b3e      	cmp	r3, #62	; 0x3e
 8006488:	d020      	beq.n	80064cc <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800648a:	e09b      	b.n	80065c4 <SVCCTL_App_Notification+0x164>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800648c:	6a3b      	ldr	r3, [r7, #32]
 800648e:	3302      	adds	r3, #2
 8006490:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006498:	b29a      	uxth	r2, r3
 800649a:	4b4e      	ldr	r3, [pc, #312]	; (80065d4 <SVCCTL_App_Notification+0x174>)
 800649c:	8adb      	ldrh	r3, [r3, #22]
 800649e:	429a      	cmp	r2, r3
 80064a0:	d106      	bne.n	80064b0 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 80064a2:	4b4c      	ldr	r3, [pc, #304]	; (80065d4 <SVCCTL_App_Notification+0x174>)
 80064a4:	2200      	movs	r2, #0
 80064a6:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80064a8:	4b4a      	ldr	r3, [pc, #296]	; (80065d4 <SVCCTL_App_Notification+0x174>)
 80064aa:	2200      	movs	r2, #0
 80064ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 80064b0:	2001      	movs	r0, #1
 80064b2:	f000 f95f 	bl	8006774 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 80064b6:	4b48      	ldr	r3, [pc, #288]	; (80065d8 <SVCCTL_App_Notification+0x178>)
 80064b8:	2201      	movs	r2, #1
 80064ba:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80064bc:	4b45      	ldr	r3, [pc, #276]	; (80065d4 <SVCCTL_App_Notification+0x174>)
 80064be:	8ada      	ldrh	r2, [r3, #22]
 80064c0:	4b45      	ldr	r3, [pc, #276]	; (80065d8 <SVCCTL_App_Notification+0x178>)
 80064c2:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 80064c4:	4844      	ldr	r0, [pc, #272]	; (80065d8 <SVCCTL_App_Notification+0x178>)
 80064c6:	f000 fa3c 	bl	8006942 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 80064ca:	e07e      	b.n	80065ca <SVCCTL_App_Notification+0x16a>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 80064cc:	6a3b      	ldr	r3, [r7, #32]
 80064ce:	3302      	adds	r3, #2
 80064d0:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d001      	beq.n	80064de <SVCCTL_App_Notification+0x7e>
 80064da:	2b03      	cmp	r3, #3
          break;
 80064dc:	e021      	b.n	8006522 <SVCCTL_App_Notification+0xc2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	3301      	adds	r3, #1
 80064e2:	613b      	str	r3, [r7, #16]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 80064e4:	4b3b      	ldr	r3, [pc, #236]	; (80065d4 <SVCCTL_App_Notification+0x174>)
 80064e6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80064ea:	2b04      	cmp	r3, #4
 80064ec:	d104      	bne.n	80064f8 <SVCCTL_App_Notification+0x98>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 80064ee:	4b39      	ldr	r3, [pc, #228]	; (80065d4 <SVCCTL_App_Notification+0x174>)
 80064f0:	2206      	movs	r2, #6
 80064f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 80064f6:	e003      	b.n	8006500 <SVCCTL_App_Notification+0xa0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 80064f8:	4b36      	ldr	r3, [pc, #216]	; (80065d4 <SVCCTL_App_Notification+0x174>)
 80064fa:	2205      	movs	r2, #5
 80064fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006506:	b29a      	uxth	r2, r3
 8006508:	4b32      	ldr	r3, [pc, #200]	; (80065d4 <SVCCTL_App_Notification+0x174>)
 800650a:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 800650c:	4b32      	ldr	r3, [pc, #200]	; (80065d8 <SVCCTL_App_Notification+0x178>)
 800650e:	2200      	movs	r2, #0
 8006510:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8006512:	4b30      	ldr	r3, [pc, #192]	; (80065d4 <SVCCTL_App_Notification+0x174>)
 8006514:	8ada      	ldrh	r2, [r3, #22]
 8006516:	4b30      	ldr	r3, [pc, #192]	; (80065d8 <SVCCTL_App_Notification+0x178>)
 8006518:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 800651a:	482f      	ldr	r0, [pc, #188]	; (80065d8 <SVCCTL_App_Notification+0x178>)
 800651c:	f000 fa11 	bl	8006942 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8006520:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8006522:	e052      	b.n	80065ca <SVCCTL_App_Notification+0x16a>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8006524:	6a3b      	ldr	r3, [r7, #32]
 8006526:	3302      	adds	r3, #2
 8006528:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 800652a:	69fb      	ldr	r3, [r7, #28]
 800652c:	881b      	ldrh	r3, [r3, #0]
 800652e:	b29b      	uxth	r3, r3
 8006530:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006534:	d040      	beq.n	80065b8 <SVCCTL_App_Notification+0x158>
 8006536:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800653a:	dc45      	bgt.n	80065c8 <SVCCTL_App_Notification+0x168>
 800653c:	2b04      	cmp	r3, #4
 800653e:	d03d      	beq.n	80065bc <SVCCTL_App_Notification+0x15c>
 8006540:	2b04      	cmp	r3, #4
 8006542:	db41      	blt.n	80065c8 <SVCCTL_App_Notification+0x168>
 8006544:	f240 420a 	movw	r2, #1034	; 0x40a
 8006548:	4293      	cmp	r3, r2
 800654a:	dc3d      	bgt.n	80065c8 <SVCCTL_App_Notification+0x168>
 800654c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006550:	dd3a      	ble.n	80065c8 <SVCCTL_App_Notification+0x168>
 8006552:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 8006556:	2b09      	cmp	r3, #9
 8006558:	d836      	bhi.n	80065c8 <SVCCTL_App_Notification+0x168>
 800655a:	a201      	add	r2, pc, #4	; (adr r2, 8006560 <SVCCTL_App_Notification+0x100>)
 800655c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006560:	080065b1 	.word	0x080065b1
 8006564:	08006589 	.word	0x08006589
 8006568:	080065c9 	.word	0x080065c9
 800656c:	080065c9 	.word	0x080065c9
 8006570:	080065c9 	.word	0x080065c9
 8006574:	080065c9 	.word	0x080065c9
 8006578:	080065c1 	.word	0x080065c1
 800657c:	080065c9 	.word	0x080065c9
 8006580:	0800659d 	.word	0x0800659d
 8006584:	080065c1 	.word	0x080065c1
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8006588:	4b12      	ldr	r3, [pc, #72]	; (80065d4 <SVCCTL_App_Notification+0x174>)
 800658a:	8adb      	ldrh	r3, [r3, #22]
 800658c:	4913      	ldr	r1, [pc, #76]	; (80065dc <SVCCTL_App_Notification+0x17c>)
 800658e:	4618      	mov	r0, r3
 8006590:	f7fe f822 	bl	80045d8 <aci_gap_pass_key_resp>
 8006594:	4603      	mov	r3, r0
 8006596:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 800659a:	e012      	b.n	80065c2 <SVCCTL_App_Notification+0x162>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 800659c:	4b0d      	ldr	r3, [pc, #52]	; (80065d4 <SVCCTL_App_Notification+0x174>)
 800659e:	8adb      	ldrh	r3, [r3, #22]
 80065a0:	2101      	movs	r1, #1
 80065a2:	4618      	mov	r0, r3
 80065a4:	f7fe f9c2 	bl	800492c <aci_gap_numeric_comparison_value_confirm_yesno>
 80065a8:	4603      	mov	r3, r0
 80065aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 80065ae:	e008      	b.n	80065c2 <SVCCTL_App_Notification+0x162>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	3302      	adds	r3, #2
 80065b4:	61bb      	str	r3, [r7, #24]
          break;
 80065b6:	e004      	b.n	80065c2 <SVCCTL_App_Notification+0x162>
          break;
 80065b8:	bf00      	nop
 80065ba:	e005      	b.n	80065c8 <SVCCTL_App_Notification+0x168>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 80065bc:	bf00      	nop
 80065be:	e003      	b.n	80065c8 <SVCCTL_App_Notification+0x168>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 80065c0:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80065c2:	e001      	b.n	80065c8 <SVCCTL_App_Notification+0x168>
      break;
 80065c4:	bf00      	nop
 80065c6:	e000      	b.n	80065ca <SVCCTL_App_Notification+0x16a>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80065c8:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 80065ca:	2301      	movs	r3, #1
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3728      	adds	r7, #40	; 0x28
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}
 80065d4:	20000a8c 	.word	0x20000a8c
 80065d8:	20000b10 	.word	0x20000b10
 80065dc:	0001b207 	.word	0x0001b207

080065e0 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b082      	sub	sp, #8
 80065e4:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 80065e6:	4b06      	ldr	r3, [pc, #24]	; (8006600 <Ble_Tl_Init+0x20>)
 80065e8:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 80065ea:	4b06      	ldr	r3, [pc, #24]	; (8006604 <Ble_Tl_Init+0x24>)
 80065ec:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 80065ee:	463b      	mov	r3, r7
 80065f0:	4619      	mov	r1, r3
 80065f2:	4805      	ldr	r0, [pc, #20]	; (8006608 <Ble_Tl_Init+0x28>)
 80065f4:	f7ff f8be 	bl	8005774 <hci_init>

  return;
 80065f8:	bf00      	nop
}
 80065fa:	3708      	adds	r7, #8
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}
 8006600:	200300d8 	.word	0x200300d8
 8006604:	0800690d 	.word	0x0800690d
 8006608:	080068d5 	.word	0x080068d5

0800660c <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800660c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800660e:	b08d      	sub	sp, #52	; 0x34
 8006610:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8006612:	2300      	movs	r3, #0
 8006614:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8006616:	2392      	movs	r3, #146	; 0x92
 8006618:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800661a:	f7fe fdda 	bl	80051d2 <hci_reset>
 800661e:	4603      	mov	r3, r0
 8006620:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8006622:	f000 f8d7 	bl	80067d4 <BleGetBdAddress>
 8006626:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8006628:	693a      	ldr	r2, [r7, #16]
 800662a:	2106      	movs	r1, #6
 800662c:	2000      	movs	r0, #0
 800662e:	f7fe fc90 	bl	8004f52 <aci_hal_write_config_data>
 8006632:	4603      	mov	r3, r0
 8006634:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8006636:	4a4a      	ldr	r2, [pc, #296]	; (8006760 <Ble_Hci_Gap_Gatt_Init+0x154>)
 8006638:	2110      	movs	r1, #16
 800663a:	2018      	movs	r0, #24
 800663c:	f7fe fc89 	bl	8004f52 <aci_hal_write_config_data>
 8006640:	4603      	mov	r3, r0
 8006642:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8006644:	4a47      	ldr	r2, [pc, #284]	; (8006764 <Ble_Hci_Gap_Gatt_Init+0x158>)
 8006646:	2110      	movs	r1, #16
 8006648:	2008      	movs	r0, #8
 800664a:	f7fe fc82 	bl	8004f52 <aci_hal_write_config_data>
 800664e:	4603      	mov	r3, r0
 8006650:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8006652:	2118      	movs	r1, #24
 8006654:	2001      	movs	r0, #1
 8006656:	f7fe fd01 	bl	800505c <aci_hal_set_tx_power_level>
 800665a:	4603      	mov	r3, r0
 800665c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800665e:	f7fe f9cc 	bl	80049fa <aci_gatt_init>
 8006662:	4603      	mov	r3, r0
 8006664:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8006666:	2300      	movs	r3, #0
 8006668:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800666a:	7bfb      	ldrb	r3, [r7, #15]
 800666c:	f043 0301 	orr.w	r3, r3, #1
 8006670:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8006672:	7bfb      	ldrb	r3, [r7, #15]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d01f      	beq.n	80066b8 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8006678:	4b3b      	ldr	r3, [pc, #236]	; (8006768 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 800667a:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800667c:	1dba      	adds	r2, r7, #6
 800667e:	7bf8      	ldrb	r0, [r7, #15]
 8006680:	1cbb      	adds	r3, r7, #2
 8006682:	9301      	str	r3, [sp, #4]
 8006684:	1d3b      	adds	r3, r7, #4
 8006686:	9300      	str	r3, [sp, #0]
 8006688:	4613      	mov	r3, r2
 800668a:	2208      	movs	r2, #8
 800668c:	2100      	movs	r1, #0
 800668e:	f7fe f80a 	bl	80046a6 <aci_gap_init>
 8006692:	4603      	mov	r3, r0
 8006694:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8006696:	88fc      	ldrh	r4, [r7, #6]
 8006698:	88bd      	ldrh	r5, [r7, #4]
 800669a:	68b8      	ldr	r0, [r7, #8]
 800669c:	f7f9 fd6e 	bl	800017c <strlen>
 80066a0:	4603      	mov	r3, r0
 80066a2:	b2da      	uxtb	r2, r3
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	9300      	str	r3, [sp, #0]
 80066a8:	4613      	mov	r3, r2
 80066aa:	2200      	movs	r2, #0
 80066ac:	4629      	mov	r1, r5
 80066ae:	4620      	mov	r0, r4
 80066b0:	f7fe fba6 	bl	8004e00 <aci_gatt_update_char_value>
 80066b4:	4603      	mov	r3, r0
 80066b6:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 80066b8:	88f8      	ldrh	r0, [r7, #6]
 80066ba:	8879      	ldrh	r1, [r7, #2]
 80066bc:	463b      	mov	r3, r7
 80066be:	9300      	str	r3, [sp, #0]
 80066c0:	2302      	movs	r3, #2
 80066c2:	2200      	movs	r2, #0
 80066c4:	f7fe fb9c 	bl	8004e00 <aci_gatt_update_char_value>
 80066c8:	4603      	mov	r3, r0
 80066ca:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 80066cc:	2202      	movs	r2, #2
 80066ce:	2102      	movs	r1, #2
 80066d0:	2000      	movs	r0, #0
 80066d2:	f7fe fda2 	bl	800521a <hci_le_set_default_phy>
 80066d6:	4603      	mov	r3, r0
 80066d8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 80066da:	4b24      	ldr	r3, [pc, #144]	; (800676c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80066dc:	2201      	movs	r2, #1
 80066de:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 80066e0:	4b22      	ldr	r3, [pc, #136]	; (800676c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80066e2:	781b      	ldrb	r3, [r3, #0]
 80066e4:	4618      	mov	r0, r3
 80066e6:	f7fd fe5f 	bl	80043a8 <aci_gap_set_io_capability>
 80066ea:	4603      	mov	r3, r0
 80066ec:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 80066ee:	4b1f      	ldr	r3, [pc, #124]	; (800676c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80066f0:	2201      	movs	r2, #1
 80066f2:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 80066f4:	4b1d      	ldr	r3, [pc, #116]	; (800676c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80066f6:	2208      	movs	r2, #8
 80066f8:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 80066fa:	4b1c      	ldr	r3, [pc, #112]	; (800676c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80066fc:	2210      	movs	r2, #16
 80066fe:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8006700:	4b1a      	ldr	r3, [pc, #104]	; (800676c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8006702:	2200      	movs	r2, #0
 8006704:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8006706:	4b19      	ldr	r3, [pc, #100]	; (800676c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8006708:	4a19      	ldr	r2, [pc, #100]	; (8006770 <Ble_Hci_Gap_Gatt_Init+0x164>)
 800670a:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800670c:	4b17      	ldr	r3, [pc, #92]	; (800676c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800670e:	2200      	movs	r2, #0
 8006710:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8006712:	4b16      	ldr	r3, [pc, #88]	; (800676c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8006714:	789c      	ldrb	r4, [r3, #2]
 8006716:	4b15      	ldr	r3, [pc, #84]	; (800676c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8006718:	785d      	ldrb	r5, [r3, #1]
 800671a:	4b14      	ldr	r3, [pc, #80]	; (800676c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800671c:	791b      	ldrb	r3, [r3, #4]
 800671e:	4a13      	ldr	r2, [pc, #76]	; (800676c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8006720:	7952      	ldrb	r2, [r2, #5]
 8006722:	4912      	ldr	r1, [pc, #72]	; (800676c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8006724:	78c9      	ldrb	r1, [r1, #3]
 8006726:	4811      	ldr	r0, [pc, #68]	; (800676c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8006728:	6880      	ldr	r0, [r0, #8]
 800672a:	2600      	movs	r6, #0
 800672c:	9604      	str	r6, [sp, #16]
 800672e:	9003      	str	r0, [sp, #12]
 8006730:	9102      	str	r1, [sp, #8]
 8006732:	9201      	str	r2, [sp, #4]
 8006734:	9300      	str	r3, [sp, #0]
 8006736:	2300      	movs	r3, #0
 8006738:	2201      	movs	r2, #1
 800673a:	4629      	mov	r1, r5
 800673c:	4620      	mov	r0, r4
 800673e:	f7fd fe87 	bl	8004450 <aci_gap_set_authentication_requirement>
 8006742:	4603      	mov	r3, r0
 8006744:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8006746:	4b09      	ldr	r3, [pc, #36]	; (800676c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8006748:	789b      	ldrb	r3, [r3, #2]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d003      	beq.n	8006756 <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 800674e:	f7fe f8c9 	bl	80048e4 <aci_gap_configure_whitelist>
 8006752:	4603      	mov	r3, r0
 8006754:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 8006756:	bf00      	nop
 8006758:	371c      	adds	r7, #28
 800675a:	46bd      	mov	sp, r7
 800675c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800675e:	bf00      	nop
 8006760:	08007768 	.word	0x08007768
 8006764:	08007778 	.word	0x08007778
 8006768:	080075a4 	.word	0x080075a4
 800676c:	20000a8c 	.word	0x20000a8c
 8006770:	0001b207 	.word	0x0001b207

08006774 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b08c      	sub	sp, #48	; 0x30
 8006778:	af08      	add	r7, sp, #32
 800677a:	4603      	mov	r3, r0
 800677c:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800677e:	2392      	movs	r3, #146	; 0x92
 8006780:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 8006782:	4a12      	ldr	r2, [pc, #72]	; (80067cc <Adv_Request+0x58>)
 8006784:	79fb      	ldrb	r3, [r7, #7]
 8006786:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 800678a:	2300      	movs	r3, #0
 800678c:	9306      	str	r3, [sp, #24]
 800678e:	2300      	movs	r3, #0
 8006790:	9305      	str	r3, [sp, #20]
 8006792:	2300      	movs	r3, #0
 8006794:	9304      	str	r3, [sp, #16]
 8006796:	2300      	movs	r3, #0
 8006798:	9303      	str	r3, [sp, #12]
 800679a:	2300      	movs	r3, #0
 800679c:	9302      	str	r3, [sp, #8]
 800679e:	2300      	movs	r3, #0
 80067a0:	9301      	str	r3, [sp, #4]
 80067a2:	2300      	movs	r3, #0
 80067a4:	9300      	str	r3, [sp, #0]
 80067a6:	2300      	movs	r3, #0
 80067a8:	22a0      	movs	r2, #160	; 0xa0
 80067aa:	2180      	movs	r1, #128	; 0x80
 80067ac:	2000      	movs	r0, #0
 80067ae:	f7fd fd01 	bl	80041b4 <aci_gap_set_discoverable>
 80067b2:	4603      	mov	r3, r0
 80067b4:	73fb      	strb	r3, [r7, #15]
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 80067b6:	4906      	ldr	r1, [pc, #24]	; (80067d0 <Adv_Request+0x5c>)
 80067b8:	2009      	movs	r0, #9
 80067ba:	f7fe f821 	bl	8004800 <aci_gap_update_adv_data>
 80067be:	4603      	mov	r3, r0
 80067c0:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 80067c2:	bf00      	nop
}
 80067c4:	3710      	adds	r7, #16
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	20000a8c 	.word	0x20000a8c
 80067d0:	20000014 	.word	0x20000014

080067d4 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b086      	sub	sp, #24
 80067d8:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 80067da:	f7ff fdc3 	bl	8006364 <LL_FLASH_GetUDN>
 80067de:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067e6:	d023      	beq.n	8006830 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 80067e8:	f7ff fdd4 	bl	8006394 <LL_FLASH_GetSTCompanyID>
 80067ec:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 80067ee:	f7ff fdc5 	bl	800637c <LL_FLASH_GetDeviceID>
 80067f2:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	b2da      	uxtb	r2, r3
 80067f8:	4b16      	ldr	r3, [pc, #88]	; (8006854 <BleGetBdAddress+0x80>)
 80067fa:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	0a1b      	lsrs	r3, r3, #8
 8006800:	b2da      	uxtb	r2, r3
 8006802:	4b14      	ldr	r3, [pc, #80]	; (8006854 <BleGetBdAddress+0x80>)
 8006804:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	b2da      	uxtb	r2, r3
 800680a:	4b12      	ldr	r3, [pc, #72]	; (8006854 <BleGetBdAddress+0x80>)
 800680c:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	b2da      	uxtb	r2, r3
 8006812:	4b10      	ldr	r3, [pc, #64]	; (8006854 <BleGetBdAddress+0x80>)
 8006814:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	0a1b      	lsrs	r3, r3, #8
 800681a:	b2da      	uxtb	r2, r3
 800681c:	4b0d      	ldr	r3, [pc, #52]	; (8006854 <BleGetBdAddress+0x80>)
 800681e:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	0c1b      	lsrs	r3, r3, #16
 8006824:	b2da      	uxtb	r2, r3
 8006826:	4b0b      	ldr	r3, [pc, #44]	; (8006854 <BleGetBdAddress+0x80>)
 8006828:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800682a:	4b0a      	ldr	r3, [pc, #40]	; (8006854 <BleGetBdAddress+0x80>)
 800682c:	617b      	str	r3, [r7, #20]
 800682e:	e00b      	b.n	8006848 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8006830:	2000      	movs	r0, #0
 8006832:	f7ff fcb1 	bl	8006198 <OTP_Read>
 8006836:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d002      	beq.n	8006844 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	617b      	str	r3, [r7, #20]
 8006842:	e001      	b.n	8006848 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8006844:	4b04      	ldr	r3, [pc, #16]	; (8006858 <BleGetBdAddress+0x84>)
 8006846:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8006848:	697b      	ldr	r3, [r7, #20]
}
 800684a:	4618      	mov	r0, r3
 800684c:	3718      	adds	r7, #24
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop
 8006854:	20000a84 	.word	0x20000a84
 8006858:	08007760 	.word	0x08007760

0800685c <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b082      	sub	sp, #8
 8006860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8006862:	4b0a      	ldr	r3, [pc, #40]	; (800688c <Adv_Cancel+0x30>)
 8006864:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006868:	2b05      	cmp	r3, #5
 800686a:	d00a      	beq.n	8006882 <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800686c:	2392      	movs	r3, #146	; 0x92
 800686e:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 8006870:	f7fd fc7c 	bl	800416c <aci_gap_set_non_discoverable>
 8006874:	4603      	mov	r3, r0
 8006876:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8006878:	4b04      	ldr	r3, [pc, #16]	; (800688c <Adv_Cancel+0x30>)
 800687a:	2200      	movs	r2, #0
 800687c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 8006880:	bf00      	nop
 8006882:	bf00      	nop
}
 8006884:	3708      	adds	r7, #8
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	20000a8c 	.word	0x20000a8c

08006890 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8006898:	2100      	movs	r1, #0
 800689a:	2002      	movs	r0, #2
 800689c:	f000 fcda 	bl	8007254 <UTIL_SEQ_SetTask>

  return;
 80068a0:	bf00      	nop
}
 80068a2:	3708      	adds	r7, #8
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b082      	sub	sp, #8
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80068b0:	2001      	movs	r0, #1
 80068b2:	f000 fd3b 	bl	800732c <UTIL_SEQ_SetEvt>

  return;
 80068b6:	bf00      	nop
}
 80068b8:	3708      	adds	r7, #8
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}

080068be <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 80068be:	b580      	push	{r7, lr}
 80068c0:	b082      	sub	sp, #8
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80068c6:	2001      	movs	r0, #1
 80068c8:	f000 fd50 	bl	800736c <UTIL_SEQ_WaitEvt>

  return;
 80068cc:	bf00      	nop
}
 80068ce:	3708      	adds	r7, #8
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	3308      	adds	r3, #8
 80068e6:	4618      	mov	r0, r3
 80068e8:	f7fe fdfe 	bl	80054e8 <SVCCTL_UserEvtRx>
 80068ec:	4603      	mov	r3, r0
 80068ee:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 80068f0:	7afb      	ldrb	r3, [r7, #11]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d003      	beq.n	80068fe <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2201      	movs	r2, #1
 80068fa:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 80068fc:	e003      	b.n	8006906 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2200      	movs	r2, #0
 8006902:	701a      	strb	r2, [r3, #0]
  return;
 8006904:	bf00      	nop
}
 8006906:	3710      	adds	r7, #16
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
 8006912:	4603      	mov	r3, r0
 8006914:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 8006916:	79fb      	ldrb	r3, [r7, #7]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d002      	beq.n	8006922 <BLE_StatusNot+0x16>
 800691c:	2b01      	cmp	r3, #1
 800691e:	d006      	beq.n	800692e <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8006920:	e00b      	b.n	800693a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8006922:	2303      	movs	r3, #3
 8006924:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8006926:	68f8      	ldr	r0, [r7, #12]
 8006928:	f000 fcc0 	bl	80072ac <UTIL_SEQ_PauseTask>
      break;
 800692c:	e005      	b.n	800693a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800692e:	2303      	movs	r3, #3
 8006930:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8006932:	68f8      	ldr	r0, [r7, #12]
 8006934:	f000 fcda 	bl	80072ec <UTIL_SEQ_ResumeTask>
      break;
 8006938:	bf00      	nop
  }

  return;
 800693a:	bf00      	nop
}
 800693c:	3710      	adds	r7, #16
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}

08006942 <Custom_APP_Notification>:
  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
}

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 8006942:	b480      	push	{r7}
 8006944:	b083      	sub	sp, #12
 8006946:	af00      	add	r7, sp, #0
 8006948:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d002      	beq.n	8006958 <Custom_APP_Notification+0x16>
 8006952:	2b01      	cmp	r3, #1
 8006954:	d002      	beq.n	800695c <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 8006956:	e002      	b.n	800695e <Custom_APP_Notification+0x1c>
      break;
 8006958:	bf00      	nop
 800695a:	e000      	b.n	800695e <Custom_APP_Notification+0x1c>
      break;
 800695c:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 800695e:	bf00      	nop
}
 8006960:	370c      	adds	r7, #12
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr

0800696a <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 800696a:	b480      	push	{r7}
 800696c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 800696e:	bf00      	nop
}
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr

08006978 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b08a      	sub	sp, #40	; 0x28
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 8006980:	2300      	movs	r3, #0
 8006982:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	3301      	adds	r3, #1
 800698a:	623b      	str	r3, [r7, #32]

  switch (event_pckt->evt)
 800698c:	6a3b      	ldr	r3, [r7, #32]
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	2bff      	cmp	r3, #255	; 0xff
 8006992:	d12f      	bne.n	80069f4 <Custom_STM_Event_Handler+0x7c>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8006994:	6a3b      	ldr	r3, [r7, #32]
 8006996:	3302      	adds	r3, #2
 8006998:	61fb      	str	r3, [r7, #28]
      switch (blecore_evt->ecode)
 800699a:	69fb      	ldr	r3, [r7, #28]
 800699c:	881b      	ldrh	r3, [r3, #0]
 800699e:	b29b      	uxth	r3, r3
 80069a0:	f640 4214 	movw	r2, #3092	; 0xc14
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d01f      	beq.n	80069e8 <Custom_STM_Event_Handler+0x70>
 80069a8:	f640 4214 	movw	r2, #3092	; 0xc14
 80069ac:	4293      	cmp	r3, r2
 80069ae:	dc1d      	bgt.n	80069ec <Custom_STM_Event_Handler+0x74>
 80069b0:	f640 4201 	movw	r2, #3073	; 0xc01
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d003      	beq.n	80069c0 <Custom_STM_Event_Handler+0x48>
 80069b8:	f640 4213 	movw	r2, #3091	; 0xc13
 80069bc:	4293      	cmp	r3, r2

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 80069be:	e018      	b.n	80069f2 <Custom_STM_Event_Handler+0x7a>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	3302      	adds	r3, #2
 80069c4:	61bb      	str	r3, [r7, #24]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 80069c6:	69bb      	ldr	r3, [r7, #24]
 80069c8:	885b      	ldrh	r3, [r3, #2]
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	461a      	mov	r2, r3
 80069ce:	4b0d      	ldr	r3, [pc, #52]	; (8006a04 <Custom_STM_Event_Handler+0x8c>)
 80069d0:	885b      	ldrh	r3, [r3, #2]
 80069d2:	3301      	adds	r3, #1
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d10b      	bne.n	80069f0 <Custom_STM_Event_Handler+0x78>
            return_value = SVCCTL_EvtAckFlowEnable;
 80069d8:	2301      	movs	r3, #1
 80069da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80069de:	2101      	movs	r1, #1
 80069e0:	4809      	ldr	r0, [pc, #36]	; (8006a08 <Custom_STM_Event_Handler+0x90>)
 80069e2:	f7fb fbbb 	bl	800215c <HAL_GPIO_TogglePin>
          break;
 80069e6:	e003      	b.n	80069f0 <Custom_STM_Event_Handler+0x78>
          break;
 80069e8:	bf00      	nop
 80069ea:	e004      	b.n	80069f6 <Custom_STM_Event_Handler+0x7e>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 80069ec:	bf00      	nop
 80069ee:	e002      	b.n	80069f6 <Custom_STM_Event_Handler+0x7e>
          break;
 80069f0:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80069f2:	e000      	b.n	80069f6 <Custom_STM_Event_Handler+0x7e>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 80069f4:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 80069f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end Custom_STM_Event_Handler */
 80069fa:	4618      	mov	r0, r3
 80069fc:	3728      	adds	r7, #40	; 0x28
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
 8006a02:	bf00      	nop
 8006a04:	20000b14 	.word	0x20000b14
 8006a08:	48000400 	.word	0x48000400

08006a0c <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b08c      	sub	sp, #48	; 0x30
 8006a10:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8006a12:	2392      	movs	r3, #146	; 0x92
 8006a14:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 8006a16:	4834      	ldr	r0, [pc, #208]	; (8006ae8 <SVCCTL_InitCustomSvc+0xdc>)
 8006a18:	f7fe fd4c 	bl	80054b4 <SVCCTL_RegisterSvcHandler>
   * service_max_attribute_record = 1 for MySvc +
   *                                2 for MyCharWrite +
   *                              = 3
   */

  COPY_MYSVC_UUID(uuid.Char_UUID_128);
 8006a1c:	238f      	movs	r3, #143	; 0x8f
 8006a1e:	713b      	strb	r3, [r7, #4]
 8006a20:	23e5      	movs	r3, #229	; 0xe5
 8006a22:	717b      	strb	r3, [r7, #5]
 8006a24:	23b3      	movs	r3, #179	; 0xb3
 8006a26:	71bb      	strb	r3, [r7, #6]
 8006a28:	23d5      	movs	r3, #213	; 0xd5
 8006a2a:	71fb      	strb	r3, [r7, #7]
 8006a2c:	232e      	movs	r3, #46	; 0x2e
 8006a2e:	723b      	strb	r3, [r7, #8]
 8006a30:	237f      	movs	r3, #127	; 0x7f
 8006a32:	727b      	strb	r3, [r7, #9]
 8006a34:	234a      	movs	r3, #74	; 0x4a
 8006a36:	72bb      	strb	r3, [r7, #10]
 8006a38:	2398      	movs	r3, #152	; 0x98
 8006a3a:	72fb      	strb	r3, [r7, #11]
 8006a3c:	232a      	movs	r3, #42	; 0x2a
 8006a3e:	733b      	strb	r3, [r7, #12]
 8006a40:	2348      	movs	r3, #72	; 0x48
 8006a42:	737b      	strb	r3, [r7, #13]
 8006a44:	237a      	movs	r3, #122	; 0x7a
 8006a46:	73bb      	strb	r3, [r7, #14]
 8006a48:	23cc      	movs	r3, #204	; 0xcc
 8006a4a:	73fb      	strb	r3, [r7, #15]
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	743b      	strb	r3, [r7, #16]
 8006a50:	2300      	movs	r3, #0
 8006a52:	747b      	strb	r3, [r7, #17]
 8006a54:	2300      	movs	r3, #0
 8006a56:	74bb      	strb	r3, [r7, #18]
 8006a58:	2300      	movs	r3, #0
 8006a5a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 8006a5c:	1d39      	adds	r1, r7, #4
 8006a5e:	4b23      	ldr	r3, [pc, #140]	; (8006aec <SVCCTL_InitCustomSvc+0xe0>)
 8006a60:	9300      	str	r3, [sp, #0]
 8006a62:	2303      	movs	r3, #3
 8006a64:	2201      	movs	r2, #1
 8006a66:	2002      	movs	r0, #2
 8006a68:	f7fd ffec 	bl	8004a44 <aci_gatt_add_service>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  MyCharWrite
   */
  COPY_MYCHARWRITE_UUID(uuid.Char_UUID_128);
 8006a70:	2319      	movs	r3, #25
 8006a72:	713b      	strb	r3, [r7, #4]
 8006a74:	23ed      	movs	r3, #237	; 0xed
 8006a76:	717b      	strb	r3, [r7, #5]
 8006a78:	2382      	movs	r3, #130	; 0x82
 8006a7a:	71bb      	strb	r3, [r7, #6]
 8006a7c:	23ae      	movs	r3, #174	; 0xae
 8006a7e:	71fb      	strb	r3, [r7, #7]
 8006a80:	23ed      	movs	r3, #237	; 0xed
 8006a82:	723b      	strb	r3, [r7, #8]
 8006a84:	2321      	movs	r3, #33	; 0x21
 8006a86:	727b      	strb	r3, [r7, #9]
 8006a88:	234c      	movs	r3, #76	; 0x4c
 8006a8a:	72bb      	strb	r3, [r7, #10]
 8006a8c:	239d      	movs	r3, #157	; 0x9d
 8006a8e:	72fb      	strb	r3, [r7, #11]
 8006a90:	2341      	movs	r3, #65	; 0x41
 8006a92:	733b      	strb	r3, [r7, #12]
 8006a94:	2345      	movs	r3, #69	; 0x45
 8006a96:	737b      	strb	r3, [r7, #13]
 8006a98:	2322      	movs	r3, #34	; 0x22
 8006a9a:	73bb      	strb	r3, [r7, #14]
 8006a9c:	238e      	movs	r3, #142	; 0x8e
 8006a9e:	73fb      	strb	r3, [r7, #15]
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	743b      	strb	r3, [r7, #16]
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	747b      	strb	r3, [r7, #17]
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	74bb      	strb	r3, [r7, #18]
 8006aac:	2300      	movs	r3, #0
 8006aae:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMysvcHdle,
 8006ab0:	4b0e      	ldr	r3, [pc, #56]	; (8006aec <SVCCTL_InitCustomSvc+0xe0>)
 8006ab2:	8818      	ldrh	r0, [r3, #0]
 8006ab4:	4b0e      	ldr	r3, [pc, #56]	; (8006af0 <SVCCTL_InitCustomSvc+0xe4>)
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	1d3a      	adds	r2, r7, #4
 8006abc:	490d      	ldr	r1, [pc, #52]	; (8006af4 <SVCCTL_InitCustomSvc+0xe8>)
 8006abe:	9105      	str	r1, [sp, #20]
 8006ac0:	2100      	movs	r1, #0
 8006ac2:	9104      	str	r1, [sp, #16]
 8006ac4:	2110      	movs	r1, #16
 8006ac6:	9103      	str	r1, [sp, #12]
 8006ac8:	2101      	movs	r1, #1
 8006aca:	9102      	str	r1, [sp, #8]
 8006acc:	2100      	movs	r1, #0
 8006ace:	9101      	str	r1, [sp, #4]
 8006ad0:	2108      	movs	r1, #8
 8006ad2:	9100      	str	r1, [sp, #0]
 8006ad4:	2102      	movs	r1, #2
 8006ad6:	f7fe f88b 	bl	8004bf0 <aci_gatt_add_char>
 8006ada:	4603      	mov	r3, r0
 8006adc:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8006ade:	bf00      	nop
}
 8006ae0:	3718      	adds	r7, #24
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	bf00      	nop
 8006ae8:	08006979 	.word	0x08006979
 8006aec:	20000b14 	.word	0x20000b14
 8006af0:	2000001d 	.word	0x2000001d
 8006af4:	20000b16 	.word	0x20000b16

08006af8 <LL_PWR_EnableBootC2>:
{
 8006af8:	b480      	push	{r7}
 8006afa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8006afc:	4b05      	ldr	r3, [pc, #20]	; (8006b14 <LL_PWR_EnableBootC2+0x1c>)
 8006afe:	68db      	ldr	r3, [r3, #12]
 8006b00:	4a04      	ldr	r2, [pc, #16]	; (8006b14 <LL_PWR_EnableBootC2+0x1c>)
 8006b02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b06:	60d3      	str	r3, [r2, #12]
}
 8006b08:	bf00      	nop
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr
 8006b12:	bf00      	nop
 8006b14:	58000400 	.word	0x58000400

08006b18 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8006b20:	4b06      	ldr	r3, [pc, #24]	; (8006b3c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8006b22:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8006b26:	4905      	ldr	r1, [pc, #20]	; (8006b3c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8006b30:	bf00      	nop
 8006b32:	370c      	adds	r7, #12
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr
 8006b3c:	58000800 	.word	0x58000800

08006b40 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b083      	sub	sp, #12
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8006b48:	4b05      	ldr	r3, [pc, #20]	; (8006b60 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8006b4a:	6a1a      	ldr	r2, [r3, #32]
 8006b4c:	4904      	ldr	r1, [pc, #16]	; (8006b60 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4313      	orrs	r3, r2
 8006b52:	620b      	str	r3, [r1, #32]
}
 8006b54:	bf00      	nop
 8006b56:	370c      	adds	r7, #12
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr
 8006b60:	58000800 	.word	0x58000800

08006b64 <LL_AHB3_GRP1_EnableClock>:
{
 8006b64:	b480      	push	{r7}
 8006b66:	b085      	sub	sp, #20
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8006b6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006b72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8006b7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4013      	ands	r3, r2
 8006b86:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006b88:	68fb      	ldr	r3, [r7, #12]
}
 8006b8a:	bf00      	nop
 8006b8c:	3714      	adds	r7, #20
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr

08006b96 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8006b96:	b480      	push	{r7}
 8006b98:	b085      	sub	sp, #20
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8006b9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ba2:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8006ba6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4313      	orrs	r3, r2
 8006bae:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8006bb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bb6:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4013      	ands	r3, r2
 8006bbe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
}
 8006bc2:	bf00      	nop
 8006bc4:	3714      	adds	r7, #20
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr

08006bce <LL_C1_IPCC_EnableIT_TXF>:
{
 8006bce:	b480      	push	{r7}
 8006bd0:	b083      	sub	sp, #12
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	601a      	str	r2, [r3, #0]
}
 8006be2:	bf00      	nop
 8006be4:	370c      	adds	r7, #12
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr

08006bee <LL_C1_IPCC_EnableIT_RXO>:
{
 8006bee:	b480      	push	{r7}
 8006bf0:	b083      	sub	sp, #12
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f043 0201 	orr.w	r2, r3, #1
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	601a      	str	r2, [r3, #0]
}
 8006c02:	bf00      	nop
 8006c04:	370c      	adds	r7, #12
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr

08006c0e <LL_C1_IPCC_EnableTransmitChannel>:
{
 8006c0e:	b480      	push	{r7}
 8006c10:	b083      	sub	sp, #12
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
 8006c16:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	685a      	ldr	r2, [r3, #4]
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	041b      	lsls	r3, r3, #16
 8006c20:	43db      	mvns	r3, r3
 8006c22:	401a      	ands	r2, r3
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	605a      	str	r2, [r3, #4]
}
 8006c28:	bf00      	nop
 8006c2a:	370c      	adds	r7, #12
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr

08006c34 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	685a      	ldr	r2, [r3, #4]
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	041b      	lsls	r3, r3, #16
 8006c46:	431a      	orrs	r2, r3
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	605a      	str	r2, [r3, #4]
}
 8006c4c:	bf00      	nop
 8006c4e:	370c      	adds	r7, #12
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr

08006c58 <LL_C1_IPCC_EnableReceiveChannel>:
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b083      	sub	sp, #12
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	685a      	ldr	r2, [r3, #4]
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	43db      	mvns	r3, r3
 8006c6a:	401a      	ands	r2, r3
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	605a      	str	r2, [r3, #4]
}
 8006c70:	bf00      	nop
 8006c72:	370c      	adds	r7, #12
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr

08006c7c <LL_C1_IPCC_ClearFlag_CHx>:
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	683a      	ldr	r2, [r7, #0]
 8006c8a:	609a      	str	r2, [r3, #8]
}
 8006c8c:	bf00      	nop
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <LL_C1_IPCC_SetFlag_CHx>:
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b083      	sub	sp, #12
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	041a      	lsls	r2, r3, #16
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	609a      	str	r2, [r3, #8]
}
 8006caa:	bf00      	nop
 8006cac:	370c      	adds	r7, #12
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr

08006cb6 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8006cb6:	b480      	push	{r7}
 8006cb8:	b083      	sub	sp, #12
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	6078      	str	r0, [r7, #4]
 8006cbe:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	68da      	ldr	r2, [r3, #12]
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	4013      	ands	r3, r2
 8006cc8:	683a      	ldr	r2, [r7, #0]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d101      	bne.n	8006cd2 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e000      	b.n	8006cd4 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8006cd2:	2300      	movs	r3, #0
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	370c      	adds	r7, #12
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr

08006ce0 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b083      	sub	sp, #12
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	69da      	ldr	r2, [r3, #28]
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	4013      	ands	r3, r2
 8006cf2:	683a      	ldr	r2, [r7, #0]
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d101      	bne.n	8006cfc <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	e000      	b.n	8006cfe <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	370c      	adds	r7, #12
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr
	...

08006d0c <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8006d10:	2102      	movs	r1, #2
 8006d12:	4819      	ldr	r0, [pc, #100]	; (8006d78 <HW_IPCC_Rx_Handler+0x6c>)
 8006d14:	f7ff ffe4 	bl	8006ce0 <LL_C2_IPCC_IsActiveFlag_CHx>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d009      	beq.n	8006d32 <HW_IPCC_Rx_Handler+0x26>
 8006d1e:	4b16      	ldr	r3, [pc, #88]	; (8006d78 <HW_IPCC_Rx_Handler+0x6c>)
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	43db      	mvns	r3, r3
 8006d24:	f003 0302 	and.w	r3, r3, #2
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d002      	beq.n	8006d32 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8006d2c:	f000 f8da 	bl	8006ee4 <HW_IPCC_SYS_EvtHandler>
 8006d30:	e01f      	b.n	8006d72 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8006d32:	2101      	movs	r1, #1
 8006d34:	4810      	ldr	r0, [pc, #64]	; (8006d78 <HW_IPCC_Rx_Handler+0x6c>)
 8006d36:	f7ff ffd3 	bl	8006ce0 <LL_C2_IPCC_IsActiveFlag_CHx>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d008      	beq.n	8006d52 <HW_IPCC_Rx_Handler+0x46>
 8006d40:	4b0d      	ldr	r3, [pc, #52]	; (8006d78 <HW_IPCC_Rx_Handler+0x6c>)
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	f003 0301 	and.w	r3, r3, #1
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d102      	bne.n	8006d52 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 8006d4c:	f000 f88e 	bl	8006e6c <HW_IPCC_BLE_EvtHandler>
 8006d50:	e00f      	b.n	8006d72 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8006d52:	2108      	movs	r1, #8
 8006d54:	4808      	ldr	r0, [pc, #32]	; (8006d78 <HW_IPCC_Rx_Handler+0x6c>)
 8006d56:	f7ff ffc3 	bl	8006ce0 <LL_C2_IPCC_IsActiveFlag_CHx>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d009      	beq.n	8006d74 <HW_IPCC_Rx_Handler+0x68>
 8006d60:	4b05      	ldr	r3, [pc, #20]	; (8006d78 <HW_IPCC_Rx_Handler+0x6c>)
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	43db      	mvns	r3, r3
 8006d66:	f003 0308 	and.w	r3, r3, #8
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d002      	beq.n	8006d74 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 8006d6e:	f000 f905 	bl	8006f7c <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8006d72:	bf00      	nop
 8006d74:	bf00      	nop
}
 8006d76:	bd80      	pop	{r7, pc}
 8006d78:	58000c00 	.word	0x58000c00

08006d7c <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8006d80:	2102      	movs	r1, #2
 8006d82:	481a      	ldr	r0, [pc, #104]	; (8006dec <HW_IPCC_Tx_Handler+0x70>)
 8006d84:	f7ff ff97 	bl	8006cb6 <LL_C1_IPCC_IsActiveFlag_CHx>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d109      	bne.n	8006da2 <HW_IPCC_Tx_Handler+0x26>
 8006d8e:	4b17      	ldr	r3, [pc, #92]	; (8006dec <HW_IPCC_Tx_Handler+0x70>)
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	43db      	mvns	r3, r3
 8006d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d002      	beq.n	8006da2 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8006d9c:	f000 f896 	bl	8006ecc <HW_IPCC_SYS_CmdEvtHandler>
 8006da0:	e020      	b.n	8006de4 <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8006da2:	2108      	movs	r1, #8
 8006da4:	4811      	ldr	r0, [pc, #68]	; (8006dec <HW_IPCC_Tx_Handler+0x70>)
 8006da6:	f7ff ff86 	bl	8006cb6 <LL_C1_IPCC_IsActiveFlag_CHx>
 8006daa:	4603      	mov	r3, r0
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d109      	bne.n	8006dc4 <HW_IPCC_Tx_Handler+0x48>
 8006db0:	4b0e      	ldr	r3, [pc, #56]	; (8006dec <HW_IPCC_Tx_Handler+0x70>)
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	43db      	mvns	r3, r3
 8006db6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d002      	beq.n	8006dc4 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 8006dbe:	f000 f8bf 	bl	8006f40 <HW_IPCC_MM_FreeBufHandler>
 8006dc2:	e00f      	b.n	8006de4 <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8006dc4:	2120      	movs	r1, #32
 8006dc6:	4809      	ldr	r0, [pc, #36]	; (8006dec <HW_IPCC_Tx_Handler+0x70>)
 8006dc8:	f7ff ff75 	bl	8006cb6 <LL_C1_IPCC_IsActiveFlag_CHx>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d109      	bne.n	8006de6 <HW_IPCC_Tx_Handler+0x6a>
 8006dd2:	4b06      	ldr	r3, [pc, #24]	; (8006dec <HW_IPCC_Tx_Handler+0x70>)
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	43db      	mvns	r3, r3
 8006dd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d002      	beq.n	8006de6 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8006de0:	f000 f850 	bl	8006e84 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8006de4:	bf00      	nop
 8006de6:	bf00      	nop
}
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop
 8006dec:	58000c00 	.word	0x58000c00

08006df0 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8006df4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006df8:	f7ff fecd 	bl	8006b96 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8006dfc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006e00:	f7ff fe9e 	bl	8006b40 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8006e04:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006e08:	f7ff fe86 	bl	8006b18 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8006e0c:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8006e0e:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8006e10:	f7ff fe72 	bl	8006af8 <LL_PWR_EnableBootC2>

  return;
 8006e14:	bf00      	nop
}
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8006e1c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006e20:	f7ff fea0 	bl	8006b64 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8006e24:	4806      	ldr	r0, [pc, #24]	; (8006e40 <HW_IPCC_Init+0x28>)
 8006e26:	f7ff fee2 	bl	8006bee <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8006e2a:	4805      	ldr	r0, [pc, #20]	; (8006e40 <HW_IPCC_Init+0x28>)
 8006e2c:	f7ff fecf 	bl	8006bce <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8006e30:	202c      	movs	r0, #44	; 0x2c
 8006e32:	f7fa ffc6 	bl	8001dc2 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8006e36:	202d      	movs	r0, #45	; 0x2d
 8006e38:	f7fa ffc3 	bl	8001dc2 <HAL_NVIC_EnableIRQ>

  return;
 8006e3c:	bf00      	nop
}
 8006e3e:	bd80      	pop	{r7, pc}
 8006e40:	58000c00 	.word	0x58000c00

08006e44 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8006e48:	2101      	movs	r1, #1
 8006e4a:	4802      	ldr	r0, [pc, #8]	; (8006e54 <HW_IPCC_BLE_Init+0x10>)
 8006e4c:	f7ff ff04 	bl	8006c58 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8006e50:	bf00      	nop
}
 8006e52:	bd80      	pop	{r7, pc}
 8006e54:	58000c00 	.word	0x58000c00

08006e58 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8006e5c:	2101      	movs	r1, #1
 8006e5e:	4802      	ldr	r0, [pc, #8]	; (8006e68 <HW_IPCC_BLE_SendCmd+0x10>)
 8006e60:	f7ff ff1a 	bl	8006c98 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8006e64:	bf00      	nop
}
 8006e66:	bd80      	pop	{r7, pc}
 8006e68:	58000c00 	.word	0x58000c00

08006e6c <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8006e70:	f7fe ffda 	bl	8005e28 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8006e74:	2101      	movs	r1, #1
 8006e76:	4802      	ldr	r0, [pc, #8]	; (8006e80 <HW_IPCC_BLE_EvtHandler+0x14>)
 8006e78:	f7ff ff00 	bl	8006c7c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8006e7c:	bf00      	nop
}
 8006e7e:	bd80      	pop	{r7, pc}
 8006e80:	58000c00 	.word	0x58000c00

08006e84 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8006e88:	2120      	movs	r1, #32
 8006e8a:	4803      	ldr	r0, [pc, #12]	; (8006e98 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8006e8c:	f7ff fed2 	bl	8006c34 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8006e90:	f7fe fffa 	bl	8005e88 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8006e94:	bf00      	nop
}
 8006e96:	bd80      	pop	{r7, pc}
 8006e98:	58000c00 	.word	0x58000c00

08006e9c <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8006ea0:	2102      	movs	r1, #2
 8006ea2:	4802      	ldr	r0, [pc, #8]	; (8006eac <HW_IPCC_SYS_Init+0x10>)
 8006ea4:	f7ff fed8 	bl	8006c58 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8006ea8:	bf00      	nop
}
 8006eaa:	bd80      	pop	{r7, pc}
 8006eac:	58000c00 	.word	0x58000c00

08006eb0 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8006eb4:	2102      	movs	r1, #2
 8006eb6:	4804      	ldr	r0, [pc, #16]	; (8006ec8 <HW_IPCC_SYS_SendCmd+0x18>)
 8006eb8:	f7ff feee 	bl	8006c98 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8006ebc:	2102      	movs	r1, #2
 8006ebe:	4802      	ldr	r0, [pc, #8]	; (8006ec8 <HW_IPCC_SYS_SendCmd+0x18>)
 8006ec0:	f7ff fea5 	bl	8006c0e <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8006ec4:	bf00      	nop
}
 8006ec6:	bd80      	pop	{r7, pc}
 8006ec8:	58000c00 	.word	0x58000c00

08006ecc <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8006ed0:	2102      	movs	r1, #2
 8006ed2:	4803      	ldr	r0, [pc, #12]	; (8006ee0 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8006ed4:	f7ff feae 	bl	8006c34 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8006ed8:	f7ff f826 	bl	8005f28 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8006edc:	bf00      	nop
}
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	58000c00 	.word	0x58000c00

08006ee4 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8006ee8:	f7ff f834 	bl	8005f54 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8006eec:	2102      	movs	r1, #2
 8006eee:	4802      	ldr	r0, [pc, #8]	; (8006ef8 <HW_IPCC_SYS_EvtHandler+0x14>)
 8006ef0:	f7ff fec4 	bl	8006c7c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8006ef4:	bf00      	nop
}
 8006ef6:	bd80      	pop	{r7, pc}
 8006ef8:	58000c00 	.word	0x58000c00

08006efc <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b082      	sub	sp, #8
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8006f04:	2108      	movs	r1, #8
 8006f06:	480c      	ldr	r0, [pc, #48]	; (8006f38 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8006f08:	f7ff fed5 	bl	8006cb6 <LL_C1_IPCC_IsActiveFlag_CHx>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d007      	beq.n	8006f22 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8006f12:	4a0a      	ldr	r2, [pc, #40]	; (8006f3c <HW_IPCC_MM_SendFreeBuf+0x40>)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8006f18:	2108      	movs	r1, #8
 8006f1a:	4807      	ldr	r0, [pc, #28]	; (8006f38 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8006f1c:	f7ff fe77 	bl	8006c0e <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8006f20:	e006      	b.n	8006f30 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8006f26:	2108      	movs	r1, #8
 8006f28:	4803      	ldr	r0, [pc, #12]	; (8006f38 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8006f2a:	f7ff feb5 	bl	8006c98 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8006f2e:	bf00      	nop
}
 8006f30:	3708      	adds	r7, #8
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}
 8006f36:	bf00      	nop
 8006f38:	58000c00 	.word	0x58000c00
 8006f3c:	20000b18 	.word	0x20000b18

08006f40 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8006f44:	2108      	movs	r1, #8
 8006f46:	4806      	ldr	r0, [pc, #24]	; (8006f60 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8006f48:	f7ff fe74 	bl	8006c34 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8006f4c:	4b05      	ldr	r3, [pc, #20]	; (8006f64 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8006f52:	2108      	movs	r1, #8
 8006f54:	4802      	ldr	r0, [pc, #8]	; (8006f60 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8006f56:	f7ff fe9f 	bl	8006c98 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8006f5a:	bf00      	nop
}
 8006f5c:	bd80      	pop	{r7, pc}
 8006f5e:	bf00      	nop
 8006f60:	58000c00 	.word	0x58000c00
 8006f64:	20000b18 	.word	0x20000b18

08006f68 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8006f6c:	2108      	movs	r1, #8
 8006f6e:	4802      	ldr	r0, [pc, #8]	; (8006f78 <HW_IPCC_TRACES_Init+0x10>)
 8006f70:	f7ff fe72 	bl	8006c58 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8006f74:	bf00      	nop
}
 8006f76:	bd80      	pop	{r7, pc}
 8006f78:	58000c00 	.word	0x58000c00

08006f7c <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8006f80:	f7ff f890 	bl	80060a4 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8006f84:	2108      	movs	r1, #8
 8006f86:	4802      	ldr	r0, [pc, #8]	; (8006f90 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8006f88:	f7ff fe78 	bl	8006c7c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8006f8c:	bf00      	nop
}
 8006f8e:	bd80      	pop	{r7, pc}
 8006f90:	58000c00 	.word	0x58000c00

08006f94 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8006f94:	b480      	push	{r7}
 8006f96:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8006f98:	4b05      	ldr	r3, [pc, #20]	; (8006fb0 <UTIL_LPM_Init+0x1c>)
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8006f9e:	4b05      	ldr	r3, [pc, #20]	; (8006fb4 <UTIL_LPM_Init+0x20>)
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8006fa4:	bf00      	nop
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr
 8006fae:	bf00      	nop
 8006fb0:	20000b1c 	.word	0x20000b1c
 8006fb4:	20000b20 	.word	0x20000b20

08006fb8 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b087      	sub	sp, #28
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	460b      	mov	r3, r1
 8006fc2:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fc4:	f3ef 8310 	mrs	r3, PRIMASK
 8006fc8:	613b      	str	r3, [r7, #16]
  return(result);
 8006fca:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8006fcc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006fce:	b672      	cpsid	i
}
 8006fd0:	bf00      	nop
  
  switch(state)
 8006fd2:	78fb      	ldrb	r3, [r7, #3]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d008      	beq.n	8006fea <UTIL_LPM_SetOffMode+0x32>
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d10e      	bne.n	8006ffa <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8006fdc:	4b0d      	ldr	r3, [pc, #52]	; (8007014 <UTIL_LPM_SetOffMode+0x5c>)
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	4a0b      	ldr	r2, [pc, #44]	; (8007014 <UTIL_LPM_SetOffMode+0x5c>)
 8006fe6:	6013      	str	r3, [r2, #0]
      break;
 8006fe8:	e008      	b.n	8006ffc <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	43da      	mvns	r2, r3
 8006fee:	4b09      	ldr	r3, [pc, #36]	; (8007014 <UTIL_LPM_SetOffMode+0x5c>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4013      	ands	r3, r2
 8006ff4:	4a07      	ldr	r2, [pc, #28]	; (8007014 <UTIL_LPM_SetOffMode+0x5c>)
 8006ff6:	6013      	str	r3, [r2, #0]
      break;
 8006ff8:	e000      	b.n	8006ffc <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8006ffa:	bf00      	nop
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f383 8810 	msr	PRIMASK, r3
}
 8007006:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8007008:	bf00      	nop
 800700a:	371c      	adds	r7, #28
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr
 8007014:	20000b20 	.word	0x20000b20

08007018 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b090      	sub	sp, #64	; 0x40
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8007020:	4b73      	ldr	r3, [pc, #460]	; (80071f0 <UTIL_SEQ_Run+0x1d8>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 8007026:	4b72      	ldr	r3, [pc, #456]	; (80071f0 <UTIL_SEQ_Run+0x1d8>)
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4013      	ands	r3, r2
 800702e:	4a70      	ldr	r2, [pc, #448]	; (80071f0 <UTIL_SEQ_Run+0x1d8>)
 8007030:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8007032:	4b70      	ldr	r3, [pc, #448]	; (80071f4 <UTIL_SEQ_Run+0x1dc>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8007038:	4b6f      	ldr	r3, [pc, #444]	; (80071f8 <UTIL_SEQ_Run+0x1e0>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800703e:	4b6f      	ldr	r3, [pc, #444]	; (80071fc <UTIL_SEQ_Run+0x1e4>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 8007044:	4b6e      	ldr	r3, [pc, #440]	; (8007200 <UTIL_SEQ_Run+0x1e8>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800704a:	e08d      	b.n	8007168 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800704c:	2300      	movs	r3, #0
 800704e:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8007050:	e002      	b.n	8007058 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8007052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007054:	3301      	adds	r3, #1
 8007056:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8007058:	4a6a      	ldr	r2, [pc, #424]	; (8007204 <UTIL_SEQ_Run+0x1ec>)
 800705a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800705c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8007060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007062:	401a      	ands	r2, r3
 8007064:	4b62      	ldr	r3, [pc, #392]	; (80071f0 <UTIL_SEQ_Run+0x1d8>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4013      	ands	r3, r2
 800706a:	2b00      	cmp	r3, #0
 800706c:	d0f1      	beq.n	8007052 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800706e:	4a65      	ldr	r2, [pc, #404]	; (8007204 <UTIL_SEQ_Run+0x1ec>)
 8007070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007072:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8007076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007078:	401a      	ands	r2, r3
 800707a:	4b5d      	ldr	r3, [pc, #372]	; (80071f0 <UTIL_SEQ_Run+0x1d8>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4013      	ands	r3, r2
 8007080:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8007082:	4a60      	ldr	r2, [pc, #384]	; (8007204 <UTIL_SEQ_Run+0x1ec>)
 8007084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007086:	00db      	lsls	r3, r3, #3
 8007088:	4413      	add	r3, r2
 800708a:	685a      	ldr	r2, [r3, #4]
 800708c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708e:	4013      	ands	r3, r2
 8007090:	2b00      	cmp	r3, #0
 8007092:	d106      	bne.n	80070a2 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8007094:	4a5b      	ldr	r2, [pc, #364]	; (8007204 <UTIL_SEQ_Run+0x1ec>)
 8007096:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007098:	00db      	lsls	r3, r3, #3
 800709a:	4413      	add	r3, r2
 800709c:	f04f 32ff 	mov.w	r2, #4294967295
 80070a0:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 80070a2:	4a58      	ldr	r2, [pc, #352]	; (8007204 <UTIL_SEQ_Run+0x1ec>)
 80070a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070a6:	00db      	lsls	r3, r3, #3
 80070a8:	4413      	add	r3, r2
 80070aa:	685a      	ldr	r2, [r3, #4]
 80070ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ae:	4013      	ands	r3, r2
 80070b0:	4618      	mov	r0, r3
 80070b2:	f000 f9b3 	bl	800741c <SEQ_BitPosition>
 80070b6:	4603      	mov	r3, r0
 80070b8:	461a      	mov	r2, r3
 80070ba:	4b53      	ldr	r3, [pc, #332]	; (8007208 <UTIL_SEQ_Run+0x1f0>)
 80070bc:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 80070be:	4a51      	ldr	r2, [pc, #324]	; (8007204 <UTIL_SEQ_Run+0x1ec>)
 80070c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070c2:	00db      	lsls	r3, r3, #3
 80070c4:	4413      	add	r3, r2
 80070c6:	685a      	ldr	r2, [r3, #4]
 80070c8:	4b4f      	ldr	r3, [pc, #316]	; (8007208 <UTIL_SEQ_Run+0x1f0>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	2101      	movs	r1, #1
 80070ce:	fa01 f303 	lsl.w	r3, r1, r3
 80070d2:	43db      	mvns	r3, r3
 80070d4:	401a      	ands	r2, r3
 80070d6:	494b      	ldr	r1, [pc, #300]	; (8007204 <UTIL_SEQ_Run+0x1ec>)
 80070d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070da:	00db      	lsls	r3, r3, #3
 80070dc:	440b      	add	r3, r1
 80070de:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070e0:	f3ef 8310 	mrs	r3, PRIMASK
 80070e4:	61bb      	str	r3, [r7, #24]
  return(result);
 80070e6:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80070e8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80070ea:	b672      	cpsid	i
}
 80070ec:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 80070ee:	4b46      	ldr	r3, [pc, #280]	; (8007208 <UTIL_SEQ_Run+0x1f0>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	2201      	movs	r2, #1
 80070f4:	fa02 f303 	lsl.w	r3, r2, r3
 80070f8:	43da      	mvns	r2, r3
 80070fa:	4b3e      	ldr	r3, [pc, #248]	; (80071f4 <UTIL_SEQ_Run+0x1dc>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4013      	ands	r3, r2
 8007100:	4a3c      	ldr	r2, [pc, #240]	; (80071f4 <UTIL_SEQ_Run+0x1dc>)
 8007102:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8007104:	2302      	movs	r3, #2
 8007106:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007108:	e013      	b.n	8007132 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800710a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800710c:	3b01      	subs	r3, #1
 800710e:	4a3d      	ldr	r2, [pc, #244]	; (8007204 <UTIL_SEQ_Run+0x1ec>)
 8007110:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8007114:	4b3c      	ldr	r3, [pc, #240]	; (8007208 <UTIL_SEQ_Run+0x1f0>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	2201      	movs	r2, #1
 800711a:	fa02 f303 	lsl.w	r3, r2, r3
 800711e:	43da      	mvns	r2, r3
 8007120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007122:	3b01      	subs	r3, #1
 8007124:	400a      	ands	r2, r1
 8007126:	4937      	ldr	r1, [pc, #220]	; (8007204 <UTIL_SEQ_Run+0x1ec>)
 8007128:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800712c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800712e:	3b01      	subs	r3, #1
 8007130:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007134:	2b00      	cmp	r3, #0
 8007136:	d1e8      	bne.n	800710a <UTIL_SEQ_Run+0xf2>
 8007138:	6a3b      	ldr	r3, [r7, #32]
 800713a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	f383 8810 	msr	PRIMASK, r3
}
 8007142:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8007144:	4b30      	ldr	r3, [pc, #192]	; (8007208 <UTIL_SEQ_Run+0x1f0>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a30      	ldr	r2, [pc, #192]	; (800720c <UTIL_SEQ_Run+0x1f4>)
 800714a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800714e:	4798      	blx	r3

    local_taskset = TaskSet;
 8007150:	4b28      	ldr	r3, [pc, #160]	; (80071f4 <UTIL_SEQ_Run+0x1dc>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 8007156:	4b28      	ldr	r3, [pc, #160]	; (80071f8 <UTIL_SEQ_Run+0x1e0>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800715c:	4b27      	ldr	r3, [pc, #156]	; (80071fc <UTIL_SEQ_Run+0x1e4>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 8007162:	4b27      	ldr	r3, [pc, #156]	; (8007200 <UTIL_SEQ_Run+0x1e8>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8007168:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800716a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800716c:	401a      	ands	r2, r3
 800716e:	4b20      	ldr	r3, [pc, #128]	; (80071f0 <UTIL_SEQ_Run+0x1d8>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4013      	ands	r3, r2
 8007174:	2b00      	cmp	r3, #0
 8007176:	d005      	beq.n	8007184 <UTIL_SEQ_Run+0x16c>
 8007178:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800717a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800717c:	4013      	ands	r3, r2
 800717e:	2b00      	cmp	r3, #0
 8007180:	f43f af64 	beq.w	800704c <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8007184:	4b20      	ldr	r3, [pc, #128]	; (8007208 <UTIL_SEQ_Run+0x1f0>)
 8007186:	f04f 32ff 	mov.w	r2, #4294967295
 800718a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800718c:	f000 f938 	bl	8007400 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007190:	f3ef 8310 	mrs	r3, PRIMASK
 8007194:	613b      	str	r3, [r7, #16]
  return(result);
 8007196:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8007198:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800719a:	b672      	cpsid	i
}
 800719c:	bf00      	nop
  local_taskset = TaskSet;
 800719e:	4b15      	ldr	r3, [pc, #84]	; (80071f4 <UTIL_SEQ_Run+0x1dc>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 80071a4:	4b14      	ldr	r3, [pc, #80]	; (80071f8 <UTIL_SEQ_Run+0x1e0>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 80071aa:	4b14      	ldr	r3, [pc, #80]	; (80071fc <UTIL_SEQ_Run+0x1e4>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 80071b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b4:	401a      	ands	r2, r3
 80071b6:	4b0e      	ldr	r3, [pc, #56]	; (80071f0 <UTIL_SEQ_Run+0x1d8>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4013      	ands	r3, r2
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d107      	bne.n	80071d0 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 80071c0:	4b0f      	ldr	r3, [pc, #60]	; (8007200 <UTIL_SEQ_Run+0x1e8>)
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071c6:	4013      	ands	r3, r2
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d101      	bne.n	80071d0 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 80071cc:	f7f9 fae3 	bl	8000796 <UTIL_SEQ_Idle>
 80071d0:	69fb      	ldr	r3, [r7, #28]
 80071d2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f383 8810 	msr	PRIMASK, r3
}
 80071da:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 80071dc:	f000 f917 	bl	800740e <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 80071e0:	4a03      	ldr	r2, [pc, #12]	; (80071f0 <UTIL_SEQ_Run+0x1d8>)
 80071e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e4:	6013      	str	r3, [r2, #0]

  return;
 80071e6:	bf00      	nop
}
 80071e8:	3740      	adds	r7, #64	; 0x40
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	bf00      	nop
 80071f0:	20000024 	.word	0x20000024
 80071f4:	20000b24 	.word	0x20000b24
 80071f8:	20000b28 	.word	0x20000b28
 80071fc:	20000020 	.word	0x20000020
 8007200:	20000b2c 	.word	0x20000b2c
 8007204:	20000bb4 	.word	0x20000bb4
 8007208:	20000b30 	.word	0x20000b30
 800720c:	20000b34 	.word	0x20000b34

08007210 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b088      	sub	sp, #32
 8007214:	af00      	add	r7, sp, #0
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	60b9      	str	r1, [r7, #8]
 800721a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800721c:	f3ef 8310 	mrs	r3, PRIMASK
 8007220:	617b      	str	r3, [r7, #20]
  return(result);
 8007222:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8007224:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8007226:	b672      	cpsid	i
}
 8007228:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800722a:	68f8      	ldr	r0, [r7, #12]
 800722c:	f000 f8f6 	bl	800741c <SEQ_BitPosition>
 8007230:	4603      	mov	r3, r0
 8007232:	4619      	mov	r1, r3
 8007234:	4a06      	ldr	r2, [pc, #24]	; (8007250 <UTIL_SEQ_RegTask+0x40>)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800723c:	69fb      	ldr	r3, [r7, #28]
 800723e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007240:	69bb      	ldr	r3, [r7, #24]
 8007242:	f383 8810 	msr	PRIMASK, r3
}
 8007246:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8007248:	bf00      	nop
}
 800724a:	3720      	adds	r7, #32
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}
 8007250:	20000b34 	.word	0x20000b34

08007254 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8007254:	b480      	push	{r7}
 8007256:	b087      	sub	sp, #28
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800725e:	f3ef 8310 	mrs	r3, PRIMASK
 8007262:	60fb      	str	r3, [r7, #12]
  return(result);
 8007264:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8007266:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007268:	b672      	cpsid	i
}
 800726a:	bf00      	nop

  TaskSet |= TaskId_bm;
 800726c:	4b0d      	ldr	r3, [pc, #52]	; (80072a4 <UTIL_SEQ_SetTask+0x50>)
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	4313      	orrs	r3, r2
 8007274:	4a0b      	ldr	r2, [pc, #44]	; (80072a4 <UTIL_SEQ_SetTask+0x50>)
 8007276:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8007278:	4a0b      	ldr	r2, [pc, #44]	; (80072a8 <UTIL_SEQ_SetTask+0x54>)
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	431a      	orrs	r2, r3
 8007284:	4908      	ldr	r1, [pc, #32]	; (80072a8 <UTIL_SEQ_SetTask+0x54>)
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	f383 8810 	msr	PRIMASK, r3
}
 8007296:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8007298:	bf00      	nop
}
 800729a:	371c      	adds	r7, #28
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr
 80072a4:	20000b24 	.word	0x20000b24
 80072a8:	20000bb4 	.word	0x20000bb4

080072ac <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80072ac:	b480      	push	{r7}
 80072ae:	b087      	sub	sp, #28
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072b4:	f3ef 8310 	mrs	r3, PRIMASK
 80072b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80072ba:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80072bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80072be:	b672      	cpsid	i
}
 80072c0:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	43da      	mvns	r2, r3
 80072c6:	4b08      	ldr	r3, [pc, #32]	; (80072e8 <UTIL_SEQ_PauseTask+0x3c>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4013      	ands	r3, r2
 80072cc:	4a06      	ldr	r2, [pc, #24]	; (80072e8 <UTIL_SEQ_PauseTask+0x3c>)
 80072ce:	6013      	str	r3, [r2, #0]
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	f383 8810 	msr	PRIMASK, r3
}
 80072da:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80072dc:	bf00      	nop
}
 80072de:	371c      	adds	r7, #28
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr
 80072e8:	20000020 	.word	0x20000020

080072ec <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80072ec:	b480      	push	{r7}
 80072ee:	b087      	sub	sp, #28
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072f4:	f3ef 8310 	mrs	r3, PRIMASK
 80072f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80072fa:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80072fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80072fe:	b672      	cpsid	i
}
 8007300:	bf00      	nop

  TaskMask |= TaskId_bm;
 8007302:	4b09      	ldr	r3, [pc, #36]	; (8007328 <UTIL_SEQ_ResumeTask+0x3c>)
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	4313      	orrs	r3, r2
 800730a:	4a07      	ldr	r2, [pc, #28]	; (8007328 <UTIL_SEQ_ResumeTask+0x3c>)
 800730c:	6013      	str	r3, [r2, #0]
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	f383 8810 	msr	PRIMASK, r3
}
 8007318:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800731a:	bf00      	nop
}
 800731c:	371c      	adds	r7, #28
 800731e:	46bd      	mov	sp, r7
 8007320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007324:	4770      	bx	lr
 8007326:	bf00      	nop
 8007328:	20000020 	.word	0x20000020

0800732c <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800732c:	b480      	push	{r7}
 800732e:	b087      	sub	sp, #28
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007334:	f3ef 8310 	mrs	r3, PRIMASK
 8007338:	60fb      	str	r3, [r7, #12]
  return(result);
 800733a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800733c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800733e:	b672      	cpsid	i
}
 8007340:	bf00      	nop

  EvtSet |= EvtId_bm;
 8007342:	4b09      	ldr	r3, [pc, #36]	; (8007368 <UTIL_SEQ_SetEvt+0x3c>)
 8007344:	681a      	ldr	r2, [r3, #0]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	4313      	orrs	r3, r2
 800734a:	4a07      	ldr	r2, [pc, #28]	; (8007368 <UTIL_SEQ_SetEvt+0x3c>)
 800734c:	6013      	str	r3, [r2, #0]
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	f383 8810 	msr	PRIMASK, r3
}
 8007358:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800735a:	bf00      	nop
}
 800735c:	371c      	adds	r7, #28
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr
 8007366:	bf00      	nop
 8007368:	20000b28 	.word	0x20000b28

0800736c <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b088      	sub	sp, #32
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8007374:	4b1f      	ldr	r3, [pc, #124]	; (80073f4 <UTIL_SEQ_WaitEvt+0x88>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800737a:	4b1e      	ldr	r3, [pc, #120]	; (80073f4 <UTIL_SEQ_WaitEvt+0x88>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007382:	d102      	bne.n	800738a <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8007384:	2300      	movs	r3, #0
 8007386:	61fb      	str	r3, [r7, #28]
 8007388:	e005      	b.n	8007396 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800738a:	4b1a      	ldr	r3, [pc, #104]	; (80073f4 <UTIL_SEQ_WaitEvt+0x88>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	2201      	movs	r2, #1
 8007390:	fa02 f303 	lsl.w	r3, r2, r3
 8007394:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8007396:	4b18      	ldr	r3, [pc, #96]	; (80073f8 <UTIL_SEQ_WaitEvt+0x8c>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800739c:	4a16      	ldr	r2, [pc, #88]	; (80073f8 <UTIL_SEQ_WaitEvt+0x8c>)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 80073a2:	e003      	b.n	80073ac <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 80073a4:	6879      	ldr	r1, [r7, #4]
 80073a6:	69f8      	ldr	r0, [r7, #28]
 80073a8:	f7f9 f9fc 	bl	80007a4 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 80073ac:	4b13      	ldr	r3, [pc, #76]	; (80073fc <UTIL_SEQ_WaitEvt+0x90>)
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	4013      	ands	r3, r2
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d0f5      	beq.n	80073a4 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 80073b8:	4a0e      	ldr	r2, [pc, #56]	; (80073f4 <UTIL_SEQ_WaitEvt+0x88>)
 80073ba:	69bb      	ldr	r3, [r7, #24]
 80073bc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073be:	f3ef 8310 	mrs	r3, PRIMASK
 80073c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80073c4:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80073c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80073c8:	b672      	cpsid	i
}
 80073ca:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	43da      	mvns	r2, r3
 80073d0:	4b0a      	ldr	r3, [pc, #40]	; (80073fc <UTIL_SEQ_WaitEvt+0x90>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4013      	ands	r3, r2
 80073d6:	4a09      	ldr	r2, [pc, #36]	; (80073fc <UTIL_SEQ_WaitEvt+0x90>)
 80073d8:	6013      	str	r3, [r2, #0]
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f383 8810 	msr	PRIMASK, r3
}
 80073e4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 80073e6:	4a04      	ldr	r2, [pc, #16]	; (80073f8 <UTIL_SEQ_WaitEvt+0x8c>)
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	6013      	str	r3, [r2, #0]
  return;
 80073ec:	bf00      	nop
}
 80073ee:	3720      	adds	r7, #32
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}
 80073f4:	20000b30 	.word	0x20000b30
 80073f8:	20000b2c 	.word	0x20000b2c
 80073fc:	20000b28 	.word	0x20000b28

08007400 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8007400:	b480      	push	{r7}
 8007402:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8007404:	bf00      	nop
}
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr

0800740e <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800740e:	b480      	push	{r7}
 8007410:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8007412:	bf00      	nop
}
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr

0800741c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800741c:	b480      	push	{r7}
 800741e:	b085      	sub	sp, #20
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 8007424:	2300      	movs	r3, #0
 8007426:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	0c1b      	lsrs	r3, r3, #16
 8007430:	041b      	lsls	r3, r3, #16
 8007432:	2b00      	cmp	r3, #0
 8007434:	d104      	bne.n	8007440 <SEQ_BitPosition+0x24>
 8007436:	2310      	movs	r3, #16
 8007438:	73fb      	strb	r3, [r7, #15]
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	041b      	lsls	r3, r3, #16
 800743e:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007446:	2b00      	cmp	r3, #0
 8007448:	d105      	bne.n	8007456 <SEQ_BitPosition+0x3a>
 800744a:	7bfb      	ldrb	r3, [r7, #15]
 800744c:	3308      	adds	r3, #8
 800744e:	73fb      	strb	r3, [r7, #15]
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	021b      	lsls	r3, r3, #8
 8007454:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800745c:	2b00      	cmp	r3, #0
 800745e:	d105      	bne.n	800746c <SEQ_BitPosition+0x50>
 8007460:	7bfb      	ldrb	r3, [r7, #15]
 8007462:	3304      	adds	r3, #4
 8007464:	73fb      	strb	r3, [r7, #15]
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	011b      	lsls	r3, r3, #4
 800746a:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	0f1b      	lsrs	r3, r3, #28
 8007470:	4a07      	ldr	r2, [pc, #28]	; (8007490 <SEQ_BitPosition+0x74>)
 8007472:	5cd2      	ldrb	r2, [r2, r3]
 8007474:	7bfb      	ldrb	r3, [r7, #15]
 8007476:	4413      	add	r3, r2
 8007478:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800747a:	7bfb      	ldrb	r3, [r7, #15]
 800747c:	f1c3 031f 	rsb	r3, r3, #31
 8007480:	b2db      	uxtb	r3, r3
}
 8007482:	4618      	mov	r0, r3
 8007484:	3714      	adds	r7, #20
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr
 800748e:	bf00      	nop
 8007490:	08007788 	.word	0x08007788

08007494 <__libc_init_array>:
 8007494:	b570      	push	{r4, r5, r6, lr}
 8007496:	4d0d      	ldr	r5, [pc, #52]	; (80074cc <__libc_init_array+0x38>)
 8007498:	4c0d      	ldr	r4, [pc, #52]	; (80074d0 <__libc_init_array+0x3c>)
 800749a:	1b64      	subs	r4, r4, r5
 800749c:	10a4      	asrs	r4, r4, #2
 800749e:	2600      	movs	r6, #0
 80074a0:	42a6      	cmp	r6, r4
 80074a2:	d109      	bne.n	80074b8 <__libc_init_array+0x24>
 80074a4:	4d0b      	ldr	r5, [pc, #44]	; (80074d4 <__libc_init_array+0x40>)
 80074a6:	4c0c      	ldr	r4, [pc, #48]	; (80074d8 <__libc_init_array+0x44>)
 80074a8:	f000 f82e 	bl	8007508 <_init>
 80074ac:	1b64      	subs	r4, r4, r5
 80074ae:	10a4      	asrs	r4, r4, #2
 80074b0:	2600      	movs	r6, #0
 80074b2:	42a6      	cmp	r6, r4
 80074b4:	d105      	bne.n	80074c2 <__libc_init_array+0x2e>
 80074b6:	bd70      	pop	{r4, r5, r6, pc}
 80074b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80074bc:	4798      	blx	r3
 80074be:	3601      	adds	r6, #1
 80074c0:	e7ee      	b.n	80074a0 <__libc_init_array+0xc>
 80074c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80074c6:	4798      	blx	r3
 80074c8:	3601      	adds	r6, #1
 80074ca:	e7f2      	b.n	80074b2 <__libc_init_array+0x1e>
 80074cc:	08007798 	.word	0x08007798
 80074d0:	08007798 	.word	0x08007798
 80074d4:	08007798 	.word	0x08007798
 80074d8:	0800779c 	.word	0x0800779c

080074dc <memcpy>:
 80074dc:	440a      	add	r2, r1
 80074de:	4291      	cmp	r1, r2
 80074e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80074e4:	d100      	bne.n	80074e8 <memcpy+0xc>
 80074e6:	4770      	bx	lr
 80074e8:	b510      	push	{r4, lr}
 80074ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074f2:	4291      	cmp	r1, r2
 80074f4:	d1f9      	bne.n	80074ea <memcpy+0xe>
 80074f6:	bd10      	pop	{r4, pc}

080074f8 <memset>:
 80074f8:	4402      	add	r2, r0
 80074fa:	4603      	mov	r3, r0
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d100      	bne.n	8007502 <memset+0xa>
 8007500:	4770      	bx	lr
 8007502:	f803 1b01 	strb.w	r1, [r3], #1
 8007506:	e7f9      	b.n	80074fc <memset+0x4>

08007508 <_init>:
 8007508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800750a:	bf00      	nop
 800750c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800750e:	bc08      	pop	{r3}
 8007510:	469e      	mov	lr, r3
 8007512:	4770      	bx	lr

08007514 <_fini>:
 8007514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007516:	bf00      	nop
 8007518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800751a:	bc08      	pop	{r3}
 800751c:	469e      	mov	lr, r3
 800751e:	4770      	bx	lr
